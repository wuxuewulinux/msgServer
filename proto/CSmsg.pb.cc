// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagUseRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagUseRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagShowSetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagShowSetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgRegisterSuccessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgRegisterSuccessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgLoginSuccessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgLoginSuccessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgQuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgQuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgRoleInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgRoleInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgLoginSuccessRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgLoginSuccessRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgAskAddFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgAskAddFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgAskAddFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgAskAddFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgSuccessAddFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgSuccessAddFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgSuccessAddFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgSuccessAddFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgDeleteFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgDeleteFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgDeleteFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgDeleteFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgSendChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgSendChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgSendChatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgSendChatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgFindNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgFindNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgFindNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgFindNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgChangeStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgChangeStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgChangeStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgChangeStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgConnectSuccessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgConnectSuccessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSChatReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChatReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSChatRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChatRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSChatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMateFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMateFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQuitMateFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQuitMateFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNotButtonMateFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNotButtonMateFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSuccessButtonMateFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSuccessButtonMateFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSShowHeroVipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSShowHeroVipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSShowHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSShowHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSShowHeroInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSShowHeroInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFeiJiBagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFeiJiBagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSZhaDanBagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSZhaDanBagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFeiJiDiPanBagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFeiJiDiPanBagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFeiJiSkillOneBagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFeiJiSkillOneBagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFeiJiSkillTwoBagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFeiJiSkillTwoBagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEnterHeroShowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEnterHeroShowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEnterHeroShowBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEnterHeroShowBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSendUserHeroShowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSendUserHeroShowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSShowZhaDanBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSShowZhaDanBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSShowZhaDanBagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSShowZhaDanBagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMateReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMateReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMateRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMateRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSRegisterLoginCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSBagCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSDecorateBagCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSChatCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMateCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSmsg_2eproto() {
  protobuf_AddDesc_CSmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSmsg.proto");
  GOOGLE_CHECK(file != NULL);
  CSLoginReq_descriptor_ = file->message_type(0);
  static const int CSLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, password_),
  };
  CSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginReq_descriptor_,
      CSLoginReq::default_instance_,
      CSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginReq));
  CSLoginRsp_descriptor_ = file->message_type(1);
  static const int CSLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, role_),
  };
  CSLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginRsp_descriptor_,
      CSLoginRsp::default_instance_,
      CSLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginRsp));
  CSRegisterReq_descriptor_ = file->message_type(2);
  static const int CSRegisterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, name_),
  };
  CSRegisterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterReq_descriptor_,
      CSRegisterReq::default_instance_,
      CSRegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterReq));
  CSRegisterRsp_descriptor_ = file->message_type(3);
  static const int CSRegisterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, type_),
  };
  CSRegisterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterRsp_descriptor_,
      CSRegisterRsp::default_instance_,
      CSRegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterRsp));
  CSQuitReq_descriptor_ = file->message_type(4);
  static const int CSQuitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitReq, pad_),
  };
  CSQuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQuitReq_descriptor_,
      CSQuitReq::default_instance_,
      CSQuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQuitReq));
  CSRegisterLoginReqParam_descriptor_ = file->message_type(5);
  static const int CSRegisterLoginReqParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, loginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, registerreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, quitreq_),
  };
  CSRegisterLoginReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginReqParam_descriptor_,
      CSRegisterLoginReqParam::default_instance_,
      CSRegisterLoginReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginReqParam));
  CSRegisterLoginRspParam_descriptor_ = file->message_type(6);
  static const int CSRegisterLoginRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, loginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, registerrsp_),
  };
  CSRegisterLoginRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginRspParam_descriptor_,
      CSRegisterLoginRspParam::default_instance_,
      CSRegisterLoginRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginRspParam));
  CSRegisterLoginReq_descriptor_ = file->message_type(7);
  static const int CSRegisterLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, reqparam_),
  };
  CSRegisterLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginReq_descriptor_,
      CSRegisterLoginReq::default_instance_,
      CSRegisterLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginReq));
  CSRegisterLoginRsp_descriptor_ = file->message_type(8);
  static const int CSRegisterLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, rspparam_),
  };
  CSRegisterLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginRsp_descriptor_,
      CSRegisterLoginRsp::default_instance_,
      CSRegisterLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginRsp));
  CSBagFetchReq_descriptor_ = file->message_type(9);
  static const int CSBagFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchReq, pad_),
  };
  CSBagFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagFetchReq_descriptor_,
      CSBagFetchReq::default_instance_,
      CSBagFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagFetchReq));
  CSBagGridInfo_descriptor_ = file->message_type(10);
  static const int CSBagGridInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, num_),
  };
  CSBagGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagGridInfo_descriptor_,
      CSBagGridInfo::default_instance_,
      CSBagGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagGridInfo));
  CSBagBagInfo_descriptor_ = file->message_type(11);
  static const int CSBagBagInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagBagInfo, gridinfo_),
  };
  CSBagBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagBagInfo_descriptor_,
      CSBagBagInfo::default_instance_,
      CSBagBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagBagInfo));
  CSBagFetchRsp_descriptor_ = file->message_type(12);
  static const int CSBagFetchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchRsp, baginfo_),
  };
  CSBagFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagFetchRsp_descriptor_,
      CSBagFetchRsp::default_instance_,
      CSBagFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagFetchRsp));
  CSBagUseReq_descriptor_ = file->message_type(13);
  static const int CSBagUseReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, pickedid_),
  };
  CSBagUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagUseReq_descriptor_,
      CSBagUseReq::default_instance_,
      CSBagUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagUseReq));
  CSItemInfo_descriptor_ = file->message_type(14);
  static const int CSItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, num_),
  };
  CSItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemInfo_descriptor_,
      CSItemInfo::default_instance_,
      CSItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemInfo));
  CSItemInfoList_descriptor_ = file->message_type(15);
  static const int CSItemInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfoList, iteminfo_),
  };
  CSItemInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemInfoList_descriptor_,
      CSItemInfoList::default_instance_,
      CSItemInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemInfoList));
  CSBagUseRsp_descriptor_ = file->message_type(16);
  static const int CSBagUseRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseRsp, iteminfolist_),
  };
  CSBagUseRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagUseRsp_descriptor_,
      CSBagUseRsp::default_instance_,
      CSBagUseRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagUseRsp));
  CSBagReqParam_descriptor_ = file->message_type(17);
  static const int CSBagReqParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, fetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, usereq_),
  };
  CSBagReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagReqParam_descriptor_,
      CSBagReqParam::default_instance_,
      CSBagReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagReqParam));
  CSBagRspParam_descriptor_ = file->message_type(18);
  static const int CSBagRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, fetchrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, usersp_),
  };
  CSBagRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagRspParam_descriptor_,
      CSBagRspParam::default_instance_,
      CSBagRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagRspParam));
  CSBagReq_descriptor_ = file->message_type(19);
  static const int CSBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, reqparam_),
  };
  CSBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagReq_descriptor_,
      CSBagReq::default_instance_,
      CSBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagReq));
  CSBagRsp_descriptor_ = file->message_type(20);
  static const int CSBagRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, rspparam_),
  };
  CSBagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagRsp_descriptor_,
      CSBagRsp::default_instance_,
      CSBagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagRsp));
  CSDecorateBagFetchReq_descriptor_ = file->message_type(21);
  static const int CSDecorateBagFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchReq, type_),
  };
  CSDecorateBagFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagFetchReq_descriptor_,
      CSDecorateBagFetchReq::default_instance_,
      CSDecorateBagFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagFetchReq));
  CSDecorateBagGridInfo_descriptor_ = file->message_type(22);
  static const int CSDecorateBagGridInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, endtime_),
  };
  CSDecorateBagGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagGridInfo_descriptor_,
      CSDecorateBagGridInfo::default_instance_,
      CSDecorateBagGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagGridInfo));
  CSDecorateBagInfo_descriptor_ = file->message_type(23);
  static const int CSDecorateBagInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagInfo, decorategridinfo_),
  };
  CSDecorateBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagInfo_descriptor_,
      CSDecorateBagInfo::default_instance_,
      CSDecorateBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagInfo));
  CSDecorateBagFetchRsp_descriptor_ = file->message_type(24);
  static const int CSDecorateBagFetchRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, decoratebaginfo_),
  };
  CSDecorateBagFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagFetchRsp_descriptor_,
      CSDecorateBagFetchRsp::default_instance_,
      CSDecorateBagFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagFetchRsp));
  CSDecorateBagShowSetReq_descriptor_ = file->message_type(25);
  static const int CSDecorateBagShowSetReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, id_),
  };
  CSDecorateBagShowSetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagShowSetReq_descriptor_,
      CSDecorateBagShowSetReq::default_instance_,
      CSDecorateBagShowSetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagShowSetReq));
  CSDecorateBagVIPFetchReq_descriptor_ = file->message_type(26);
  static const int CSDecorateBagVIPFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchReq, type_),
  };
  CSDecorateBagVIPFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPFetchReq_descriptor_,
      CSDecorateBagVIPFetchReq::default_instance_,
      CSDecorateBagVIPFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPFetchReq));
  CSDecorateBagVIPItem_descriptor_ = file->message_type(27);
  static const int CSDecorateBagVIPItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, vipgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, vipexper_),
  };
  CSDecorateBagVIPItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPItem_descriptor_,
      CSDecorateBagVIPItem::default_instance_,
      CSDecorateBagVIPItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPItem));
  CSDecorateBagVIPList_descriptor_ = file->message_type(28);
  static const int CSDecorateBagVIPList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPList, vipitemlist_),
  };
  CSDecorateBagVIPList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPList_descriptor_,
      CSDecorateBagVIPList::default_instance_,
      CSDecorateBagVIPList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPList));
  CSDecorateBagVIPFetchRsp_descriptor_ = file->message_type(29);
  static const int CSDecorateBagVIPFetchRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, decoratebaginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, viplist_),
  };
  CSDecorateBagVIPFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPFetchRsp_descriptor_,
      CSDecorateBagVIPFetchRsp::default_instance_,
      CSDecorateBagVIPFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPFetchRsp));
  CSDecorateBagReqParam_descriptor_ = file->message_type(30);
  static const int CSDecorateBagReqParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, fetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, showsetreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, vipfetchreq_),
  };
  CSDecorateBagReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagReqParam_descriptor_,
      CSDecorateBagReqParam::default_instance_,
      CSDecorateBagReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagReqParam));
  CSDecorateBagRspParam_descriptor_ = file->message_type(31);
  static const int CSDecorateBagRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, fetchrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, vipfetchrsp_),
  };
  CSDecorateBagRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagRspParam_descriptor_,
      CSDecorateBagRspParam::default_instance_,
      CSDecorateBagRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagRspParam));
  CSDecorateBagReq_descriptor_ = file->message_type(32);
  static const int CSDecorateBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, reqparam_),
  };
  CSDecorateBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagReq_descriptor_,
      CSDecorateBagReq::default_instance_,
      CSDecorateBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagReq));
  CSDecorateBagRsp_descriptor_ = file->message_type(33);
  static const int CSDecorateBagRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, rspparam_),
  };
  CSDecorateBagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagRsp_descriptor_,
      CSDecorateBagRsp::default_instance_,
      CSDecorateBagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagRsp));
  FriendList_descriptor_ = file->message_type(34);
  static const int FriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, frienduid_),
  };
  FriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendList_descriptor_,
      FriendList::default_instance_,
      FriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendList));
  CSMsgRegisterSuccessReq_descriptor_ = file->message_type(35);
  static const int CSMsgRegisterSuccessReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRegisterSuccessReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRegisterSuccessReq, name_),
  };
  CSMsgRegisterSuccessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgRegisterSuccessReq_descriptor_,
      CSMsgRegisterSuccessReq::default_instance_,
      CSMsgRegisterSuccessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRegisterSuccessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRegisterSuccessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgRegisterSuccessReq));
  CSMsgLoginSuccessReq_descriptor_ = file->message_type(36);
  static const int CSMsgLoginSuccessReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLoginSuccessReq, uid_),
  };
  CSMsgLoginSuccessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgLoginSuccessReq_descriptor_,
      CSMsgLoginSuccessReq::default_instance_,
      CSMsgLoginSuccessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLoginSuccessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLoginSuccessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgLoginSuccessReq));
  CSMsgQuitReq_descriptor_ = file->message_type(37);
  static const int CSMsgQuitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgQuitReq, uid_),
  };
  CSMsgQuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgQuitReq_descriptor_,
      CSMsgQuitReq::default_instance_,
      CSMsgQuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgQuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgQuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgQuitReq));
  CSMsgRoleInfo_descriptor_ = file->message_type(38);
  static const int CSMsgRoleInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, chatframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, name_),
  };
  CSMsgRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgRoleInfo_descriptor_,
      CSMsgRoleInfo::default_instance_,
      CSMsgRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgRoleInfo));
  CSMsgRoleInfoList_descriptor_ = file->message_type(39);
  static const int CSMsgRoleInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfoList, roleinfo_),
  };
  CSMsgRoleInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgRoleInfoList_descriptor_,
      CSMsgRoleInfoList::default_instance_,
      CSMsgRoleInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRoleInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgRoleInfoList));
  CSMsgLoginSuccessRsp_descriptor_ = file->message_type(40);
  static const int CSMsgLoginSuccessRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLoginSuccessRsp, friendlist_),
  };
  CSMsgLoginSuccessRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgLoginSuccessRsp_descriptor_,
      CSMsgLoginSuccessRsp::default_instance_,
      CSMsgLoginSuccessRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLoginSuccessRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLoginSuccessRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgLoginSuccessRsp));
  CSMsgAskAddFriendReq_descriptor_ = file->message_type(41);
  static const int CSMsgAskAddFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendReq, uid_),
  };
  CSMsgAskAddFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgAskAddFriendReq_descriptor_,
      CSMsgAskAddFriendReq::default_instance_,
      CSMsgAskAddFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgAskAddFriendReq));
  CSMsgAskAddFriendRsp_descriptor_ = file->message_type(42);
  static const int CSMsgAskAddFriendRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendRsp, friendname_),
  };
  CSMsgAskAddFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgAskAddFriendRsp_descriptor_,
      CSMsgAskAddFriendRsp::default_instance_,
      CSMsgAskAddFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAskAddFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgAskAddFriendRsp));
  CSMsgSuccessAddFriendReq_descriptor_ = file->message_type(43);
  static const int CSMsgSuccessAddFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendReq, uid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendReq, uid2_),
  };
  CSMsgSuccessAddFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgSuccessAddFriendReq_descriptor_,
      CSMsgSuccessAddFriendReq::default_instance_,
      CSMsgSuccessAddFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgSuccessAddFriendReq));
  CSMsgSuccessAddFriendRsp_descriptor_ = file->message_type(44);
  static const int CSMsgSuccessAddFriendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendRsp, friendroleinfo_),
  };
  CSMsgSuccessAddFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgSuccessAddFriendRsp_descriptor_,
      CSMsgSuccessAddFriendRsp::default_instance_,
      CSMsgSuccessAddFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSuccessAddFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgSuccessAddFriendRsp));
  CSMsgDeleteFriendReq_descriptor_ = file->message_type(45);
  static const int CSMsgDeleteFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendReq, uid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendReq, uid2_),
  };
  CSMsgDeleteFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgDeleteFriendReq_descriptor_,
      CSMsgDeleteFriendReq::default_instance_,
      CSMsgDeleteFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgDeleteFriendReq));
  CSMsgDeleteFriendRsp_descriptor_ = file->message_type(46);
  static const int CSMsgDeleteFriendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendRsp, uid_),
  };
  CSMsgDeleteFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgDeleteFriendRsp_descriptor_,
      CSMsgDeleteFriendRsp::default_instance_,
      CSMsgDeleteFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgDeleteFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgDeleteFriendRsp));
  CSMsgSendChatReq_descriptor_ = file->message_type(47);
  static const int CSMsgSendChatReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatReq, uid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatReq, uid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatReq, information_),
  };
  CSMsgSendChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgSendChatReq_descriptor_,
      CSMsgSendChatReq::default_instance_,
      CSMsgSendChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgSendChatReq));
  CSMsgSendChatRsp_descriptor_ = file->message_type(48);
  static const int CSMsgSendChatRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatRsp, information_),
  };
  CSMsgSendChatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgSendChatRsp_descriptor_,
      CSMsgSendChatRsp::default_instance_,
      CSMsgSendChatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgSendChatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgSendChatRsp));
  CSMsgFindNameReq_descriptor_ = file->message_type(49);
  static const int CSMsgFindNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgFindNameReq, name_),
  };
  CSMsgFindNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgFindNameReq_descriptor_,
      CSMsgFindNameReq::default_instance_,
      CSMsgFindNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgFindNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgFindNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgFindNameReq));
  CSMsgFindNameRsp_descriptor_ = file->message_type(50);
  static const int CSMsgFindNameRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgFindNameRsp, roleinfo_),
  };
  CSMsgFindNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgFindNameRsp_descriptor_,
      CSMsgFindNameRsp::default_instance_,
      CSMsgFindNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgFindNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgFindNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgFindNameRsp));
  CSMsgChangeStatusReq_descriptor_ = file->message_type(51);
  static const int CSMsgChangeStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusReq, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusReq, uid_),
  };
  CSMsgChangeStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgChangeStatusReq_descriptor_,
      CSMsgChangeStatusReq::default_instance_,
      CSMsgChangeStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgChangeStatusReq));
  CSMsgChangeStatusRsp_descriptor_ = file->message_type(52);
  static const int CSMsgChangeStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusRsp, roleinfo_),
  };
  CSMsgChangeStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgChangeStatusRsp_descriptor_,
      CSMsgChangeStatusRsp::default_instance_,
      CSMsgChangeStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgChangeStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgChangeStatusRsp));
  CSMsgConnectSuccessReq_descriptor_ = file->message_type(53);
  static const int CSMsgConnectSuccessReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgConnectSuccessReq, uid_),
  };
  CSMsgConnectSuccessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgConnectSuccessReq_descriptor_,
      CSMsgConnectSuccessReq::default_instance_,
      CSMsgConnectSuccessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgConnectSuccessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgConnectSuccessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgConnectSuccessReq));
  CSChatReqParam_descriptor_ = file->message_type(54);
  static const int CSChatReqParam_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, registersuccessreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, loginsuccessreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, msgquitreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, askaddfriendreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, successaddfriendreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, deletefriendreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, sendchatreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, findnamereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, changestatusreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, connectsuccessreq_),
  };
  CSChatReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSChatReqParam_descriptor_,
      CSChatReqParam::default_instance_,
      CSChatReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSChatReqParam));
  CSChatRspParam_descriptor_ = file->message_type(55);
  static const int CSChatRspParam_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, msgloginsuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, roleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, rolequit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, askaddfriendrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, successaddfriendrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, deletefriendrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, sendchatrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, findnamersp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, changestatusrsp_),
  };
  CSChatRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSChatRspParam_descriptor_,
      CSChatRspParam::default_instance_,
      CSChatRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSChatRspParam));
  CSChatReq_descriptor_ = file->message_type(56);
  static const int CSChatReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReq, reqparam_),
  };
  CSChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSChatReq_descriptor_,
      CSChatReq::default_instance_,
      CSChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSChatReq));
  CSChatRsp_descriptor_ = file->message_type(57);
  static const int CSChatRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRsp, rspparam_),
  };
  CSChatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSChatRsp_descriptor_,
      CSChatRsp::default_instance_,
      CSChatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSChatRsp));
  CSMateFetchReq_descriptor_ = file->message_type(58);
  static const int CSMateFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateFetchReq, uid_),
  };
  CSMateFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMateFetchReq_descriptor_,
      CSMateFetchReq::default_instance_,
      CSMateFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMateFetchReq));
  CSQuitMateFetchReq_descriptor_ = file->message_type(59);
  static const int CSQuitMateFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitMateFetchReq, uid_),
  };
  CSQuitMateFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQuitMateFetchReq_descriptor_,
      CSQuitMateFetchReq::default_instance_,
      CSQuitMateFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitMateFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitMateFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQuitMateFetchReq));
  CSNotButtonMateFetchReq_descriptor_ = file->message_type(60);
  static const int CSNotButtonMateFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotButtonMateFetchReq, uid_),
  };
  CSNotButtonMateFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNotButtonMateFetchReq_descriptor_,
      CSNotButtonMateFetchReq::default_instance_,
      CSNotButtonMateFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotButtonMateFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotButtonMateFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNotButtonMateFetchReq));
  CSSuccessButtonMateFetchReq_descriptor_ = file->message_type(61);
  static const int CSSuccessButtonMateFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSuccessButtonMateFetchReq, uid_),
  };
  CSSuccessButtonMateFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSuccessButtonMateFetchReq_descriptor_,
      CSSuccessButtonMateFetchReq::default_instance_,
      CSSuccessButtonMateFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSuccessButtonMateFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSuccessButtonMateFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSuccessButtonMateFetchReq));
  CSShowHeroVipInfo_descriptor_ = file->message_type(62);
  static const int CSShowHeroVipInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroVipInfo, vipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroVipInfo, vipgrade_),
  };
  CSShowHeroVipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSShowHeroVipInfo_descriptor_,
      CSShowHeroVipInfo::default_instance_,
      CSShowHeroVipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroVipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroVipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSShowHeroVipInfo));
  CSShowHeroInfo_descriptor_ = file->message_type(63);
  static const int CSShowHeroInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, vipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, vipgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, rolegrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, rolerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, roleheadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, name_),
  };
  CSShowHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSShowHeroInfo_descriptor_,
      CSShowHeroInfo::default_instance_,
      CSShowHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSShowHeroInfo));
  CSShowHeroInfoList_descriptor_ = file->message_type(64);
  static const int CSShowHeroInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfoList, heroinfolist_),
  };
  CSShowHeroInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSShowHeroInfoList_descriptor_,
      CSShowHeroInfoList::default_instance_,
      CSShowHeroInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowHeroInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSShowHeroInfoList));
  CSFeiJiBagList_descriptor_ = file->message_type(65);
  static const int CSFeiJiBagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiBagList, feiji_),
  };
  CSFeiJiBagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFeiJiBagList_descriptor_,
      CSFeiJiBagList::default_instance_,
      CSFeiJiBagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiBagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiBagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFeiJiBagList));
  CSZhaDanBagList_descriptor_ = file->message_type(66);
  static const int CSZhaDanBagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSZhaDanBagList, zhadan_),
  };
  CSZhaDanBagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSZhaDanBagList_descriptor_,
      CSZhaDanBagList::default_instance_,
      CSZhaDanBagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSZhaDanBagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSZhaDanBagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSZhaDanBagList));
  CSFeiJiDiPanBagList_descriptor_ = file->message_type(67);
  static const int CSFeiJiDiPanBagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiDiPanBagList, feijidipan_),
  };
  CSFeiJiDiPanBagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFeiJiDiPanBagList_descriptor_,
      CSFeiJiDiPanBagList::default_instance_,
      CSFeiJiDiPanBagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiDiPanBagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiDiPanBagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFeiJiDiPanBagList));
  CSFeiJiSkillOneBagList_descriptor_ = file->message_type(68);
  static const int CSFeiJiSkillOneBagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiSkillOneBagList, feijiskillone_),
  };
  CSFeiJiSkillOneBagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFeiJiSkillOneBagList_descriptor_,
      CSFeiJiSkillOneBagList::default_instance_,
      CSFeiJiSkillOneBagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiSkillOneBagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiSkillOneBagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFeiJiSkillOneBagList));
  CSFeiJiSkillTwoBagList_descriptor_ = file->message_type(69);
  static const int CSFeiJiSkillTwoBagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiSkillTwoBagList, feijiskilltwo_),
  };
  CSFeiJiSkillTwoBagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFeiJiSkillTwoBagList_descriptor_,
      CSFeiJiSkillTwoBagList::default_instance_,
      CSFeiJiSkillTwoBagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiSkillTwoBagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFeiJiSkillTwoBagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFeiJiSkillTwoBagList));
  CSEnterHeroShowRsp_descriptor_ = file->message_type(70);
  static const int CSEnterHeroShowRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, showherovipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, heroshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, feijibaglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, zhadanbaglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, feijidipanbaglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, feijiskillonebaglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, feijiskilltwobaglist_),
  };
  CSEnterHeroShowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEnterHeroShowRsp_descriptor_,
      CSEnterHeroShowRsp::default_instance_,
      CSEnterHeroShowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEnterHeroShowRsp));
  CSEnterHeroShowBagReq_descriptor_ = file->message_type(71);
  static const int CSEnterHeroShowBagReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowBagReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowBagReq, decoratebagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowBagReq, id_),
  };
  CSEnterHeroShowBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEnterHeroShowBagReq_descriptor_,
      CSEnterHeroShowBagReq::default_instance_,
      CSEnterHeroShowBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterHeroShowBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEnterHeroShowBagReq));
  CSSendUserHeroShowRsp_descriptor_ = file->message_type(72);
  static const int CSSendUserHeroShowRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSendUserHeroShowRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSendUserHeroShowRsp, zhadanid_),
  };
  CSSendUserHeroShowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSendUserHeroShowRsp_descriptor_,
      CSSendUserHeroShowRsp::default_instance_,
      CSSendUserHeroShowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSendUserHeroShowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSendUserHeroShowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSendUserHeroShowRsp));
  CSShowZhaDanBagReq_descriptor_ = file->message_type(73);
  static const int CSShowZhaDanBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagReq, zhadanid_),
  };
  CSShowZhaDanBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSShowZhaDanBagReq_descriptor_,
      CSShowZhaDanBagReq::default_instance_,
      CSShowZhaDanBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSShowZhaDanBagReq));
  CSShowZhaDanBagRsp_descriptor_ = file->message_type(74);
  static const int CSShowZhaDanBagRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagRsp, zhadanid_),
  };
  CSShowZhaDanBagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSShowZhaDanBagRsp_descriptor_,
      CSShowZhaDanBagRsp::default_instance_,
      CSShowZhaDanBagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShowZhaDanBagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSShowZhaDanBagRsp));
  CSMateReqParam_descriptor_ = file->message_type(75);
  static const int CSMateReqParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, matefetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, quitmatefetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, notbuttonmatefetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, successbuttonmatefetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, enterheroshowbagreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, showzhadanbagreq_),
  };
  CSMateReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMateReqParam_descriptor_,
      CSMateReqParam::default_instance_,
      CSMateReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMateReqParam));
  CSMateRspParam_descriptor_ = file->message_type(76);
  static const int CSMateRspParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRspParam, enterheroshowrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRspParam, senduserheroshowrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRspParam, showzhadanbagrsp_),
  };
  CSMateRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMateRspParam_descriptor_,
      CSMateRspParam::default_instance_,
      CSMateRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMateRspParam));
  CSMateReq_descriptor_ = file->message_type(77);
  static const int CSMateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReq, reqparam_),
  };
  CSMateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMateReq_descriptor_,
      CSMateReq::default_instance_,
      CSMateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMateReq));
  CSMateRsp_descriptor_ = file->message_type(78);
  static const int CSMateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRsp, rspparam_),
  };
  CSMateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMateRsp_descriptor_,
      CSMateRsp::default_instance_,
      CSMateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMateRsp));
  CSMsgBody_descriptor_ = file->message_type(79);
  static const int CSMsgBody_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, registerloginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, registerloginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, bagreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, bagrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, decoratebagreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, decoratebagrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, chatreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, chatrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, matereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, matersp_),
  };
  CSMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgBody_descriptor_,
      CSMsgBody::default_instance_,
      CSMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgBody));
  CSMsgHead_descriptor_ = file->message_type(80);
  static const int CSMsgHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, msgid_),
  };
  CSMsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgHead_descriptor_,
      CSMsgHead::default_instance_,
      CSMsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgHead));
  CSMsg_descriptor_ = file->message_type(81);
  static const int CSMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, body_),
  };
  CSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsg_descriptor_,
      CSMsg::default_instance_,
      CSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsg));
  CSRegisterLoginCmd_descriptor_ = file->enum_type(0);
  CSBagCmd_descriptor_ = file->enum_type(1);
  CSDecorateBagCmd_descriptor_ = file->enum_type(2);
  CSChatCmd_descriptor_ = file->enum_type(3);
  CSMateCmd_descriptor_ = file->enum_type(4);
  CSMsgID_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginReq_descriptor_, &CSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginRsp_descriptor_, &CSLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterReq_descriptor_, &CSRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterRsp_descriptor_, &CSRegisterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQuitReq_descriptor_, &CSQuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginReqParam_descriptor_, &CSRegisterLoginReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginRspParam_descriptor_, &CSRegisterLoginRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginReq_descriptor_, &CSRegisterLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginRsp_descriptor_, &CSRegisterLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagFetchReq_descriptor_, &CSBagFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagGridInfo_descriptor_, &CSBagGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagBagInfo_descriptor_, &CSBagBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagFetchRsp_descriptor_, &CSBagFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagUseReq_descriptor_, &CSBagUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemInfo_descriptor_, &CSItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemInfoList_descriptor_, &CSItemInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagUseRsp_descriptor_, &CSBagUseRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagReqParam_descriptor_, &CSBagReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagRspParam_descriptor_, &CSBagRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagReq_descriptor_, &CSBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagRsp_descriptor_, &CSBagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagFetchReq_descriptor_, &CSDecorateBagFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagGridInfo_descriptor_, &CSDecorateBagGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagInfo_descriptor_, &CSDecorateBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagFetchRsp_descriptor_, &CSDecorateBagFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagShowSetReq_descriptor_, &CSDecorateBagShowSetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPFetchReq_descriptor_, &CSDecorateBagVIPFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPItem_descriptor_, &CSDecorateBagVIPItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPList_descriptor_, &CSDecorateBagVIPList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPFetchRsp_descriptor_, &CSDecorateBagVIPFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagReqParam_descriptor_, &CSDecorateBagReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagRspParam_descriptor_, &CSDecorateBagRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagReq_descriptor_, &CSDecorateBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagRsp_descriptor_, &CSDecorateBagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendList_descriptor_, &FriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgRegisterSuccessReq_descriptor_, &CSMsgRegisterSuccessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgLoginSuccessReq_descriptor_, &CSMsgLoginSuccessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgQuitReq_descriptor_, &CSMsgQuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgRoleInfo_descriptor_, &CSMsgRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgRoleInfoList_descriptor_, &CSMsgRoleInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgLoginSuccessRsp_descriptor_, &CSMsgLoginSuccessRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgAskAddFriendReq_descriptor_, &CSMsgAskAddFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgAskAddFriendRsp_descriptor_, &CSMsgAskAddFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgSuccessAddFriendReq_descriptor_, &CSMsgSuccessAddFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgSuccessAddFriendRsp_descriptor_, &CSMsgSuccessAddFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgDeleteFriendReq_descriptor_, &CSMsgDeleteFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgDeleteFriendRsp_descriptor_, &CSMsgDeleteFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgSendChatReq_descriptor_, &CSMsgSendChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgSendChatRsp_descriptor_, &CSMsgSendChatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgFindNameReq_descriptor_, &CSMsgFindNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgFindNameRsp_descriptor_, &CSMsgFindNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgChangeStatusReq_descriptor_, &CSMsgChangeStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgChangeStatusRsp_descriptor_, &CSMsgChangeStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgConnectSuccessReq_descriptor_, &CSMsgConnectSuccessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSChatReqParam_descriptor_, &CSChatReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSChatRspParam_descriptor_, &CSChatRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSChatReq_descriptor_, &CSChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSChatRsp_descriptor_, &CSChatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMateFetchReq_descriptor_, &CSMateFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQuitMateFetchReq_descriptor_, &CSQuitMateFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNotButtonMateFetchReq_descriptor_, &CSNotButtonMateFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSuccessButtonMateFetchReq_descriptor_, &CSSuccessButtonMateFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSShowHeroVipInfo_descriptor_, &CSShowHeroVipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSShowHeroInfo_descriptor_, &CSShowHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSShowHeroInfoList_descriptor_, &CSShowHeroInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFeiJiBagList_descriptor_, &CSFeiJiBagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSZhaDanBagList_descriptor_, &CSZhaDanBagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFeiJiDiPanBagList_descriptor_, &CSFeiJiDiPanBagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFeiJiSkillOneBagList_descriptor_, &CSFeiJiSkillOneBagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFeiJiSkillTwoBagList_descriptor_, &CSFeiJiSkillTwoBagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEnterHeroShowRsp_descriptor_, &CSEnterHeroShowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEnterHeroShowBagReq_descriptor_, &CSEnterHeroShowBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSendUserHeroShowRsp_descriptor_, &CSSendUserHeroShowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSShowZhaDanBagReq_descriptor_, &CSShowZhaDanBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSShowZhaDanBagRsp_descriptor_, &CSShowZhaDanBagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMateReqParam_descriptor_, &CSMateReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMateRspParam_descriptor_, &CSMateRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMateReq_descriptor_, &CSMateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMateRsp_descriptor_, &CSMateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgBody_descriptor_, &CSMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgHead_descriptor_, &CSMsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsg_descriptor_, &CSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSmsg_2eproto() {
  delete CSLoginReq::default_instance_;
  delete CSLoginReq_reflection_;
  delete CSLoginRsp::default_instance_;
  delete CSLoginRsp_reflection_;
  delete CSRegisterReq::default_instance_;
  delete CSRegisterReq_reflection_;
  delete CSRegisterRsp::default_instance_;
  delete CSRegisterRsp_reflection_;
  delete CSQuitReq::default_instance_;
  delete CSQuitReq_reflection_;
  delete CSRegisterLoginReqParam::default_instance_;
  delete CSRegisterLoginReqParam_reflection_;
  delete CSRegisterLoginRspParam::default_instance_;
  delete CSRegisterLoginRspParam_reflection_;
  delete CSRegisterLoginReq::default_instance_;
  delete CSRegisterLoginReq_reflection_;
  delete CSRegisterLoginRsp::default_instance_;
  delete CSRegisterLoginRsp_reflection_;
  delete CSBagFetchReq::default_instance_;
  delete CSBagFetchReq_reflection_;
  delete CSBagGridInfo::default_instance_;
  delete CSBagGridInfo_reflection_;
  delete CSBagBagInfo::default_instance_;
  delete CSBagBagInfo_reflection_;
  delete CSBagFetchRsp::default_instance_;
  delete CSBagFetchRsp_reflection_;
  delete CSBagUseReq::default_instance_;
  delete CSBagUseReq_reflection_;
  delete CSItemInfo::default_instance_;
  delete CSItemInfo_reflection_;
  delete CSItemInfoList::default_instance_;
  delete CSItemInfoList_reflection_;
  delete CSBagUseRsp::default_instance_;
  delete CSBagUseRsp_reflection_;
  delete CSBagReqParam::default_instance_;
  delete CSBagReqParam_reflection_;
  delete CSBagRspParam::default_instance_;
  delete CSBagRspParam_reflection_;
  delete CSBagReq::default_instance_;
  delete CSBagReq_reflection_;
  delete CSBagRsp::default_instance_;
  delete CSBagRsp_reflection_;
  delete CSDecorateBagFetchReq::default_instance_;
  delete CSDecorateBagFetchReq_reflection_;
  delete CSDecorateBagGridInfo::default_instance_;
  delete CSDecorateBagGridInfo_reflection_;
  delete CSDecorateBagInfo::default_instance_;
  delete CSDecorateBagInfo_reflection_;
  delete CSDecorateBagFetchRsp::default_instance_;
  delete CSDecorateBagFetchRsp_reflection_;
  delete CSDecorateBagShowSetReq::default_instance_;
  delete CSDecorateBagShowSetReq_reflection_;
  delete CSDecorateBagVIPFetchReq::default_instance_;
  delete CSDecorateBagVIPFetchReq_reflection_;
  delete CSDecorateBagVIPItem::default_instance_;
  delete CSDecorateBagVIPItem_reflection_;
  delete CSDecorateBagVIPList::default_instance_;
  delete CSDecorateBagVIPList_reflection_;
  delete CSDecorateBagVIPFetchRsp::default_instance_;
  delete CSDecorateBagVIPFetchRsp_reflection_;
  delete CSDecorateBagReqParam::default_instance_;
  delete CSDecorateBagReqParam_reflection_;
  delete CSDecorateBagRspParam::default_instance_;
  delete CSDecorateBagRspParam_reflection_;
  delete CSDecorateBagReq::default_instance_;
  delete CSDecorateBagReq_reflection_;
  delete CSDecorateBagRsp::default_instance_;
  delete CSDecorateBagRsp_reflection_;
  delete FriendList::default_instance_;
  delete FriendList_reflection_;
  delete CSMsgRegisterSuccessReq::default_instance_;
  delete CSMsgRegisterSuccessReq_reflection_;
  delete CSMsgLoginSuccessReq::default_instance_;
  delete CSMsgLoginSuccessReq_reflection_;
  delete CSMsgQuitReq::default_instance_;
  delete CSMsgQuitReq_reflection_;
  delete CSMsgRoleInfo::default_instance_;
  delete CSMsgRoleInfo_reflection_;
  delete CSMsgRoleInfoList::default_instance_;
  delete CSMsgRoleInfoList_reflection_;
  delete CSMsgLoginSuccessRsp::default_instance_;
  delete CSMsgLoginSuccessRsp_reflection_;
  delete CSMsgAskAddFriendReq::default_instance_;
  delete CSMsgAskAddFriendReq_reflection_;
  delete CSMsgAskAddFriendRsp::default_instance_;
  delete CSMsgAskAddFriendRsp_reflection_;
  delete CSMsgSuccessAddFriendReq::default_instance_;
  delete CSMsgSuccessAddFriendReq_reflection_;
  delete CSMsgSuccessAddFriendRsp::default_instance_;
  delete CSMsgSuccessAddFriendRsp_reflection_;
  delete CSMsgDeleteFriendReq::default_instance_;
  delete CSMsgDeleteFriendReq_reflection_;
  delete CSMsgDeleteFriendRsp::default_instance_;
  delete CSMsgDeleteFriendRsp_reflection_;
  delete CSMsgSendChatReq::default_instance_;
  delete CSMsgSendChatReq_reflection_;
  delete CSMsgSendChatRsp::default_instance_;
  delete CSMsgSendChatRsp_reflection_;
  delete CSMsgFindNameReq::default_instance_;
  delete CSMsgFindNameReq_reflection_;
  delete CSMsgFindNameRsp::default_instance_;
  delete CSMsgFindNameRsp_reflection_;
  delete CSMsgChangeStatusReq::default_instance_;
  delete CSMsgChangeStatusReq_reflection_;
  delete CSMsgChangeStatusRsp::default_instance_;
  delete CSMsgChangeStatusRsp_reflection_;
  delete CSMsgConnectSuccessReq::default_instance_;
  delete CSMsgConnectSuccessReq_reflection_;
  delete CSChatReqParam::default_instance_;
  delete CSChatReqParam_reflection_;
  delete CSChatRspParam::default_instance_;
  delete CSChatRspParam_reflection_;
  delete CSChatReq::default_instance_;
  delete CSChatReq_reflection_;
  delete CSChatRsp::default_instance_;
  delete CSChatRsp_reflection_;
  delete CSMateFetchReq::default_instance_;
  delete CSMateFetchReq_reflection_;
  delete CSQuitMateFetchReq::default_instance_;
  delete CSQuitMateFetchReq_reflection_;
  delete CSNotButtonMateFetchReq::default_instance_;
  delete CSNotButtonMateFetchReq_reflection_;
  delete CSSuccessButtonMateFetchReq::default_instance_;
  delete CSSuccessButtonMateFetchReq_reflection_;
  delete CSShowHeroVipInfo::default_instance_;
  delete CSShowHeroVipInfo_reflection_;
  delete CSShowHeroInfo::default_instance_;
  delete CSShowHeroInfo_reflection_;
  delete CSShowHeroInfoList::default_instance_;
  delete CSShowHeroInfoList_reflection_;
  delete CSFeiJiBagList::default_instance_;
  delete CSFeiJiBagList_reflection_;
  delete CSZhaDanBagList::default_instance_;
  delete CSZhaDanBagList_reflection_;
  delete CSFeiJiDiPanBagList::default_instance_;
  delete CSFeiJiDiPanBagList_reflection_;
  delete CSFeiJiSkillOneBagList::default_instance_;
  delete CSFeiJiSkillOneBagList_reflection_;
  delete CSFeiJiSkillTwoBagList::default_instance_;
  delete CSFeiJiSkillTwoBagList_reflection_;
  delete CSEnterHeroShowRsp::default_instance_;
  delete CSEnterHeroShowRsp_reflection_;
  delete CSEnterHeroShowBagReq::default_instance_;
  delete CSEnterHeroShowBagReq_reflection_;
  delete CSSendUserHeroShowRsp::default_instance_;
  delete CSSendUserHeroShowRsp_reflection_;
  delete CSShowZhaDanBagReq::default_instance_;
  delete CSShowZhaDanBagReq_reflection_;
  delete CSShowZhaDanBagRsp::default_instance_;
  delete CSShowZhaDanBagRsp_reflection_;
  delete CSMateReqParam::default_instance_;
  delete CSMateReqParam_reflection_;
  delete CSMateRspParam::default_instance_;
  delete CSMateRspParam_reflection_;
  delete CSMateReq::default_instance_;
  delete CSMateReq_reflection_;
  delete CSMateRsp::default_instance_;
  delete CSMateRsp_reflection_;
  delete CSMsgBody::default_instance_;
  delete CSMsgBody_reflection_;
  delete CSMsgHead::default_instance_;
  delete CSMsgHead_reflection_;
  delete CSMsg::default_instance_;
  delete CSMsg_reflection_;
}

void protobuf_AddDesc_CSmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DBmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013CSmsg.proto\032\013DBmsg.proto\"/\n\nCSLoginReq"
    "\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"5\n\nC"
    "SLoginRsp\022\014\n\004type\030\001 \001(\r\022\031\n\004Role\030\002 \001(\0132\013."
    "DBRoleInfo\"@\n\rCSRegisterReq\022\017\n\007account\030\001"
    " \001(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"\035\n\r"
    "CSRegisterRsp\022\014\n\004type\030\001 \001(\r\"\030\n\tCSQuitReq"
    "\022\013\n\003pad\030\001 \001(\r\"z\n\027CSRegisterLoginReqParam"
    "\022\035\n\010LoginReq\030\001 \001(\0132\013.CSLoginReq\022#\n\013Regis"
    "terReq\030\002 \001(\0132\016.CSRegisterReq\022\033\n\007QuitReq\030"
    "\003 \001(\0132\n.CSQuitReq\"]\n\027CSRegisterLoginRspP"
    "aram\022\035\n\010LoginRsp\030\001 \001(\0132\013.CSLoginRsp\022#\n\013R"
    "egisterRsp\030\002 \001(\0132\016.CSRegisterRsp\"b\n\022CSRe"
    "gisterLoginReq\022 \n\003cmd\030\001 \002(\0162\023.CSRegister"
    "LoginCmd\022*\n\010reqParam\030\002 \001(\0132\030.CSRegisterL"
    "oginReqParam\"r\n\022CSRegisterLoginRsp\022\016\n\006re"
    "sult\030\001 \001(\005\022 \n\003cmd\030\002 \002(\0162\023.CSRegisterLogi"
    "nCmd\022*\n\010rspParam\030\003 \001(\0132\030.CSRegisterLogin"
    "RspParam\"\034\n\rCSBagFetchReq\022\013\n\003pad\030\001 \001(\r\","
    "\n\rCSBagGridInfo\022\016\n\006ItemId\030\001 \001(\r\022\013\n\003Num\030\002"
    " \001(\r\"0\n\014CSBagBagInfo\022 \n\010GridInfo\030\001 \003(\0132\016"
    ".CSBagGridInfo\"/\n\rCSBagFetchRsp\022\036\n\007BagIn"
    "fo\030\001 \001(\0132\r.CSBagBagInfo\"@\n\013CSBagUseReq\022\016"
    "\n\006ItemId\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\022\020\n\010Picke"
    "dId\030\003 \001(\r\"%\n\nCSItemInfo\022\n\n\002ID\030\001 \001(\005\022\013\n\003n"
    "um\030\002 \001(\005\"/\n\016CSItemInfoList\022\035\n\010ItemInfo\030\001"
    " \003(\0132\013.CSItemInfo\"4\n\013CSBagUseRsp\022%\n\014Item"
    "InfoList\030\001 \001(\0132\017.CSItemInfoList\"O\n\rCSBag"
    "ReqParam\022 \n\010FetchReq\030\001 \001(\0132\016.CSBagFetchR"
    "eq\022\034\n\006UseReq\030\002 \001(\0132\014.CSBagUseReq\"O\n\rCSBa"
    "gRspParam\022 \n\010FetchRsp\030\001 \001(\0132\016.CSBagFetch"
    "Rsp\022\034\n\006UseRsp\030\002 \001(\0132\014.CSBagUseRsp\"D\n\010CSB"
    "agReq\022\026\n\003cmd\030\001 \002(\0162\t.CSBagCmd\022 \n\010reqPara"
    "m\030\002 \001(\0132\016.CSBagReqParam\"T\n\010CSBagRsp\022\016\n\006r"
    "esult\030\001 \001(\005\022\026\n\003cmd\030\002 \002(\0162\t.CSBagCmd\022 \n\010r"
    "spParam\030\003 \001(\0132\016.CSBagRspParam\"%\n\025CSDecor"
    "ateBagFetchReq\022\014\n\004type\030\001 \001(\r\"F\n\025CSDecora"
    "teBagGridInfo\022\016\n\006ItemId\030\001 \001(\r\022\014\n\004type\030\002 "
    "\001(\r\022\017\n\007EndTime\030\003 \001(\004\"E\n\021CSDecorateBagInf"
    "o\0220\n\020DecorateGridInfo\030\001 \003(\0132\026.CSDecorate"
    "BagGridInfo\"^\n\025CSDecorateBagFetchRsp\022\014\n\004"
    "type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022+\n\017DecorateBagInf"
    "o\030\003 \001(\0132\022.CSDecorateBagInfo\"3\n\027CSDecorat"
    "eBagShowSetReq\022\014\n\004Type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r"
    "\"(\n\030CSDecorateBagVIPFetchReq\022\014\n\004type\030\001 \001"
    "(\r\":\n\024CSDecorateBagVIPItem\022\020\n\010VipGrade\030\001"
    " \001(\r\022\020\n\010VipExper\030\002 \001(\r\"B\n\024CSDecorateBagV"
    "IPList\022*\n\013VIPItemList\030\001 \003(\0132\025.CSDecorate"
    "BagVIPItem\"\211\001\n\030CSDecorateBagVIPFetchRsp\022"
    "\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022+\n\017DecorateBag"
    "Info\030\003 \001(\0132\022.CSDecorateBagInfo\022&\n\007VipLis"
    "t\030\004 \001(\0132\025.CSDecorateBagVIPList\"\237\001\n\025CSDec"
    "orateBagReqParam\022(\n\010FetchReq\030\001 \001(\0132\026.CSD"
    "ecorateBagFetchReq\022,\n\nShowSetReq\030\002 \001(\0132\030"
    ".CSDecorateBagShowSetReq\022.\n\013VIPFetchReq\030"
    "\003 \001(\0132\031.CSDecorateBagVIPFetchReq\"q\n\025CSDe"
    "corateBagRspParam\022(\n\010FetchRsp\030\001 \001(\0132\026.CS"
    "DecorateBagFetchRsp\022.\n\013VIPFetchRsp\030\002 \001(\013"
    "2\031.CSDecorateBagVIPFetchRsp\"\\\n\020CSDecorat"
    "eBagReq\022\036\n\003cmd\030\001 \002(\0162\021.CSDecorateBagCmd\022"
    "(\n\010reqParam\030\002 \001(\0132\026.CSDecorateBagReqPara"
    "m\"l\n\020CSDecorateBagRsp\022\016\n\006result\030\001 \001(\005\022\036\n"
    "\003cmd\030\002 \002(\0162\021.CSDecorateBagCmd\022(\n\010rspPara"
    "m\030\003 \001(\0132\026.CSDecorateBagRspParam\"\037\n\nFrien"
    "dList\022\021\n\tFriendUid\030\001 \003(\004\"4\n\027CSMsgRegiste"
    "rSuccessReq\022\013\n\003uid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"#"
    "\n\024CSMsgLoginSuccessReq\022\013\n\003uid\030\001 \001(\004\"\033\n\014C"
    "SMsgQuitReq\022\013\n\003uid\030\001 \001(\004\"\205\001\n\rCSMsgRoleIn"
    "fo\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Grade\030\002 \001(\r\022\014\n\004Rank\030\003"
    " \001(\r\022\016\n\006Status\030\004 \001(\r\022\013\n\003Vip\030\005 \001(\r\022\014\n\004Hea"
    "d\030\006 \001(\r\022\021\n\tChatFrame\030\007 \001(\r\022\014\n\004Name\030\010 \001(\t"
    "\"5\n\021CSMsgRoleInfoList\022 \n\010RoleInfo\030\001 \003(\0132"
    "\016.CSMsgRoleInfo\">\n\024CSMsgLoginSuccessRsp\022"
    "&\n\nFriendList\030\001 \001(\0132\022.CSMsgRoleInfoList\""
    "1\n\024CSMsgAskAddFriendReq\022\014\n\004Name\030\001 \001(\t\022\013\n"
    "\003Uid\030\002 \001(\004\"7\n\024CSMsgAskAddFriendRsp\022\013\n\003Ui"
    "d\030\001 \001(\004\022\022\n\nFriendName\030\002 \001(\t\"6\n\030CSMsgSucc"
    "essAddFriendReq\022\014\n\004Uid1\030\001 \001(\004\022\014\n\004Uid2\030\002 "
    "\001(\004\"B\n\030CSMsgSuccessAddFriendRsp\022&\n\016Frien"
    "dRoleInfo\030\001 \001(\0132\016.CSMsgRoleInfo\"2\n\024CSMsg"
    "DeleteFriendReq\022\014\n\004Uid1\030\001 \001(\004\022\014\n\004Uid2\030\002 "
    "\001(\004\"#\n\024CSMsgDeleteFriendRsp\022\013\n\003Uid\030\001 \001(\004"
    "\"C\n\020CSMsgSendChatReq\022\014\n\004Uid1\030\001 \001(\004\022\014\n\004Ui"
    "d2\030\002 \001(\004\022\023\n\013information\030\003 \001(\t\"4\n\020CSMsgSe"
    "ndChatRsp\022\013\n\003Uid\030\001 \001(\004\022\023\n\013information\030\002 "
    "\001(\t\" \n\020CSMsgFindNameReq\022\014\n\004name\030\001 \001(\t\"4\n"
    "\020CSMsgFindNameRsp\022 \n\010RoleInfo\030\001 \001(\0132\016.CS"
    "MsgRoleInfo\"@\n\024CSMsgChangeStatusReq\022\014\n\004t"
    "ype\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\013\n\003Uid\030\003 \001(\004\"8\n"
    "\024CSMsgChangeStatusRsp\022 \n\010RoleInfo\030\001 \001(\0132"
    "\016.CSMsgRoleInfo\"%\n\026CSMsgConnectSuccessRe"
    "q\022\013\n\003uid\030\001 \001(\004\"\345\003\n\016CSChatReqParam\0224\n\022Reg"
    "isterSuccessReq\030\001 \001(\0132\030.CSMsgRegisterSuc"
    "cessReq\022.\n\017LoginSuccessReq\030\002 \001(\0132\025.CSMsg"
    "LoginSuccessReq\022!\n\nMsgQuitReq\030\003 \001(\0132\r.CS"
    "MsgQuitReq\022.\n\017AskAddFriendReq\030\004 \001(\0132\025.CS"
    "MsgAskAddFriendReq\0226\n\023SuccessAddFriendRe"
    "q\030\005 \001(\0132\031.CSMsgSuccessAddFriendReq\022.\n\017De"
    "leteFriendReq\030\006 \001(\0132\025.CSMsgDeleteFriendR"
    "eq\022&\n\013SendChatReq\030\007 \001(\0132\021.CSMsgSendChatR"
    "eq\022&\n\013FindNameReq\030\010 \001(\0132\021.CSMsgFindNameR"
    "eq\022.\n\017ChangeStatusReq\030\t \001(\0132\025.CSMsgChang"
    "eStatusReq\0222\n\021ConnectSuccessReq\030\n \001(\0132\027."
    "CSMsgConnectSuccessReq\"\234\003\n\016CSChatRspPara"
    "m\022.\n\017MsgLoginSuccess\030\001 \001(\0132\025.CSMsgLoginS"
    "uccessRsp\022 \n\010RoleInfo\030\002 \001(\0132\016.CSMsgRoleI"
    "nfo\022 \n\010RoleQuit\030\003 \001(\0132\016.CSMsgRoleInfo\022.\n"
    "\017AskAddFriendRsp\030\004 \001(\0132\025.CSMsgAskAddFrie"
    "ndRsp\0226\n\023SuccessAddFriendRsp\030\005 \001(\0132\031.CSM"
    "sgSuccessAddFriendRsp\022.\n\017DeleteFriendRsp"
    "\030\006 \001(\0132\025.CSMsgDeleteFriendRsp\022&\n\013SendCha"
    "tRsp\030\007 \001(\0132\021.CSMsgSendChatRsp\022&\n\013FindNam"
    "eRsp\030\010 \001(\0132\021.CSMsgFindNameRsp\022.\n\017ChangeS"
    "tatusRsp\030\t \001(\0132\025.CSMsgChangeStatusRsp\"G\n"
    "\tCSChatReq\022\027\n\003cmd\030\001 \002(\0162\n.CSChatCmd\022!\n\010r"
    "eqParam\030\002 \001(\0132\017.CSChatReqParam\"W\n\tCSChat"
    "Rsp\022\016\n\006result\030\001 \001(\005\022\027\n\003cmd\030\002 \002(\0162\n.CSCha"
    "tCmd\022!\n\010rspParam\030\003 \001(\0132\017.CSChatRspParam\""
    "\035\n\016CSMateFetchReq\022\013\n\003uid\030\001 \001(\004\"!\n\022CSQuit"
    "MateFetchReq\022\013\n\003uid\030\001 \001(\004\"&\n\027CSNotButton"
    "MateFetchReq\022\013\n\003uid\030\001 \001(\004\"*\n\033CSSuccessBu"
    "ttonMateFetchReq\022\013\n\003uid\030\001 \001(\004\"4\n\021CSShowH"
    "eroVipInfo\022\r\n\005VipId\030\001 \001(\r\022\020\n\010VipGrade\030\002 "
    "\001(\r\"\207\001\n\016CSShowHeroInfo\022\013\n\003uid\030\001 \001(\004\022\r\n\005V"
    "ipID\030\002 \001(\r\022\020\n\010VipGrade\030\003 \001(\r\022\021\n\tRoleGrad"
    "e\030\004 \001(\r\022\020\n\010RoleRank\030\005 \001(\r\022\024\n\014RoleHeadTyp"
    "e\030\006 \001(\r\022\014\n\004Name\030\007 \001(\t\";\n\022CSShowHeroInfoL"
    "ist\022%\n\014HeroInfoList\030\001 \003(\0132\017.CSShowHeroIn"
    "fo\"\037\n\016CSFeiJiBagList\022\r\n\005FeiJi\030\001 \003(\r\"!\n\017C"
    "SZhaDanBagList\022\016\n\006ZhaDan\030\001 \003(\r\")\n\023CSFeiJ"
    "iDiPanBagList\022\022\n\nFeiJiDiPan\030\001 \003(\r\"/\n\026CSF"
    "eiJiSkillOneBagList\022\025\n\rFeiJiSkillOne\030\001 \003"
    "(\r\"/\n\026CSFeiJiSkillTwoBagList\022\025\n\rFeiJiSki"
    "llTwo\030\001 \003(\r\"\327\002\n\022CSEnterHeroShowRsp\022+\n\017Sh"
    "owHeroVipInfo\030\001 \001(\0132\022.CSShowHeroVipInfo\022"
    "%\n\010HeroShow\030\002 \001(\0132\023.CSShowHeroInfoList\022%"
    "\n\014FeiJiBagList\030\003 \001(\0132\017.CSFeiJiBagList\022\'\n"
    "\rZhaDanBagList\030\004 \001(\0132\020.CSZhaDanBagList\022/"
    "\n\021FeiJiDiPanBagList\030\005 \001(\0132\024.CSFeiJiDiPan"
    "BagList\0225\n\024FeiJiSkillOneBagList\030\006 \001(\0132\027."
    "CSFeiJiSkillOneBagList\0225\n\024FeiJiSkillTwoB"
    "agList\030\007 \001(\0132\027.CSFeiJiSkillTwoBagList\"I\n"
    "\025CSEnterHeroShowBagReq\022\013\n\003Uid\030\001 \001(\004\022\027\n\017D"
    "ecorateBagType\030\002 \001(\r\022\n\n\002Id\030\003 \001(\r\"6\n\025CSSe"
    "ndUserHeroShowRsp\022\013\n\003Uid\030\001 \001(\004\022\020\n\010Zhadan"
    "Id\030\002 \001(\r\"3\n\022CSShowZhaDanBagReq\022\013\n\003Uid\030\001 "
    "\001(\004\022\020\n\010ZhadanId\030\002 \001(\r\"&\n\022CSShowZhaDanBag"
    "Rsp\022\020\n\010ZhadanId\030\001 \001(\r\"\304\002\n\016CSMateReqParam"
    "\022%\n\014MateFetchReq\030\001 \001(\0132\017.CSMateFetchReq\022"
    "-\n\020QuitMateFetchReq\030\002 \001(\0132\023.CSQuitMateFe"
    "tchReq\0227\n\025NotButtonMateFetchReq\030\003 \001(\0132\030."
    "CSNotButtonMateFetchReq\022\?\n\031SuccessButton"
    "MateFetchReq\030\004 \001(\0132\034.CSSuccessButtonMate"
    "FetchReq\0223\n\023EnterHeroShowBagReq\030\005 \001(\0132\026."
    "CSEnterHeroShowBagReq\022-\n\020ShowZhaDanBagRe"
    "q\030\006 \001(\0132\023.CSShowZhaDanBagReq\"\243\001\n\016CSMateR"
    "spParam\022-\n\020EnterHeroShowRsp\030\001 \001(\0132\023.CSEn"
    "terHeroShowRsp\0223\n\023SendUserHeroShowRsp\030\002 "
    "\001(\0132\026.CSSendUserHeroShowRsp\022-\n\020ShowZhaDa"
    "nBagRsp\030\003 \001(\0132\023.CSShowZhaDanBagRsp\"G\n\tCS"
    "MateReq\022\027\n\003cmd\030\001 \002(\0162\n.CSMateCmd\022!\n\010reqP"
    "aram\030\002 \001(\0132\017.CSMateReqParam\"W\n\tCSMateRsp"
    "\022\016\n\006result\030\001 \001(\005\022\027\n\003cmd\030\002 \002(\0162\n.CSMateCm"
    "d\022!\n\010rspParam\030\003 \001(\0132\017.CSMateRspParam\"\351\002\n"
    "\tCSMsgBody\022-\n\020RegisterLoginReq\030\001 \001(\0132\023.C"
    "SRegisterLoginReq\022-\n\020RegisterLoginRsp\030\002 "
    "\001(\0132\023.CSRegisterLoginRsp\022\031\n\006BagReq\030\003 \001(\013"
    "2\t.CSBagReq\022\031\n\006BagRsp\030\004 \001(\0132\t.CSBagRsp\022)"
    "\n\016DecorateBagReq\030\005 \001(\0132\021.CSDecorateBagRe"
    "q\022)\n\016DecorateBagRsp\030\006 \001(\0132\021.CSDecorateBa"
    "gRsp\022\033\n\007ChatReq\030\007 \001(\0132\n.CSChatReq\022\033\n\007Cha"
    "tRsp\030\010 \001(\0132\n.CSChatRsp\022\033\n\007MateReq\030\t \001(\0132"
    "\n.CSMateReq\022\033\n\007Matersp\030\n \001(\0132\n.CSMateRsp"
    "\"1\n\tCSMsgHead\022\013\n\003uid\030\001 \002(\004\022\027\n\005msgID\030\002 \002("
    "\0162\010.CSMsgID\";\n\005CSMsg\022\030\n\004head\030\001 \002(\0132\n.CSM"
    "sgHead\022\030\n\004body\030\002 \002(\0132\n.CSMsgBody*p\n\022CSRe"
    "gisterLoginCmd\022\037\n\033CSRegisterLoginCmd_Reg"
    "ister\020\001\022\034\n\030CSRegisterLoginCmd_Login\020\002\022\033\n"
    "\027CSRegisterLoginCmd_Quit\020\003*0\n\010CSBagCmd\022\022"
    "\n\016CSBagCmd_Fetch\020\001\022\020\n\014CSBagCmd_Use\020\002*k\n\020"
    "CSDecorateBagCmd\022\032\n\026CSDecorateBagCmd_Fet"
    "ch\020\001\022\034\n\030CSDecorateBagCmd_ShowSet\020\002\022\035\n\031CS"
    "DecorateBagCmd_VipFetch\020\003*\314\002\n\tCSChatCmd\022"
    "\037\n\033CSMsgServer_RegisterSuccess\020\001\022\034\n\030CSMs"
    "gServer_LoginSuccess\020\002\022\024\n\020CSMsgServer_Qu"
    "it\020\003\022\032\n\026CSMsgServer_FriendLine\020\004\022\034\n\030CSMs"
    "gServer_AskAddFriend\020\005\022 \n\034CSMsgServer_Su"
    "ccessAddFriend\020\006\022\034\n\030CSMsgServer_DeleteFr"
    "iend\020\007\022\030\n\024CSMsgServer_SendChat\020\010\022\030\n\024CSMs"
    "gServer_FindName\020\t\022\034\n\030CSMsgServer_Change"
    "Status\020\n\022\036\n\032CSMsgServer_ConnectSuccess\020\013"
    "*\274\002\n\tCSMateCmd\022\027\n\023CSMateCmd_MateFetch\020\001\022"
    "\034\n\030CSMateCmd_MateNotSuccess\020\002\022\031\n\025CSMateC"
    "md_MateNotUser\020\003\022\033\n\027CSMateCmd_QuitMateFe"
    "tch\020\004\022 \n\034CSMateCmd_NotButtonMateFetch\020\005\022"
    "$\n CSMateCmd_SuccessButtonMateFetch\020\006\022\033\n"
    "\027CSMateCmd_EnterHeroShow\020\007\022\036\n\032CSMateCmd_"
    "EnterHeroShowBag\020\010\022\036\n\032CSMateCmd_SendUser"
    "HeroShow\020\t\022\033\n\027CSMateCmd_ShowZhaDanBag\020\n*"
    "\233\001\n\007CSMsgID\022\020\n\014CS_MSGID_MIN\020\000\022\032\n\026CS_MSGI"
    "D_RegisterLogin\020\001\022\020\n\014CS_MSGID_BAG\020\002\022\030\n\024C"
    "S_MSGID_DecorateBAG\020\003\022\021\n\rCS_MSGID_Chat\020\004"
    "\022\021\n\rCS_MSGID_Mate\020\005\022\020\n\014CS_MSGID_MAX\020\006", 8077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSmsg.proto", &protobuf_RegisterTypes);
  CSLoginReq::default_instance_ = new CSLoginReq();
  CSLoginRsp::default_instance_ = new CSLoginRsp();
  CSRegisterReq::default_instance_ = new CSRegisterReq();
  CSRegisterRsp::default_instance_ = new CSRegisterRsp();
  CSQuitReq::default_instance_ = new CSQuitReq();
  CSRegisterLoginReqParam::default_instance_ = new CSRegisterLoginReqParam();
  CSRegisterLoginRspParam::default_instance_ = new CSRegisterLoginRspParam();
  CSRegisterLoginReq::default_instance_ = new CSRegisterLoginReq();
  CSRegisterLoginRsp::default_instance_ = new CSRegisterLoginRsp();
  CSBagFetchReq::default_instance_ = new CSBagFetchReq();
  CSBagGridInfo::default_instance_ = new CSBagGridInfo();
  CSBagBagInfo::default_instance_ = new CSBagBagInfo();
  CSBagFetchRsp::default_instance_ = new CSBagFetchRsp();
  CSBagUseReq::default_instance_ = new CSBagUseReq();
  CSItemInfo::default_instance_ = new CSItemInfo();
  CSItemInfoList::default_instance_ = new CSItemInfoList();
  CSBagUseRsp::default_instance_ = new CSBagUseRsp();
  CSBagReqParam::default_instance_ = new CSBagReqParam();
  CSBagRspParam::default_instance_ = new CSBagRspParam();
  CSBagReq::default_instance_ = new CSBagReq();
  CSBagRsp::default_instance_ = new CSBagRsp();
  CSDecorateBagFetchReq::default_instance_ = new CSDecorateBagFetchReq();
  CSDecorateBagGridInfo::default_instance_ = new CSDecorateBagGridInfo();
  CSDecorateBagInfo::default_instance_ = new CSDecorateBagInfo();
  CSDecorateBagFetchRsp::default_instance_ = new CSDecorateBagFetchRsp();
  CSDecorateBagShowSetReq::default_instance_ = new CSDecorateBagShowSetReq();
  CSDecorateBagVIPFetchReq::default_instance_ = new CSDecorateBagVIPFetchReq();
  CSDecorateBagVIPItem::default_instance_ = new CSDecorateBagVIPItem();
  CSDecorateBagVIPList::default_instance_ = new CSDecorateBagVIPList();
  CSDecorateBagVIPFetchRsp::default_instance_ = new CSDecorateBagVIPFetchRsp();
  CSDecorateBagReqParam::default_instance_ = new CSDecorateBagReqParam();
  CSDecorateBagRspParam::default_instance_ = new CSDecorateBagRspParam();
  CSDecorateBagReq::default_instance_ = new CSDecorateBagReq();
  CSDecorateBagRsp::default_instance_ = new CSDecorateBagRsp();
  FriendList::default_instance_ = new FriendList();
  CSMsgRegisterSuccessReq::default_instance_ = new CSMsgRegisterSuccessReq();
  CSMsgLoginSuccessReq::default_instance_ = new CSMsgLoginSuccessReq();
  CSMsgQuitReq::default_instance_ = new CSMsgQuitReq();
  CSMsgRoleInfo::default_instance_ = new CSMsgRoleInfo();
  CSMsgRoleInfoList::default_instance_ = new CSMsgRoleInfoList();
  CSMsgLoginSuccessRsp::default_instance_ = new CSMsgLoginSuccessRsp();
  CSMsgAskAddFriendReq::default_instance_ = new CSMsgAskAddFriendReq();
  CSMsgAskAddFriendRsp::default_instance_ = new CSMsgAskAddFriendRsp();
  CSMsgSuccessAddFriendReq::default_instance_ = new CSMsgSuccessAddFriendReq();
  CSMsgSuccessAddFriendRsp::default_instance_ = new CSMsgSuccessAddFriendRsp();
  CSMsgDeleteFriendReq::default_instance_ = new CSMsgDeleteFriendReq();
  CSMsgDeleteFriendRsp::default_instance_ = new CSMsgDeleteFriendRsp();
  CSMsgSendChatReq::default_instance_ = new CSMsgSendChatReq();
  CSMsgSendChatRsp::default_instance_ = new CSMsgSendChatRsp();
  CSMsgFindNameReq::default_instance_ = new CSMsgFindNameReq();
  CSMsgFindNameRsp::default_instance_ = new CSMsgFindNameRsp();
  CSMsgChangeStatusReq::default_instance_ = new CSMsgChangeStatusReq();
  CSMsgChangeStatusRsp::default_instance_ = new CSMsgChangeStatusRsp();
  CSMsgConnectSuccessReq::default_instance_ = new CSMsgConnectSuccessReq();
  CSChatReqParam::default_instance_ = new CSChatReqParam();
  CSChatRspParam::default_instance_ = new CSChatRspParam();
  CSChatReq::default_instance_ = new CSChatReq();
  CSChatRsp::default_instance_ = new CSChatRsp();
  CSMateFetchReq::default_instance_ = new CSMateFetchReq();
  CSQuitMateFetchReq::default_instance_ = new CSQuitMateFetchReq();
  CSNotButtonMateFetchReq::default_instance_ = new CSNotButtonMateFetchReq();
  CSSuccessButtonMateFetchReq::default_instance_ = new CSSuccessButtonMateFetchReq();
  CSShowHeroVipInfo::default_instance_ = new CSShowHeroVipInfo();
  CSShowHeroInfo::default_instance_ = new CSShowHeroInfo();
  CSShowHeroInfoList::default_instance_ = new CSShowHeroInfoList();
  CSFeiJiBagList::default_instance_ = new CSFeiJiBagList();
  CSZhaDanBagList::default_instance_ = new CSZhaDanBagList();
  CSFeiJiDiPanBagList::default_instance_ = new CSFeiJiDiPanBagList();
  CSFeiJiSkillOneBagList::default_instance_ = new CSFeiJiSkillOneBagList();
  CSFeiJiSkillTwoBagList::default_instance_ = new CSFeiJiSkillTwoBagList();
  CSEnterHeroShowRsp::default_instance_ = new CSEnterHeroShowRsp();
  CSEnterHeroShowBagReq::default_instance_ = new CSEnterHeroShowBagReq();
  CSSendUserHeroShowRsp::default_instance_ = new CSSendUserHeroShowRsp();
  CSShowZhaDanBagReq::default_instance_ = new CSShowZhaDanBagReq();
  CSShowZhaDanBagRsp::default_instance_ = new CSShowZhaDanBagRsp();
  CSMateReqParam::default_instance_ = new CSMateReqParam();
  CSMateRspParam::default_instance_ = new CSMateRspParam();
  CSMateReq::default_instance_ = new CSMateReq();
  CSMateRsp::default_instance_ = new CSMateRsp();
  CSMsgBody::default_instance_ = new CSMsgBody();
  CSMsgHead::default_instance_ = new CSMsgHead();
  CSMsg::default_instance_ = new CSMsg();
  CSLoginReq::default_instance_->InitAsDefaultInstance();
  CSLoginRsp::default_instance_->InitAsDefaultInstance();
  CSRegisterReq::default_instance_->InitAsDefaultInstance();
  CSRegisterRsp::default_instance_->InitAsDefaultInstance();
  CSQuitReq::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginReqParam::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginRspParam::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginReq::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginRsp::default_instance_->InitAsDefaultInstance();
  CSBagFetchReq::default_instance_->InitAsDefaultInstance();
  CSBagGridInfo::default_instance_->InitAsDefaultInstance();
  CSBagBagInfo::default_instance_->InitAsDefaultInstance();
  CSBagFetchRsp::default_instance_->InitAsDefaultInstance();
  CSBagUseReq::default_instance_->InitAsDefaultInstance();
  CSItemInfo::default_instance_->InitAsDefaultInstance();
  CSItemInfoList::default_instance_->InitAsDefaultInstance();
  CSBagUseRsp::default_instance_->InitAsDefaultInstance();
  CSBagReqParam::default_instance_->InitAsDefaultInstance();
  CSBagRspParam::default_instance_->InitAsDefaultInstance();
  CSBagReq::default_instance_->InitAsDefaultInstance();
  CSBagRsp::default_instance_->InitAsDefaultInstance();
  CSDecorateBagFetchReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagGridInfo::default_instance_->InitAsDefaultInstance();
  CSDecorateBagInfo::default_instance_->InitAsDefaultInstance();
  CSDecorateBagFetchRsp::default_instance_->InitAsDefaultInstance();
  CSDecorateBagShowSetReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPFetchReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPItem::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPList::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPFetchRsp::default_instance_->InitAsDefaultInstance();
  CSDecorateBagReqParam::default_instance_->InitAsDefaultInstance();
  CSDecorateBagRspParam::default_instance_->InitAsDefaultInstance();
  CSDecorateBagReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagRsp::default_instance_->InitAsDefaultInstance();
  FriendList::default_instance_->InitAsDefaultInstance();
  CSMsgRegisterSuccessReq::default_instance_->InitAsDefaultInstance();
  CSMsgLoginSuccessReq::default_instance_->InitAsDefaultInstance();
  CSMsgQuitReq::default_instance_->InitAsDefaultInstance();
  CSMsgRoleInfo::default_instance_->InitAsDefaultInstance();
  CSMsgRoleInfoList::default_instance_->InitAsDefaultInstance();
  CSMsgLoginSuccessRsp::default_instance_->InitAsDefaultInstance();
  CSMsgAskAddFriendReq::default_instance_->InitAsDefaultInstance();
  CSMsgAskAddFriendRsp::default_instance_->InitAsDefaultInstance();
  CSMsgSuccessAddFriendReq::default_instance_->InitAsDefaultInstance();
  CSMsgSuccessAddFriendRsp::default_instance_->InitAsDefaultInstance();
  CSMsgDeleteFriendReq::default_instance_->InitAsDefaultInstance();
  CSMsgDeleteFriendRsp::default_instance_->InitAsDefaultInstance();
  CSMsgSendChatReq::default_instance_->InitAsDefaultInstance();
  CSMsgSendChatRsp::default_instance_->InitAsDefaultInstance();
  CSMsgFindNameReq::default_instance_->InitAsDefaultInstance();
  CSMsgFindNameRsp::default_instance_->InitAsDefaultInstance();
  CSMsgChangeStatusReq::default_instance_->InitAsDefaultInstance();
  CSMsgChangeStatusRsp::default_instance_->InitAsDefaultInstance();
  CSMsgConnectSuccessReq::default_instance_->InitAsDefaultInstance();
  CSChatReqParam::default_instance_->InitAsDefaultInstance();
  CSChatRspParam::default_instance_->InitAsDefaultInstance();
  CSChatReq::default_instance_->InitAsDefaultInstance();
  CSChatRsp::default_instance_->InitAsDefaultInstance();
  CSMateFetchReq::default_instance_->InitAsDefaultInstance();
  CSQuitMateFetchReq::default_instance_->InitAsDefaultInstance();
  CSNotButtonMateFetchReq::default_instance_->InitAsDefaultInstance();
  CSSuccessButtonMateFetchReq::default_instance_->InitAsDefaultInstance();
  CSShowHeroVipInfo::default_instance_->InitAsDefaultInstance();
  CSShowHeroInfo::default_instance_->InitAsDefaultInstance();
  CSShowHeroInfoList::default_instance_->InitAsDefaultInstance();
  CSFeiJiBagList::default_instance_->InitAsDefaultInstance();
  CSZhaDanBagList::default_instance_->InitAsDefaultInstance();
  CSFeiJiDiPanBagList::default_instance_->InitAsDefaultInstance();
  CSFeiJiSkillOneBagList::default_instance_->InitAsDefaultInstance();
  CSFeiJiSkillTwoBagList::default_instance_->InitAsDefaultInstance();
  CSEnterHeroShowRsp::default_instance_->InitAsDefaultInstance();
  CSEnterHeroShowBagReq::default_instance_->InitAsDefaultInstance();
  CSSendUserHeroShowRsp::default_instance_->InitAsDefaultInstance();
  CSShowZhaDanBagReq::default_instance_->InitAsDefaultInstance();
  CSShowZhaDanBagRsp::default_instance_->InitAsDefaultInstance();
  CSMateReqParam::default_instance_->InitAsDefaultInstance();
  CSMateRspParam::default_instance_->InitAsDefaultInstance();
  CSMateReq::default_instance_->InitAsDefaultInstance();
  CSMateRsp::default_instance_->InitAsDefaultInstance();
  CSMsgBody::default_instance_->InitAsDefaultInstance();
  CSMsgHead::default_instance_->InitAsDefaultInstance();
  CSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSmsg_2eproto {
  StaticDescriptorInitializer_CSmsg_2eproto() {
    protobuf_AddDesc_CSmsg_2eproto();
  }
} static_descriptor_initializer_CSmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* CSRegisterLoginCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginCmd_descriptor_;
}
bool CSRegisterLoginCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSBagCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagCmd_descriptor_;
}
bool CSBagCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSDecorateBagCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagCmd_descriptor_;
}
bool CSDecorateBagCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSChatCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChatCmd_descriptor_;
}
bool CSChatCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSMateCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMateCmd_descriptor_;
}
bool CSMateCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgID_descriptor_;
}
bool CSMsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginReq::kAccountFieldNumber;
const int CSLoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

CSLoginReq::CSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginReq::InitAsDefaultInstance() {
}

CSLoginReq::CSLoginReq(const CSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginReq::~CSLoginReq() {
  SharedDtor();
}

void CSLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginReq_descriptor_;
}

const CSLoginReq& CSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSLoginReq* CSLoginReq::default_instance_ = NULL;

CSLoginReq* CSLoginReq::New() const {
  return new CSLoginReq;
}

void CSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginReq::MergeFrom(const CSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginReq::CopyFrom(const CSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginReq::IsInitialized() const {

  return true;
}

void CSLoginReq::Swap(CSLoginReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginReq_descriptor_;
  metadata.reflection = CSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginRsp::kTypeFieldNumber;
const int CSLoginRsp::kRoleFieldNumber;
#endif  // !_MSC_VER

CSLoginRsp::CSLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginRsp::InitAsDefaultInstance() {
  role_ = const_cast< ::DBRoleInfo*>(&::DBRoleInfo::default_instance());
}

CSLoginRsp::CSLoginRsp(const CSLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginRsp::~CSLoginRsp() {
  SharedDtor();
}

void CSLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void CSLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginRsp_descriptor_;
}

const CSLoginRsp& CSLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSLoginRsp* CSLoginRsp::default_instance_ = NULL;

CSLoginRsp* CSLoginRsp::New() const {
  return new CSLoginRsp;
}

void CSLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_role()) {
      if (role_ != NULL) role_->::DBRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Role;
        break;
      }

      // optional .DBRoleInfo Role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .DBRoleInfo Role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .DBRoleInfo Role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .DBRoleInfo Role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginRsp::MergeFrom(const CSLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role()) {
      mutable_role()->::DBRoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginRsp::CopyFrom(const CSLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginRsp::IsInitialized() const {

  return true;
}

void CSLoginRsp::Swap(CSLoginRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginRsp_descriptor_;
  metadata.reflection = CSLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterReq::kAccountFieldNumber;
const int CSRegisterReq::kPasswordFieldNumber;
const int CSRegisterReq::kNameFieldNumber;
#endif  // !_MSC_VER

CSRegisterReq::CSRegisterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterReq::InitAsDefaultInstance() {
}

CSRegisterReq::CSRegisterReq(const CSRegisterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterReq::~CSRegisterReq() {
  SharedDtor();
}

void CSRegisterReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterReq_descriptor_;
}

const CSRegisterReq& CSRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterReq* CSRegisterReq::default_instance_ = NULL;

CSRegisterReq* CSRegisterReq::New() const {
  return new CSRegisterReq;
}

void CSRegisterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterReq::MergeFrom(const CSRegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterReq::CopyFrom(const CSRegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterReq::IsInitialized() const {

  return true;
}

void CSRegisterReq::Swap(CSRegisterReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterReq_descriptor_;
  metadata.reflection = CSRegisterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

CSRegisterRsp::CSRegisterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterRsp::InitAsDefaultInstance() {
}

CSRegisterRsp::CSRegisterRsp(const CSRegisterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterRsp::~CSRegisterRsp() {
  SharedDtor();
}

void CSRegisterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterRsp_descriptor_;
}

const CSRegisterRsp& CSRegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterRsp* CSRegisterRsp::default_instance_ = NULL;

CSRegisterRsp* CSRegisterRsp::New() const {
  return new CSRegisterRsp;
}

void CSRegisterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterRsp::MergeFrom(const CSRegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterRsp::CopyFrom(const CSRegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterRsp::IsInitialized() const {

  return true;
}

void CSRegisterRsp::Swap(CSRegisterRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterRsp_descriptor_;
  metadata.reflection = CSRegisterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSQuitReq::kPadFieldNumber;
#endif  // !_MSC_VER

CSQuitReq::CSQuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQuitReq::InitAsDefaultInstance() {
}

CSQuitReq::CSQuitReq(const CSQuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQuitReq::SharedCtor() {
  _cached_size_ = 0;
  pad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQuitReq::~CSQuitReq() {
  SharedDtor();
}

void CSQuitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQuitReq_descriptor_;
}

const CSQuitReq& CSQuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSQuitReq* CSQuitReq::default_instance_ = NULL;

CSQuitReq* CSQuitReq::New() const {
  return new CSQuitReq;
}

void CSQuitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pad_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQuitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pad = 1;
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQuitReq::MergeFrom(const CSQuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pad()) {
      set_pad(from.pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQuitReq::CopyFrom(const CSQuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQuitReq::IsInitialized() const {

  return true;
}

void CSQuitReq::Swap(CSQuitReq* other) {
  if (other != this) {
    std::swap(pad_, other->pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQuitReq_descriptor_;
  metadata.reflection = CSQuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginReqParam::kLoginReqFieldNumber;
const int CSRegisterLoginReqParam::kRegisterReqFieldNumber;
const int CSRegisterLoginReqParam::kQuitReqFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginReqParam::CSRegisterLoginReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginReqParam::InitAsDefaultInstance() {
  loginreq_ = const_cast< ::CSLoginReq*>(&::CSLoginReq::default_instance());
  registerreq_ = const_cast< ::CSRegisterReq*>(&::CSRegisterReq::default_instance());
  quitreq_ = const_cast< ::CSQuitReq*>(&::CSQuitReq::default_instance());
}

CSRegisterLoginReqParam::CSRegisterLoginReqParam(const CSRegisterLoginReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginReqParam::SharedCtor() {
  _cached_size_ = 0;
  loginreq_ = NULL;
  registerreq_ = NULL;
  quitreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginReqParam::~CSRegisterLoginReqParam() {
  SharedDtor();
}

void CSRegisterLoginReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginreq_;
    delete registerreq_;
    delete quitreq_;
  }
}

void CSRegisterLoginReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginReqParam_descriptor_;
}

const CSRegisterLoginReqParam& CSRegisterLoginReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginReqParam* CSRegisterLoginReqParam::default_instance_ = NULL;

CSRegisterLoginReqParam* CSRegisterLoginReqParam::New() const {
  return new CSRegisterLoginReqParam;
}

void CSRegisterLoginReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginreq()) {
      if (loginreq_ != NULL) loginreq_->::CSLoginReq::Clear();
    }
    if (has_registerreq()) {
      if (registerreq_ != NULL) registerreq_->::CSRegisterReq::Clear();
    }
    if (has_quitreq()) {
      if (quitreq_ != NULL) quitreq_->::CSQuitReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSLoginReq LoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterReq;
        break;
      }

      // optional .CSRegisterReq RegisterReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QuitReq;
        break;
      }

      // optional .CSQuitReq QuitReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuitReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginreq(), output);
  }

  // optional .CSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerreq(), output);
  }

  // optional .CSQuitReq QuitReq = 3;
  if (has_quitreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quitreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginreq(), target);
  }

  // optional .CSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerreq(), target);
  }

  // optional .CSQuitReq QuitReq = 3;
  if (has_quitreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quitreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSLoginReq LoginReq = 1;
    if (has_loginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginreq());
    }

    // optional .CSRegisterReq RegisterReq = 2;
    if (has_registerreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerreq());
    }

    // optional .CSQuitReq QuitReq = 3;
    if (has_quitreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginReqParam::MergeFrom(const CSRegisterLoginReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginreq()) {
      mutable_loginreq()->::CSLoginReq::MergeFrom(from.loginreq());
    }
    if (from.has_registerreq()) {
      mutable_registerreq()->::CSRegisterReq::MergeFrom(from.registerreq());
    }
    if (from.has_quitreq()) {
      mutable_quitreq()->::CSQuitReq::MergeFrom(from.quitreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginReqParam::CopyFrom(const CSRegisterLoginReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginReqParam::IsInitialized() const {

  return true;
}

void CSRegisterLoginReqParam::Swap(CSRegisterLoginReqParam* other) {
  if (other != this) {
    std::swap(loginreq_, other->loginreq_);
    std::swap(registerreq_, other->registerreq_);
    std::swap(quitreq_, other->quitreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginReqParam_descriptor_;
  metadata.reflection = CSRegisterLoginReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginRspParam::kLoginRspFieldNumber;
const int CSRegisterLoginRspParam::kRegisterRspFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginRspParam::CSRegisterLoginRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginRspParam::InitAsDefaultInstance() {
  loginrsp_ = const_cast< ::CSLoginRsp*>(&::CSLoginRsp::default_instance());
  registerrsp_ = const_cast< ::CSRegisterRsp*>(&::CSRegisterRsp::default_instance());
}

CSRegisterLoginRspParam::CSRegisterLoginRspParam(const CSRegisterLoginRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginRspParam::SharedCtor() {
  _cached_size_ = 0;
  loginrsp_ = NULL;
  registerrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginRspParam::~CSRegisterLoginRspParam() {
  SharedDtor();
}

void CSRegisterLoginRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginrsp_;
    delete registerrsp_;
  }
}

void CSRegisterLoginRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginRspParam_descriptor_;
}

const CSRegisterLoginRspParam& CSRegisterLoginRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginRspParam* CSRegisterLoginRspParam::default_instance_ = NULL;

CSRegisterLoginRspParam* CSRegisterLoginRspParam::New() const {
  return new CSRegisterLoginRspParam;
}

void CSRegisterLoginRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginrsp()) {
      if (loginrsp_ != NULL) loginrsp_->::CSLoginRsp::Clear();
    }
    if (has_registerrsp()) {
      if (registerrsp_ != NULL) registerrsp_->::CSRegisterRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSLoginRsp LoginRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterRsp;
        break;
      }

      // optional .CSRegisterRsp RegisterRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginrsp(), output);
  }

  // optional .CSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginrsp(), target);
  }

  // optional .CSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSLoginRsp LoginRsp = 1;
    if (has_loginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginrsp());
    }

    // optional .CSRegisterRsp RegisterRsp = 2;
    if (has_registerrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginRspParam::MergeFrom(const CSRegisterLoginRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginrsp()) {
      mutable_loginrsp()->::CSLoginRsp::MergeFrom(from.loginrsp());
    }
    if (from.has_registerrsp()) {
      mutable_registerrsp()->::CSRegisterRsp::MergeFrom(from.registerrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginRspParam::CopyFrom(const CSRegisterLoginRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginRspParam::IsInitialized() const {

  return true;
}

void CSRegisterLoginRspParam::Swap(CSRegisterLoginRspParam* other) {
  if (other != this) {
    std::swap(loginrsp_, other->loginrsp_);
    std::swap(registerrsp_, other->registerrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginRspParam_descriptor_;
  metadata.reflection = CSRegisterLoginRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginReq::kCmdFieldNumber;
const int CSRegisterLoginReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginReq::CSRegisterLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSRegisterLoginReqParam*>(&::CSRegisterLoginReqParam::default_instance());
}

CSRegisterLoginReq::CSRegisterLoginReq(const CSRegisterLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginReq::~CSRegisterLoginReq() {
  SharedDtor();
}

void CSRegisterLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSRegisterLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginReq_descriptor_;
}

const CSRegisterLoginReq& CSRegisterLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginReq* CSRegisterLoginReq::default_instance_ = NULL;

CSRegisterLoginReq* CSRegisterLoginReq::New() const {
  return new CSRegisterLoginReq;
}

void CSRegisterLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSRegisterLoginReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSRegisterLoginCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSRegisterLoginReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSRegisterLoginCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSRegisterLoginReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginReq::MergeFrom(const CSRegisterLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSRegisterLoginReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginReq::CopyFrom(const CSRegisterLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRegisterLoginReq::Swap(CSRegisterLoginReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginReq_descriptor_;
  metadata.reflection = CSRegisterLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginRsp::kResultFieldNumber;
const int CSRegisterLoginRsp::kCmdFieldNumber;
const int CSRegisterLoginRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginRsp::CSRegisterLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSRegisterLoginRspParam*>(&::CSRegisterLoginRspParam::default_instance());
}

CSRegisterLoginRsp::CSRegisterLoginRsp(const CSRegisterLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginRsp::~CSRegisterLoginRsp() {
  SharedDtor();
}

void CSRegisterLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSRegisterLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginRsp_descriptor_;
}

const CSRegisterLoginRsp& CSRegisterLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginRsp* CSRegisterLoginRsp::default_instance_ = NULL;

CSRegisterLoginRsp* CSRegisterLoginRsp::New() const {
  return new CSRegisterLoginRsp;
}

void CSRegisterLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSRegisterLoginRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSRegisterLoginCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSRegisterLoginRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSRegisterLoginCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSRegisterLoginRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginRsp::MergeFrom(const CSRegisterLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSRegisterLoginRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginRsp::CopyFrom(const CSRegisterLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSRegisterLoginRsp::Swap(CSRegisterLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginRsp_descriptor_;
  metadata.reflection = CSRegisterLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagFetchReq::kPadFieldNumber;
#endif  // !_MSC_VER

CSBagFetchReq::CSBagFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagFetchReq::InitAsDefaultInstance() {
}

CSBagFetchReq::CSBagFetchReq(const CSBagFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagFetchReq::SharedCtor() {
  _cached_size_ = 0;
  pad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagFetchReq::~CSBagFetchReq() {
  SharedDtor();
}

void CSBagFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagFetchReq_descriptor_;
}

const CSBagFetchReq& CSBagFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagFetchReq* CSBagFetchReq::default_instance_ = NULL;

CSBagFetchReq* CSBagFetchReq::New() const {
  return new CSBagFetchReq;
}

void CSBagFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pad_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pad = 1;
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagFetchReq::MergeFrom(const CSBagFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pad()) {
      set_pad(from.pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagFetchReq::CopyFrom(const CSBagFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagFetchReq::IsInitialized() const {

  return true;
}

void CSBagFetchReq::Swap(CSBagFetchReq* other) {
  if (other != this) {
    std::swap(pad_, other->pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagFetchReq_descriptor_;
  metadata.reflection = CSBagFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagGridInfo::kItemIdFieldNumber;
const int CSBagGridInfo::kNumFieldNumber;
#endif  // !_MSC_VER

CSBagGridInfo::CSBagGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagGridInfo::InitAsDefaultInstance() {
}

CSBagGridInfo::CSBagGridInfo(const CSBagGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagGridInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagGridInfo::~CSBagGridInfo() {
  SharedDtor();
}

void CSBagGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagGridInfo_descriptor_;
}

const CSBagGridInfo& CSBagGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagGridInfo* CSBagGridInfo::default_instance_ = NULL;

CSBagGridInfo* CSBagGridInfo::New() const {
  return new CSBagGridInfo;
}

void CSBagGridInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagGridInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagGridInfo::MergeFrom(const CSBagGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagGridInfo::CopyFrom(const CSBagGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagGridInfo::IsInitialized() const {

  return true;
}

void CSBagGridInfo::Swap(CSBagGridInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagGridInfo_descriptor_;
  metadata.reflection = CSBagGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagBagInfo::kGridInfoFieldNumber;
#endif  // !_MSC_VER

CSBagBagInfo::CSBagBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagBagInfo::InitAsDefaultInstance() {
}

CSBagBagInfo::CSBagBagInfo(const CSBagBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagBagInfo::~CSBagBagInfo() {
  SharedDtor();
}

void CSBagBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagBagInfo_descriptor_;
}

const CSBagBagInfo& CSBagBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagBagInfo* CSBagBagInfo::default_instance_ = NULL;

CSBagBagInfo* CSBagBagInfo::New() const {
  return new CSBagBagInfo;
}

void CSBagBagInfo::Clear() {
  gridinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSBagGridInfo GridInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GridInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GridInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSBagGridInfo GridInfo = 1;
  for (int i = 0; i < this->gridinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gridinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSBagGridInfo GridInfo = 1;
  for (int i = 0; i < this->gridinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gridinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CSBagGridInfo GridInfo = 1;
  total_size += 1 * this->gridinfo_size();
  for (int i = 0; i < this->gridinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagBagInfo::MergeFrom(const CSBagBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridinfo_.MergeFrom(from.gridinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagBagInfo::CopyFrom(const CSBagBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagBagInfo::IsInitialized() const {

  return true;
}

void CSBagBagInfo::Swap(CSBagBagInfo* other) {
  if (other != this) {
    gridinfo_.Swap(&other->gridinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagBagInfo_descriptor_;
  metadata.reflection = CSBagBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagFetchRsp::kBagInfoFieldNumber;
#endif  // !_MSC_VER

CSBagFetchRsp::CSBagFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagFetchRsp::InitAsDefaultInstance() {
  baginfo_ = const_cast< ::CSBagBagInfo*>(&::CSBagBagInfo::default_instance());
}

CSBagFetchRsp::CSBagFetchRsp(const CSBagFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagFetchRsp::~CSBagFetchRsp() {
  SharedDtor();
}

void CSBagFetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete baginfo_;
  }
}

void CSBagFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagFetchRsp_descriptor_;
}

const CSBagFetchRsp& CSBagFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagFetchRsp* CSBagFetchRsp::default_instance_ = NULL;

CSBagFetchRsp* CSBagFetchRsp::New() const {
  return new CSBagFetchRsp;
}

void CSBagFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::CSBagBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSBagBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSBagBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSBagBagInfo BagInfo = 1;
  if (has_baginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSBagBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagFetchRsp::MergeFrom(const CSBagFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::CSBagBagInfo::MergeFrom(from.baginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagFetchRsp::CopyFrom(const CSBagFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagFetchRsp::IsInitialized() const {

  return true;
}

void CSBagFetchRsp::Swap(CSBagFetchRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagFetchRsp_descriptor_;
  metadata.reflection = CSBagFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagUseReq::kItemIdFieldNumber;
const int CSBagUseReq::kItemNumFieldNumber;
const int CSBagUseReq::kPickedIdFieldNumber;
#endif  // !_MSC_VER

CSBagUseReq::CSBagUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagUseReq::InitAsDefaultInstance() {
}

CSBagUseReq::CSBagUseReq(const CSBagUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagUseReq::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  pickedid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagUseReq::~CSBagUseReq() {
  SharedDtor();
}

void CSBagUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagUseReq_descriptor_;
}

const CSBagUseReq& CSBagUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagUseReq* CSBagUseReq::default_instance_ = NULL;

CSBagUseReq* CSBagUseReq::New() const {
  return new CSBagUseReq;
}

void CSBagUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    pickedid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }

      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PickedId;
        break;
      }

      // optional uint32 PickedId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PickedId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickedid_)));
          set_has_pickedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 ItemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  // optional uint32 PickedId = 3;
  if (has_pickedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pickedid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 ItemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }

  // optional uint32 PickedId = 3;
  if (has_pickedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pickedid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 PickedId = 3;
    if (has_pickedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pickedid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagUseReq::MergeFrom(const CSBagUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_pickedid()) {
      set_pickedid(from.pickedid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagUseReq::CopyFrom(const CSBagUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagUseReq::IsInitialized() const {

  return true;
}

void CSBagUseReq::Swap(CSBagUseReq* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(pickedid_, other->pickedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagUseReq_descriptor_;
  metadata.reflection = CSBagUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemInfo::kIDFieldNumber;
const int CSItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

CSItemInfo::CSItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemInfo::InitAsDefaultInstance() {
}

CSItemInfo::CSItemInfo(const CSItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemInfo::~CSItemInfo() {
  SharedDtor();
}

void CSItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemInfo_descriptor_;
}

const CSItemInfo& CSItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSItemInfo* CSItemInfo::default_instance_ = NULL;

CSItemInfo* CSItemInfo::New() const {
  return new CSItemInfo;
}

void CSItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemInfo::MergeFrom(const CSItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemInfo::CopyFrom(const CSItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemInfo::IsInitialized() const {

  return true;
}

void CSItemInfo::Swap(CSItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemInfo_descriptor_;
  metadata.reflection = CSItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemInfoList::kItemInfoFieldNumber;
#endif  // !_MSC_VER

CSItemInfoList::CSItemInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemInfoList::InitAsDefaultInstance() {
}

CSItemInfoList::CSItemInfoList(const CSItemInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemInfoList::~CSItemInfoList() {
  SharedDtor();
}

void CSItemInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemInfoList_descriptor_;
}

const CSItemInfoList& CSItemInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSItemInfoList* CSItemInfoList::default_instance_ = NULL;

CSItemInfoList* CSItemInfoList::New() const {
  return new CSItemInfoList;
}

void CSItemInfoList::Clear() {
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSItemInfo ItemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ItemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSItemInfo ItemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSItemInfo ItemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .CSItemInfo ItemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemInfoList::MergeFrom(const CSItemInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemInfoList::CopyFrom(const CSItemInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemInfoList::IsInitialized() const {

  return true;
}

void CSItemInfoList::Swap(CSItemInfoList* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemInfoList_descriptor_;
  metadata.reflection = CSItemInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagUseRsp::kItemInfoListFieldNumber;
#endif  // !_MSC_VER

CSBagUseRsp::CSBagUseRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagUseRsp::InitAsDefaultInstance() {
  iteminfolist_ = const_cast< ::CSItemInfoList*>(&::CSItemInfoList::default_instance());
}

CSBagUseRsp::CSBagUseRsp(const CSBagUseRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagUseRsp::SharedCtor() {
  _cached_size_ = 0;
  iteminfolist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagUseRsp::~CSBagUseRsp() {
  SharedDtor();
}

void CSBagUseRsp::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfolist_;
  }
}

void CSBagUseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagUseRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagUseRsp_descriptor_;
}

const CSBagUseRsp& CSBagUseRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagUseRsp* CSBagUseRsp::default_instance_ = NULL;

CSBagUseRsp* CSBagUseRsp::New() const {
  return new CSBagUseRsp;
}

void CSBagUseRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfolist()) {
      if (iteminfolist_ != NULL) iteminfolist_->::CSItemInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagUseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSItemInfoList ItemInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagUseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSItemInfoList ItemInfoList = 1;
  if (has_iteminfolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfolist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagUseRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSItemInfoList ItemInfoList = 1;
  if (has_iteminfolist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfolist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagUseRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSItemInfoList ItemInfoList = 1;
    if (has_iteminfolist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfolist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagUseRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagUseRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagUseRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagUseRsp::MergeFrom(const CSBagUseRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfolist()) {
      mutable_iteminfolist()->::CSItemInfoList::MergeFrom(from.iteminfolist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagUseRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagUseRsp::CopyFrom(const CSBagUseRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagUseRsp::IsInitialized() const {

  return true;
}

void CSBagUseRsp::Swap(CSBagUseRsp* other) {
  if (other != this) {
    std::swap(iteminfolist_, other->iteminfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagUseRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagUseRsp_descriptor_;
  metadata.reflection = CSBagUseRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagReqParam::kFetchReqFieldNumber;
const int CSBagReqParam::kUseReqFieldNumber;
#endif  // !_MSC_VER

CSBagReqParam::CSBagReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagReqParam::InitAsDefaultInstance() {
  fetchreq_ = const_cast< ::CSBagFetchReq*>(&::CSBagFetchReq::default_instance());
  usereq_ = const_cast< ::CSBagUseReq*>(&::CSBagUseReq::default_instance());
}

CSBagReqParam::CSBagReqParam(const CSBagReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagReqParam::SharedCtor() {
  _cached_size_ = 0;
  fetchreq_ = NULL;
  usereq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagReqParam::~CSBagReqParam() {
  SharedDtor();
}

void CSBagReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchreq_;
    delete usereq_;
  }
}

void CSBagReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagReqParam_descriptor_;
}

const CSBagReqParam& CSBagReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagReqParam* CSBagReqParam::default_instance_ = NULL;

CSBagReqParam* CSBagReqParam::New() const {
  return new CSBagReqParam;
}

void CSBagReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchreq()) {
      if (fetchreq_ != NULL) fetchreq_->::CSBagFetchReq::Clear();
    }
    if (has_usereq()) {
      if (usereq_ != NULL) usereq_->::CSBagUseReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSBagFetchReq FetchReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UseReq;
        break;
      }

      // optional .CSBagUseReq UseReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UseReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usereq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchreq(), output);
  }

  // optional .CSBagUseReq UseReq = 2;
  if (has_usereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usereq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchreq(), target);
  }

  // optional .CSBagUseReq UseReq = 2;
  if (has_usereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usereq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSBagFetchReq FetchReq = 1;
    if (has_fetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchreq());
    }

    // optional .CSBagUseReq UseReq = 2;
    if (has_usereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usereq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagReqParam::MergeFrom(const CSBagReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchreq()) {
      mutable_fetchreq()->::CSBagFetchReq::MergeFrom(from.fetchreq());
    }
    if (from.has_usereq()) {
      mutable_usereq()->::CSBagUseReq::MergeFrom(from.usereq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagReqParam::CopyFrom(const CSBagReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagReqParam::IsInitialized() const {

  return true;
}

void CSBagReqParam::Swap(CSBagReqParam* other) {
  if (other != this) {
    std::swap(fetchreq_, other->fetchreq_);
    std::swap(usereq_, other->usereq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagReqParam_descriptor_;
  metadata.reflection = CSBagReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagRspParam::kFetchRspFieldNumber;
const int CSBagRspParam::kUseRspFieldNumber;
#endif  // !_MSC_VER

CSBagRspParam::CSBagRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagRspParam::InitAsDefaultInstance() {
  fetchrsp_ = const_cast< ::CSBagFetchRsp*>(&::CSBagFetchRsp::default_instance());
  usersp_ = const_cast< ::CSBagUseRsp*>(&::CSBagUseRsp::default_instance());
}

CSBagRspParam::CSBagRspParam(const CSBagRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagRspParam::SharedCtor() {
  _cached_size_ = 0;
  fetchrsp_ = NULL;
  usersp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagRspParam::~CSBagRspParam() {
  SharedDtor();
}

void CSBagRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchrsp_;
    delete usersp_;
  }
}

void CSBagRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagRspParam_descriptor_;
}

const CSBagRspParam& CSBagRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagRspParam* CSBagRspParam::default_instance_ = NULL;

CSBagRspParam* CSBagRspParam::New() const {
  return new CSBagRspParam;
}

void CSBagRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchrsp()) {
      if (fetchrsp_ != NULL) fetchrsp_->::CSBagFetchRsp::Clear();
    }
    if (has_usersp()) {
      if (usersp_ != NULL) usersp_->::CSBagUseRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSBagFetchRsp FetchRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UseRsp;
        break;
      }

      // optional .CSBagUseRsp UseRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UseRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchrsp(), output);
  }

  // optional .CSBagUseRsp UseRsp = 2;
  if (has_usersp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usersp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchrsp(), target);
  }

  // optional .CSBagUseRsp UseRsp = 2;
  if (has_usersp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usersp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSBagFetchRsp FetchRsp = 1;
    if (has_fetchrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchrsp());
    }

    // optional .CSBagUseRsp UseRsp = 2;
    if (has_usersp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagRspParam::MergeFrom(const CSBagRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchrsp()) {
      mutable_fetchrsp()->::CSBagFetchRsp::MergeFrom(from.fetchrsp());
    }
    if (from.has_usersp()) {
      mutable_usersp()->::CSBagUseRsp::MergeFrom(from.usersp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagRspParam::CopyFrom(const CSBagRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagRspParam::IsInitialized() const {

  return true;
}

void CSBagRspParam::Swap(CSBagRspParam* other) {
  if (other != this) {
    std::swap(fetchrsp_, other->fetchrsp_);
    std::swap(usersp_, other->usersp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagRspParam_descriptor_;
  metadata.reflection = CSBagRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagReq::kCmdFieldNumber;
const int CSBagReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSBagReq::CSBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSBagReqParam*>(&::CSBagReqParam::default_instance());
}

CSBagReq::CSBagReq(const CSBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagReq::~CSBagReq() {
  SharedDtor();
}

void CSBagReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagReq_descriptor_;
}

const CSBagReq& CSBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagReq* CSBagReq::default_instance_ = NULL;

CSBagReq* CSBagReq::New() const {
  return new CSBagReq;
}

void CSBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSBagReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSBagCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSBagReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSBagCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSBagReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSBagCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSBagReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSBagCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSBagReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagReq::MergeFrom(const CSBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSBagReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagReq::CopyFrom(const CSBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBagReq::Swap(CSBagReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagReq_descriptor_;
  metadata.reflection = CSBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagRsp::kResultFieldNumber;
const int CSBagRsp::kCmdFieldNumber;
const int CSBagRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSBagRsp::CSBagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSBagRspParam*>(&::CSBagRspParam::default_instance());
}

CSBagRsp::CSBagRsp(const CSBagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagRsp::~CSBagRsp() {
  SharedDtor();
}

void CSBagRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagRsp_descriptor_;
}

const CSBagRsp& CSBagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagRsp* CSBagRsp::default_instance_ = NULL;

CSBagRsp* CSBagRsp::New() const {
  return new CSBagRsp;
}

void CSBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSBagRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSBagCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSBagRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSBagCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSBagRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSBagCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSBagRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSBagCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSBagRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagRsp::MergeFrom(const CSBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSBagRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagRsp::CopyFrom(const CSBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSBagRsp::Swap(CSBagRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagRsp_descriptor_;
  metadata.reflection = CSBagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagFetchReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagFetchReq::CSDecorateBagFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagFetchReq::InitAsDefaultInstance() {
}

CSDecorateBagFetchReq::CSDecorateBagFetchReq(const CSDecorateBagFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagFetchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagFetchReq::~CSDecorateBagFetchReq() {
  SharedDtor();
}

void CSDecorateBagFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagFetchReq_descriptor_;
}

const CSDecorateBagFetchReq& CSDecorateBagFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagFetchReq* CSDecorateBagFetchReq::default_instance_ = NULL;

CSDecorateBagFetchReq* CSDecorateBagFetchReq::New() const {
  return new CSDecorateBagFetchReq;
}

void CSDecorateBagFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagFetchReq::MergeFrom(const CSDecorateBagFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagFetchReq::CopyFrom(const CSDecorateBagFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagFetchReq::IsInitialized() const {

  return true;
}

void CSDecorateBagFetchReq::Swap(CSDecorateBagFetchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagFetchReq_descriptor_;
  metadata.reflection = CSDecorateBagFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagGridInfo::kItemIdFieldNumber;
const int CSDecorateBagGridInfo::kTypeFieldNumber;
const int CSDecorateBagGridInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagGridInfo::CSDecorateBagGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagGridInfo::InitAsDefaultInstance() {
}

CSDecorateBagGridInfo::CSDecorateBagGridInfo(const CSDecorateBagGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagGridInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  type_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagGridInfo::~CSDecorateBagGridInfo() {
  SharedDtor();
}

void CSDecorateBagGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagGridInfo_descriptor_;
}

const CSDecorateBagGridInfo& CSDecorateBagGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagGridInfo* CSDecorateBagGridInfo::default_instance_ = NULL;

CSDecorateBagGridInfo* CSDecorateBagGridInfo::New() const {
  return new CSDecorateBagGridInfo;
}

void CSDecorateBagGridInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    type_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagGridInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagGridInfo::MergeFrom(const CSDecorateBagGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagGridInfo::CopyFrom(const CSDecorateBagGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagGridInfo::IsInitialized() const {

  return true;
}

void CSDecorateBagGridInfo::Swap(CSDecorateBagGridInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagGridInfo_descriptor_;
  metadata.reflection = CSDecorateBagGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagInfo::kDecorateGridInfoFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagInfo::CSDecorateBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagInfo::InitAsDefaultInstance() {
}

CSDecorateBagInfo::CSDecorateBagInfo(const CSDecorateBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagInfo::~CSDecorateBagInfo() {
  SharedDtor();
}

void CSDecorateBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagInfo_descriptor_;
}

const CSDecorateBagInfo& CSDecorateBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagInfo* CSDecorateBagInfo::default_instance_ = NULL;

CSDecorateBagInfo* CSDecorateBagInfo::New() const {
  return new CSDecorateBagInfo;
}

void CSDecorateBagInfo::Clear() {
  decorategridinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateGridInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decorategridinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DecorateGridInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
  for (int i = 0; i < this->decorategridinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decorategridinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
  for (int i = 0; i < this->decorategridinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->decorategridinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
  total_size += 1 * this->decorategridinfo_size();
  for (int i = 0; i < this->decorategridinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decorategridinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagInfo::MergeFrom(const CSDecorateBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  decorategridinfo_.MergeFrom(from.decorategridinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagInfo::CopyFrom(const CSDecorateBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagInfo::IsInitialized() const {

  return true;
}

void CSDecorateBagInfo::Swap(CSDecorateBagInfo* other) {
  if (other != this) {
    decorategridinfo_.Swap(&other->decorategridinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagInfo_descriptor_;
  metadata.reflection = CSDecorateBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagFetchRsp::kTypeFieldNumber;
const int CSDecorateBagFetchRsp::kIdFieldNumber;
const int CSDecorateBagFetchRsp::kDecorateBagInfoFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagFetchRsp::CSDecorateBagFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagFetchRsp::InitAsDefaultInstance() {
  decoratebaginfo_ = const_cast< ::CSDecorateBagInfo*>(&::CSDecorateBagInfo::default_instance());
}

CSDecorateBagFetchRsp::CSDecorateBagFetchRsp(const CSDecorateBagFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  decoratebaginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagFetchRsp::~CSDecorateBagFetchRsp() {
  SharedDtor();
}

void CSDecorateBagFetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete decoratebaginfo_;
  }
}

void CSDecorateBagFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagFetchRsp_descriptor_;
}

const CSDecorateBagFetchRsp& CSDecorateBagFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagFetchRsp* CSDecorateBagFetchRsp::default_instance_ = NULL;

CSDecorateBagFetchRsp* CSDecorateBagFetchRsp::New() const {
  return new CSDecorateBagFetchRsp;
}

void CSDecorateBagFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    if (has_decoratebaginfo()) {
      if (decoratebaginfo_ != NULL) decoratebaginfo_->::CSDecorateBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DecorateBagInfo;
        break;
      }

      // optional .CSDecorateBagInfo DecorateBagInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebaginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decoratebaginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->decoratebaginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .CSDecorateBagInfo DecorateBagInfo = 3;
    if (has_decoratebaginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebaginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagFetchRsp::MergeFrom(const CSDecorateBagFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_decoratebaginfo()) {
      mutable_decoratebaginfo()->::CSDecorateBagInfo::MergeFrom(from.decoratebaginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagFetchRsp::CopyFrom(const CSDecorateBagFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagFetchRsp::IsInitialized() const {

  return true;
}

void CSDecorateBagFetchRsp::Swap(CSDecorateBagFetchRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(decoratebaginfo_, other->decoratebaginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagFetchRsp_descriptor_;
  metadata.reflection = CSDecorateBagFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagShowSetReq::kTypeFieldNumber;
const int CSDecorateBagShowSetReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagShowSetReq::CSDecorateBagShowSetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagShowSetReq::InitAsDefaultInstance() {
}

CSDecorateBagShowSetReq::CSDecorateBagShowSetReq(const CSDecorateBagShowSetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagShowSetReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagShowSetReq::~CSDecorateBagShowSetReq() {
  SharedDtor();
}

void CSDecorateBagShowSetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagShowSetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagShowSetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagShowSetReq_descriptor_;
}

const CSDecorateBagShowSetReq& CSDecorateBagShowSetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagShowSetReq* CSDecorateBagShowSetReq::default_instance_ = NULL;

CSDecorateBagShowSetReq* CSDecorateBagShowSetReq::New() const {
  return new CSDecorateBagShowSetReq;
}

void CSDecorateBagShowSetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagShowSetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagShowSetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagShowSetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagShowSetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagShowSetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagShowSetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagShowSetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagShowSetReq::MergeFrom(const CSDecorateBagShowSetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagShowSetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagShowSetReq::CopyFrom(const CSDecorateBagShowSetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagShowSetReq::IsInitialized() const {

  return true;
}

void CSDecorateBagShowSetReq::Swap(CSDecorateBagShowSetReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagShowSetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagShowSetReq_descriptor_;
  metadata.reflection = CSDecorateBagShowSetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPFetchReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPFetchReq::CSDecorateBagVIPFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPFetchReq::InitAsDefaultInstance() {
}

CSDecorateBagVIPFetchReq::CSDecorateBagVIPFetchReq(const CSDecorateBagVIPFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPFetchReq::~CSDecorateBagVIPFetchReq() {
  SharedDtor();
}

void CSDecorateBagVIPFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagVIPFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPFetchReq_descriptor_;
}

const CSDecorateBagVIPFetchReq& CSDecorateBagVIPFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPFetchReq* CSDecorateBagVIPFetchReq::default_instance_ = NULL;

CSDecorateBagVIPFetchReq* CSDecorateBagVIPFetchReq::New() const {
  return new CSDecorateBagVIPFetchReq;
}

void CSDecorateBagVIPFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPFetchReq::MergeFrom(const CSDecorateBagVIPFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchReq::CopyFrom(const CSDecorateBagVIPFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPFetchReq::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPFetchReq::Swap(CSDecorateBagVIPFetchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPFetchReq_descriptor_;
  metadata.reflection = CSDecorateBagVIPFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPItem::kVipGradeFieldNumber;
const int CSDecorateBagVIPItem::kVipExperFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPItem::CSDecorateBagVIPItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPItem::InitAsDefaultInstance() {
}

CSDecorateBagVIPItem::CSDecorateBagVIPItem(const CSDecorateBagVIPItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPItem::SharedCtor() {
  _cached_size_ = 0;
  vipgrade_ = 0u;
  vipexper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPItem::~CSDecorateBagVIPItem() {
  SharedDtor();
}

void CSDecorateBagVIPItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagVIPItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPItem_descriptor_;
}

const CSDecorateBagVIPItem& CSDecorateBagVIPItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPItem* CSDecorateBagVIPItem::default_instance_ = NULL;

CSDecorateBagVIPItem* CSDecorateBagVIPItem::New() const {
  return new CSDecorateBagVIPItem;
}

void CSDecorateBagVIPItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipgrade_ = 0u;
    vipexper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 VipGrade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipgrade_)));
          set_has_vipgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VipExper;
        break;
      }

      // optional uint32 VipExper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipExper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexper_)));
          set_has_vipexper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 VipGrade = 1;
  if (has_vipgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vipgrade(), output);
  }

  // optional uint32 VipExper = 2;
  if (has_vipexper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vipexper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 VipGrade = 1;
  if (has_vipgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vipgrade(), target);
  }

  // optional uint32 VipExper = 2;
  if (has_vipexper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vipexper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 VipGrade = 1;
    if (has_vipgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipgrade());
    }

    // optional uint32 VipExper = 2;
    if (has_vipexper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPItem::MergeFrom(const CSDecorateBagVIPItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipgrade()) {
      set_vipgrade(from.vipgrade());
    }
    if (from.has_vipexper()) {
      set_vipexper(from.vipexper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPItem::CopyFrom(const CSDecorateBagVIPItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPItem::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPItem::Swap(CSDecorateBagVIPItem* other) {
  if (other != this) {
    std::swap(vipgrade_, other->vipgrade_);
    std::swap(vipexper_, other->vipexper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPItem_descriptor_;
  metadata.reflection = CSDecorateBagVIPItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPList::kVIPItemListFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPList::CSDecorateBagVIPList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPList::InitAsDefaultInstance() {
}

CSDecorateBagVIPList::CSDecorateBagVIPList(const CSDecorateBagVIPList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPList::~CSDecorateBagVIPList() {
  SharedDtor();
}

void CSDecorateBagVIPList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagVIPList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPList_descriptor_;
}

const CSDecorateBagVIPList& CSDecorateBagVIPList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPList* CSDecorateBagVIPList::default_instance_ = NULL;

CSDecorateBagVIPList* CSDecorateBagVIPList::New() const {
  return new CSDecorateBagVIPList;
}

void CSDecorateBagVIPList::Clear() {
  vipitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSDecorateBagVIPItem VIPItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_VIPItemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSDecorateBagVIPItem VIPItemList = 1;
  for (int i = 0; i < this->vipitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSDecorateBagVIPItem VIPItemList = 1;
  for (int i = 0; i < this->vipitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPList::ByteSize() const {
  int total_size = 0;

  // repeated .CSDecorateBagVIPItem VIPItemList = 1;
  total_size += 1 * this->vipitemlist_size();
  for (int i = 0; i < this->vipitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPList::MergeFrom(const CSDecorateBagVIPList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipitemlist_.MergeFrom(from.vipitemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPList::CopyFrom(const CSDecorateBagVIPList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPList::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPList::Swap(CSDecorateBagVIPList* other) {
  if (other != this) {
    vipitemlist_.Swap(&other->vipitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPList_descriptor_;
  metadata.reflection = CSDecorateBagVIPList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPFetchRsp::kTypeFieldNumber;
const int CSDecorateBagVIPFetchRsp::kIdFieldNumber;
const int CSDecorateBagVIPFetchRsp::kDecorateBagInfoFieldNumber;
const int CSDecorateBagVIPFetchRsp::kVipListFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPFetchRsp::CSDecorateBagVIPFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPFetchRsp::InitAsDefaultInstance() {
  decoratebaginfo_ = const_cast< ::CSDecorateBagInfo*>(&::CSDecorateBagInfo::default_instance());
  viplist_ = const_cast< ::CSDecorateBagVIPList*>(&::CSDecorateBagVIPList::default_instance());
}

CSDecorateBagVIPFetchRsp::CSDecorateBagVIPFetchRsp(const CSDecorateBagVIPFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  decoratebaginfo_ = NULL;
  viplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPFetchRsp::~CSDecorateBagVIPFetchRsp() {
  SharedDtor();
}

void CSDecorateBagVIPFetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete decoratebaginfo_;
    delete viplist_;
  }
}

void CSDecorateBagVIPFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPFetchRsp_descriptor_;
}

const CSDecorateBagVIPFetchRsp& CSDecorateBagVIPFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPFetchRsp* CSDecorateBagVIPFetchRsp::default_instance_ = NULL;

CSDecorateBagVIPFetchRsp* CSDecorateBagVIPFetchRsp::New() const {
  return new CSDecorateBagVIPFetchRsp;
}

void CSDecorateBagVIPFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    if (has_decoratebaginfo()) {
      if (decoratebaginfo_ != NULL) decoratebaginfo_->::CSDecorateBagInfo::Clear();
    }
    if (has_viplist()) {
      if (viplist_ != NULL) viplist_->::CSDecorateBagVIPList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DecorateBagInfo;
        break;
      }

      // optional .CSDecorateBagInfo DecorateBagInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebaginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_VipList;
        break;
      }

      // optional .CSDecorateBagVIPList VipList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decoratebaginfo(), output);
  }

  // optional .CSDecorateBagVIPList VipList = 4;
  if (has_viplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->viplist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->decoratebaginfo(), target);
  }

  // optional .CSDecorateBagVIPList VipList = 4;
  if (has_viplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->viplist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .CSDecorateBagInfo DecorateBagInfo = 3;
    if (has_decoratebaginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebaginfo());
    }

    // optional .CSDecorateBagVIPList VipList = 4;
    if (has_viplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viplist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPFetchRsp::MergeFrom(const CSDecorateBagVIPFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_decoratebaginfo()) {
      mutable_decoratebaginfo()->::CSDecorateBagInfo::MergeFrom(from.decoratebaginfo());
    }
    if (from.has_viplist()) {
      mutable_viplist()->::CSDecorateBagVIPList::MergeFrom(from.viplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchRsp::CopyFrom(const CSDecorateBagVIPFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPFetchRsp::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPFetchRsp::Swap(CSDecorateBagVIPFetchRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(decoratebaginfo_, other->decoratebaginfo_);
    std::swap(viplist_, other->viplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPFetchRsp_descriptor_;
  metadata.reflection = CSDecorateBagVIPFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagReqParam::kFetchReqFieldNumber;
const int CSDecorateBagReqParam::kShowSetReqFieldNumber;
const int CSDecorateBagReqParam::kVIPFetchReqFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagReqParam::CSDecorateBagReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagReqParam::InitAsDefaultInstance() {
  fetchreq_ = const_cast< ::CSDecorateBagFetchReq*>(&::CSDecorateBagFetchReq::default_instance());
  showsetreq_ = const_cast< ::CSDecorateBagShowSetReq*>(&::CSDecorateBagShowSetReq::default_instance());
  vipfetchreq_ = const_cast< ::CSDecorateBagVIPFetchReq*>(&::CSDecorateBagVIPFetchReq::default_instance());
}

CSDecorateBagReqParam::CSDecorateBagReqParam(const CSDecorateBagReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagReqParam::SharedCtor() {
  _cached_size_ = 0;
  fetchreq_ = NULL;
  showsetreq_ = NULL;
  vipfetchreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagReqParam::~CSDecorateBagReqParam() {
  SharedDtor();
}

void CSDecorateBagReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchreq_;
    delete showsetreq_;
    delete vipfetchreq_;
  }
}

void CSDecorateBagReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagReqParam_descriptor_;
}

const CSDecorateBagReqParam& CSDecorateBagReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagReqParam* CSDecorateBagReqParam::default_instance_ = NULL;

CSDecorateBagReqParam* CSDecorateBagReqParam::New() const {
  return new CSDecorateBagReqParam;
}

void CSDecorateBagReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchreq()) {
      if (fetchreq_ != NULL) fetchreq_->::CSDecorateBagFetchReq::Clear();
    }
    if (has_showsetreq()) {
      if (showsetreq_ != NULL) showsetreq_->::CSDecorateBagShowSetReq::Clear();
    }
    if (has_vipfetchreq()) {
      if (vipfetchreq_ != NULL) vipfetchreq_->::CSDecorateBagVIPFetchReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSDecorateBagFetchReq FetchReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ShowSetReq;
        break;
      }

      // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowSetReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showsetreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VIPFetchReq;
        break;
      }

      // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPFetchReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipfetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSDecorateBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchreq(), output);
  }

  // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
  if (has_showsetreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->showsetreq(), output);
  }

  // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
  if (has_vipfetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vipfetchreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSDecorateBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchreq(), target);
  }

  // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
  if (has_showsetreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->showsetreq(), target);
  }

  // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
  if (has_vipfetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vipfetchreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSDecorateBagFetchReq FetchReq = 1;
    if (has_fetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchreq());
    }

    // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
    if (has_showsetreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showsetreq());
    }

    // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
    if (has_vipfetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipfetchreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagReqParam::MergeFrom(const CSDecorateBagReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchreq()) {
      mutable_fetchreq()->::CSDecorateBagFetchReq::MergeFrom(from.fetchreq());
    }
    if (from.has_showsetreq()) {
      mutable_showsetreq()->::CSDecorateBagShowSetReq::MergeFrom(from.showsetreq());
    }
    if (from.has_vipfetchreq()) {
      mutable_vipfetchreq()->::CSDecorateBagVIPFetchReq::MergeFrom(from.vipfetchreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagReqParam::CopyFrom(const CSDecorateBagReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagReqParam::IsInitialized() const {

  return true;
}

void CSDecorateBagReqParam::Swap(CSDecorateBagReqParam* other) {
  if (other != this) {
    std::swap(fetchreq_, other->fetchreq_);
    std::swap(showsetreq_, other->showsetreq_);
    std::swap(vipfetchreq_, other->vipfetchreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagReqParam_descriptor_;
  metadata.reflection = CSDecorateBagReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagRspParam::kFetchRspFieldNumber;
const int CSDecorateBagRspParam::kVIPFetchRspFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagRspParam::CSDecorateBagRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagRspParam::InitAsDefaultInstance() {
  fetchrsp_ = const_cast< ::CSDecorateBagFetchRsp*>(&::CSDecorateBagFetchRsp::default_instance());
  vipfetchrsp_ = const_cast< ::CSDecorateBagVIPFetchRsp*>(&::CSDecorateBagVIPFetchRsp::default_instance());
}

CSDecorateBagRspParam::CSDecorateBagRspParam(const CSDecorateBagRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagRspParam::SharedCtor() {
  _cached_size_ = 0;
  fetchrsp_ = NULL;
  vipfetchrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagRspParam::~CSDecorateBagRspParam() {
  SharedDtor();
}

void CSDecorateBagRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchrsp_;
    delete vipfetchrsp_;
  }
}

void CSDecorateBagRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagRspParam_descriptor_;
}

const CSDecorateBagRspParam& CSDecorateBagRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagRspParam* CSDecorateBagRspParam::default_instance_ = NULL;

CSDecorateBagRspParam* CSDecorateBagRspParam::New() const {
  return new CSDecorateBagRspParam;
}

void CSDecorateBagRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchrsp()) {
      if (fetchrsp_ != NULL) fetchrsp_->::CSDecorateBagFetchRsp::Clear();
    }
    if (has_vipfetchrsp()) {
      if (vipfetchrsp_ != NULL) vipfetchrsp_->::CSDecorateBagVIPFetchRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSDecorateBagFetchRsp FetchRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VIPFetchRsp;
        break;
      }

      // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPFetchRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipfetchrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSDecorateBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchrsp(), output);
  }

  // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
  if (has_vipfetchrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vipfetchrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSDecorateBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchrsp(), target);
  }

  // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
  if (has_vipfetchrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vipfetchrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSDecorateBagFetchRsp FetchRsp = 1;
    if (has_fetchrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchrsp());
    }

    // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
    if (has_vipfetchrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipfetchrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagRspParam::MergeFrom(const CSDecorateBagRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchrsp()) {
      mutable_fetchrsp()->::CSDecorateBagFetchRsp::MergeFrom(from.fetchrsp());
    }
    if (from.has_vipfetchrsp()) {
      mutable_vipfetchrsp()->::CSDecorateBagVIPFetchRsp::MergeFrom(from.vipfetchrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagRspParam::CopyFrom(const CSDecorateBagRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagRspParam::IsInitialized() const {

  return true;
}

void CSDecorateBagRspParam::Swap(CSDecorateBagRspParam* other) {
  if (other != this) {
    std::swap(fetchrsp_, other->fetchrsp_);
    std::swap(vipfetchrsp_, other->vipfetchrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagRspParam_descriptor_;
  metadata.reflection = CSDecorateBagRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagReq::kCmdFieldNumber;
const int CSDecorateBagReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagReq::CSDecorateBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSDecorateBagReqParam*>(&::CSDecorateBagReqParam::default_instance());
}

CSDecorateBagReq::CSDecorateBagReq(const CSDecorateBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagReq::~CSDecorateBagReq() {
  SharedDtor();
}

void CSDecorateBagReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSDecorateBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagReq_descriptor_;
}

const CSDecorateBagReq& CSDecorateBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagReq* CSDecorateBagReq::default_instance_ = NULL;

CSDecorateBagReq* CSDecorateBagReq::New() const {
  return new CSDecorateBagReq;
}

void CSDecorateBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSDecorateBagReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSDecorateBagCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSDecorateBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSDecorateBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSDecorateBagReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSDecorateBagCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSDecorateBagReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSDecorateBagCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSDecorateBagReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSDecorateBagCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSDecorateBagReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagReq::MergeFrom(const CSDecorateBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSDecorateBagReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagReq::CopyFrom(const CSDecorateBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSDecorateBagReq::Swap(CSDecorateBagReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagReq_descriptor_;
  metadata.reflection = CSDecorateBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagRsp::kResultFieldNumber;
const int CSDecorateBagRsp::kCmdFieldNumber;
const int CSDecorateBagRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagRsp::CSDecorateBagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSDecorateBagRspParam*>(&::CSDecorateBagRspParam::default_instance());
}

CSDecorateBagRsp::CSDecorateBagRsp(const CSDecorateBagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagRsp::~CSDecorateBagRsp() {
  SharedDtor();
}

void CSDecorateBagRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSDecorateBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagRsp_descriptor_;
}

const CSDecorateBagRsp& CSDecorateBagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagRsp* CSDecorateBagRsp::default_instance_ = NULL;

CSDecorateBagRsp* CSDecorateBagRsp::New() const {
  return new CSDecorateBagRsp;
}

void CSDecorateBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSDecorateBagRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSDecorateBagCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSDecorateBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSDecorateBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSDecorateBagRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSDecorateBagCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSDecorateBagRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSDecorateBagCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSDecorateBagRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSDecorateBagCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSDecorateBagRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagRsp::MergeFrom(const CSDecorateBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSDecorateBagRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagRsp::CopyFrom(const CSDecorateBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSDecorateBagRsp::Swap(CSDecorateBagRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagRsp_descriptor_;
  metadata.reflection = CSDecorateBagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendList::kFriendUidFieldNumber;
#endif  // !_MSC_VER

FriendList::FriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendList::InitAsDefaultInstance() {
}

FriendList::FriendList(const FriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendList::~FriendList() {
  SharedDtor();
}

void FriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendList_descriptor_;
}

const FriendList& FriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

FriendList* FriendList::default_instance_ = NULL;

FriendList* FriendList::New() const {
  return new FriendList;
}

void FriendList::Clear() {
  frienduid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 FriendUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FriendUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_frienduid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_frienduid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_FriendUid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 FriendUid = 1;
  for (int i = 0; i < this->frienduid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->frienduid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 FriendUid = 1;
  for (int i = 0; i < this->frienduid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->frienduid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendList::ByteSize() const {
  int total_size = 0;

  // repeated uint64 FriendUid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->frienduid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->frienduid(i));
    }
    total_size += 1 * this->frienduid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendList::MergeFrom(const FriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienduid_.MergeFrom(from.frienduid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList::CopyFrom(const FriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList::IsInitialized() const {

  return true;
}

void FriendList::Swap(FriendList* other) {
  if (other != this) {
    frienduid_.Swap(&other->frienduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendList_descriptor_;
  metadata.reflection = FriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgRegisterSuccessReq::kUidFieldNumber;
const int CSMsgRegisterSuccessReq::kNameFieldNumber;
#endif  // !_MSC_VER

CSMsgRegisterSuccessReq::CSMsgRegisterSuccessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgRegisterSuccessReq::InitAsDefaultInstance() {
}

CSMsgRegisterSuccessReq::CSMsgRegisterSuccessReq(const CSMsgRegisterSuccessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgRegisterSuccessReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgRegisterSuccessReq::~CSMsgRegisterSuccessReq() {
  SharedDtor();
}

void CSMsgRegisterSuccessReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgRegisterSuccessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgRegisterSuccessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgRegisterSuccessReq_descriptor_;
}

const CSMsgRegisterSuccessReq& CSMsgRegisterSuccessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgRegisterSuccessReq* CSMsgRegisterSuccessReq::default_instance_ = NULL;

CSMsgRegisterSuccessReq* CSMsgRegisterSuccessReq::New() const {
  return new CSMsgRegisterSuccessReq;
}

void CSMsgRegisterSuccessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgRegisterSuccessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgRegisterSuccessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgRegisterSuccessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgRegisterSuccessReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgRegisterSuccessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgRegisterSuccessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgRegisterSuccessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgRegisterSuccessReq::MergeFrom(const CSMsgRegisterSuccessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgRegisterSuccessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgRegisterSuccessReq::CopyFrom(const CSMsgRegisterSuccessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgRegisterSuccessReq::IsInitialized() const {

  return true;
}

void CSMsgRegisterSuccessReq::Swap(CSMsgRegisterSuccessReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgRegisterSuccessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgRegisterSuccessReq_descriptor_;
  metadata.reflection = CSMsgRegisterSuccessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgLoginSuccessReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSMsgLoginSuccessReq::CSMsgLoginSuccessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgLoginSuccessReq::InitAsDefaultInstance() {
}

CSMsgLoginSuccessReq::CSMsgLoginSuccessReq(const CSMsgLoginSuccessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgLoginSuccessReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgLoginSuccessReq::~CSMsgLoginSuccessReq() {
  SharedDtor();
}

void CSMsgLoginSuccessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgLoginSuccessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgLoginSuccessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgLoginSuccessReq_descriptor_;
}

const CSMsgLoginSuccessReq& CSMsgLoginSuccessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgLoginSuccessReq* CSMsgLoginSuccessReq::default_instance_ = NULL;

CSMsgLoginSuccessReq* CSMsgLoginSuccessReq::New() const {
  return new CSMsgLoginSuccessReq;
}

void CSMsgLoginSuccessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgLoginSuccessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgLoginSuccessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgLoginSuccessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgLoginSuccessReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgLoginSuccessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgLoginSuccessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgLoginSuccessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgLoginSuccessReq::MergeFrom(const CSMsgLoginSuccessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgLoginSuccessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgLoginSuccessReq::CopyFrom(const CSMsgLoginSuccessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgLoginSuccessReq::IsInitialized() const {

  return true;
}

void CSMsgLoginSuccessReq::Swap(CSMsgLoginSuccessReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgLoginSuccessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgLoginSuccessReq_descriptor_;
  metadata.reflection = CSMsgLoginSuccessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgQuitReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSMsgQuitReq::CSMsgQuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgQuitReq::InitAsDefaultInstance() {
}

CSMsgQuitReq::CSMsgQuitReq(const CSMsgQuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgQuitReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgQuitReq::~CSMsgQuitReq() {
  SharedDtor();
}

void CSMsgQuitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgQuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgQuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgQuitReq_descriptor_;
}

const CSMsgQuitReq& CSMsgQuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgQuitReq* CSMsgQuitReq::default_instance_ = NULL;

CSMsgQuitReq* CSMsgQuitReq::New() const {
  return new CSMsgQuitReq;
}

void CSMsgQuitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgQuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgQuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgQuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgQuitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgQuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgQuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgQuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgQuitReq::MergeFrom(const CSMsgQuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgQuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgQuitReq::CopyFrom(const CSMsgQuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgQuitReq::IsInitialized() const {

  return true;
}

void CSMsgQuitReq::Swap(CSMsgQuitReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgQuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgQuitReq_descriptor_;
  metadata.reflection = CSMsgQuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgRoleInfo::kUidFieldNumber;
const int CSMsgRoleInfo::kGradeFieldNumber;
const int CSMsgRoleInfo::kRankFieldNumber;
const int CSMsgRoleInfo::kStatusFieldNumber;
const int CSMsgRoleInfo::kVipFieldNumber;
const int CSMsgRoleInfo::kHeadFieldNumber;
const int CSMsgRoleInfo::kChatFrameFieldNumber;
const int CSMsgRoleInfo::kNameFieldNumber;
#endif  // !_MSC_VER

CSMsgRoleInfo::CSMsgRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgRoleInfo::InitAsDefaultInstance() {
}

CSMsgRoleInfo::CSMsgRoleInfo(const CSMsgRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  rank_ = 0u;
  status_ = 0u;
  vip_ = 0u;
  head_ = 0u;
  chatframe_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgRoleInfo::~CSMsgRoleInfo() {
  SharedDtor();
}

void CSMsgRoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgRoleInfo_descriptor_;
}

const CSMsgRoleInfo& CSMsgRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgRoleInfo* CSMsgRoleInfo::default_instance_ = NULL;

CSMsgRoleInfo* CSMsgRoleInfo::New() const {
  return new CSMsgRoleInfo;
}

void CSMsgRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
    rank_ = 0u;
    status_ = 0u;
    vip_ = 0u;
    head_ = 0u;
    chatframe_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Grade;
        break;
      }

      // optional uint32 Grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Vip;
        break;
      }

      // optional uint32 Vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Head;
        break;
      }

      // optional uint32 Head = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ChatFrame;
        break;
      }

      // optional uint32 ChatFrame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChatFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatframe_)));
          set_has_chatframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Name;
        break;
      }

      // optional string Name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 Status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional uint32 Vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  // optional uint32 Head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->head(), output);
  }

  // optional uint32 ChatFrame = 7;
  if (has_chatframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->chatframe(), output);
  }

  // optional string Name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 Status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional uint32 Vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  // optional uint32 Head = 6;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->head(), target);
  }

  // optional uint32 ChatFrame = 7;
  if (has_chatframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->chatframe(), target);
  }

  // optional string Name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 Vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint32 Head = 6;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 ChatFrame = 7;
    if (has_chatframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatframe());
    }

    // optional string Name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgRoleInfo::MergeFrom(const CSMsgRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_chatframe()) {
      set_chatframe(from.chatframe());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgRoleInfo::CopyFrom(const CSMsgRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgRoleInfo::IsInitialized() const {

  return true;
}

void CSMsgRoleInfo::Swap(CSMsgRoleInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(grade_, other->grade_);
    std::swap(rank_, other->rank_);
    std::swap(status_, other->status_);
    std::swap(vip_, other->vip_);
    std::swap(head_, other->head_);
    std::swap(chatframe_, other->chatframe_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgRoleInfo_descriptor_;
  metadata.reflection = CSMsgRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgRoleInfoList::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

CSMsgRoleInfoList::CSMsgRoleInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgRoleInfoList::InitAsDefaultInstance() {
}

CSMsgRoleInfoList::CSMsgRoleInfoList(const CSMsgRoleInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgRoleInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgRoleInfoList::~CSMsgRoleInfoList() {
  SharedDtor();
}

void CSMsgRoleInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgRoleInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgRoleInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgRoleInfoList_descriptor_;
}

const CSMsgRoleInfoList& CSMsgRoleInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgRoleInfoList* CSMsgRoleInfoList::default_instance_ = NULL;

CSMsgRoleInfoList* CSMsgRoleInfoList::New() const {
  return new CSMsgRoleInfoList;
}

void CSMsgRoleInfoList::Clear() {
  roleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgRoleInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMsgRoleInfo RoleInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_RoleInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgRoleInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMsgRoleInfo RoleInfo = 1;
  for (int i = 0; i < this->roleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgRoleInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMsgRoleInfo RoleInfo = 1;
  for (int i = 0; i < this->roleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgRoleInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .CSMsgRoleInfo RoleInfo = 1;
  total_size += 1 * this->roleinfo_size();
  for (int i = 0; i < this->roleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgRoleInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgRoleInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgRoleInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgRoleInfoList::MergeFrom(const CSMsgRoleInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleinfo_.MergeFrom(from.roleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgRoleInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgRoleInfoList::CopyFrom(const CSMsgRoleInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgRoleInfoList::IsInitialized() const {

  return true;
}

void CSMsgRoleInfoList::Swap(CSMsgRoleInfoList* other) {
  if (other != this) {
    roleinfo_.Swap(&other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgRoleInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgRoleInfoList_descriptor_;
  metadata.reflection = CSMsgRoleInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgLoginSuccessRsp::kFriendListFieldNumber;
#endif  // !_MSC_VER

CSMsgLoginSuccessRsp::CSMsgLoginSuccessRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgLoginSuccessRsp::InitAsDefaultInstance() {
  friendlist_ = const_cast< ::CSMsgRoleInfoList*>(&::CSMsgRoleInfoList::default_instance());
}

CSMsgLoginSuccessRsp::CSMsgLoginSuccessRsp(const CSMsgLoginSuccessRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgLoginSuccessRsp::SharedCtor() {
  _cached_size_ = 0;
  friendlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgLoginSuccessRsp::~CSMsgLoginSuccessRsp() {
  SharedDtor();
}

void CSMsgLoginSuccessRsp::SharedDtor() {
  if (this != default_instance_) {
    delete friendlist_;
  }
}

void CSMsgLoginSuccessRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgLoginSuccessRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgLoginSuccessRsp_descriptor_;
}

const CSMsgLoginSuccessRsp& CSMsgLoginSuccessRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgLoginSuccessRsp* CSMsgLoginSuccessRsp::default_instance_ = NULL;

CSMsgLoginSuccessRsp* CSMsgLoginSuccessRsp::New() const {
  return new CSMsgLoginSuccessRsp;
}

void CSMsgLoginSuccessRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendlist()) {
      if (friendlist_ != NULL) friendlist_->::CSMsgRoleInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgLoginSuccessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMsgRoleInfoList FriendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgLoginSuccessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMsgRoleInfoList FriendList = 1;
  if (has_friendlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgLoginSuccessRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMsgRoleInfoList FriendList = 1;
  if (has_friendlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgLoginSuccessRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMsgRoleInfoList FriendList = 1;
    if (has_friendlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgLoginSuccessRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgLoginSuccessRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgLoginSuccessRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgLoginSuccessRsp::MergeFrom(const CSMsgLoginSuccessRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendlist()) {
      mutable_friendlist()->::CSMsgRoleInfoList::MergeFrom(from.friendlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgLoginSuccessRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgLoginSuccessRsp::CopyFrom(const CSMsgLoginSuccessRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgLoginSuccessRsp::IsInitialized() const {

  return true;
}

void CSMsgLoginSuccessRsp::Swap(CSMsgLoginSuccessRsp* other) {
  if (other != this) {
    std::swap(friendlist_, other->friendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgLoginSuccessRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgLoginSuccessRsp_descriptor_;
  metadata.reflection = CSMsgLoginSuccessRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgAskAddFriendReq::kNameFieldNumber;
const int CSMsgAskAddFriendReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSMsgAskAddFriendReq::CSMsgAskAddFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgAskAddFriendReq::InitAsDefaultInstance() {
}

CSMsgAskAddFriendReq::CSMsgAskAddFriendReq(const CSMsgAskAddFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgAskAddFriendReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgAskAddFriendReq::~CSMsgAskAddFriendReq() {
  SharedDtor();
}

void CSMsgAskAddFriendReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgAskAddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgAskAddFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgAskAddFriendReq_descriptor_;
}

const CSMsgAskAddFriendReq& CSMsgAskAddFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgAskAddFriendReq* CSMsgAskAddFriendReq::default_instance_ = NULL;

CSMsgAskAddFriendReq* CSMsgAskAddFriendReq::New() const {
  return new CSMsgAskAddFriendReq;
}

void CSMsgAskAddFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgAskAddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgAskAddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgAskAddFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgAskAddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgAskAddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgAskAddFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgAskAddFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgAskAddFriendReq::MergeFrom(const CSMsgAskAddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgAskAddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgAskAddFriendReq::CopyFrom(const CSMsgAskAddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgAskAddFriendReq::IsInitialized() const {

  return true;
}

void CSMsgAskAddFriendReq::Swap(CSMsgAskAddFriendReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgAskAddFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgAskAddFriendReq_descriptor_;
  metadata.reflection = CSMsgAskAddFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgAskAddFriendRsp::kUidFieldNumber;
const int CSMsgAskAddFriendRsp::kFriendNameFieldNumber;
#endif  // !_MSC_VER

CSMsgAskAddFriendRsp::CSMsgAskAddFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgAskAddFriendRsp::InitAsDefaultInstance() {
}

CSMsgAskAddFriendRsp::CSMsgAskAddFriendRsp(const CSMsgAskAddFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgAskAddFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgAskAddFriendRsp::~CSMsgAskAddFriendRsp() {
  SharedDtor();
}

void CSMsgAskAddFriendRsp::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgAskAddFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgAskAddFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgAskAddFriendRsp_descriptor_;
}

const CSMsgAskAddFriendRsp& CSMsgAskAddFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgAskAddFriendRsp* CSMsgAskAddFriendRsp::default_instance_ = NULL;

CSMsgAskAddFriendRsp* CSMsgAskAddFriendRsp::New() const {
  return new CSMsgAskAddFriendRsp;
}

void CSMsgAskAddFriendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgAskAddFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FriendName;
        break;
      }

      // optional string FriendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FriendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgAskAddFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string FriendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgAskAddFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string FriendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgAskAddFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string FriendName = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgAskAddFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgAskAddFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgAskAddFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgAskAddFriendRsp::MergeFrom(const CSMsgAskAddFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgAskAddFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgAskAddFriendRsp::CopyFrom(const CSMsgAskAddFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgAskAddFriendRsp::IsInitialized() const {

  return true;
}

void CSMsgAskAddFriendRsp::Swap(CSMsgAskAddFriendRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(friendname_, other->friendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgAskAddFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgAskAddFriendRsp_descriptor_;
  metadata.reflection = CSMsgAskAddFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgSuccessAddFriendReq::kUid1FieldNumber;
const int CSMsgSuccessAddFriendReq::kUid2FieldNumber;
#endif  // !_MSC_VER

CSMsgSuccessAddFriendReq::CSMsgSuccessAddFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgSuccessAddFriendReq::InitAsDefaultInstance() {
}

CSMsgSuccessAddFriendReq::CSMsgSuccessAddFriendReq(const CSMsgSuccessAddFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgSuccessAddFriendReq::SharedCtor() {
  _cached_size_ = 0;
  uid1_ = GOOGLE_ULONGLONG(0);
  uid2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgSuccessAddFriendReq::~CSMsgSuccessAddFriendReq() {
  SharedDtor();
}

void CSMsgSuccessAddFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgSuccessAddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgSuccessAddFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgSuccessAddFriendReq_descriptor_;
}

const CSMsgSuccessAddFriendReq& CSMsgSuccessAddFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgSuccessAddFriendReq* CSMsgSuccessAddFriendReq::default_instance_ = NULL;

CSMsgSuccessAddFriendReq* CSMsgSuccessAddFriendReq::New() const {
  return new CSMsgSuccessAddFriendReq;
}

void CSMsgSuccessAddFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid1_ = GOOGLE_ULONGLONG(0);
    uid2_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgSuccessAddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid2;
        break;
      }

      // optional uint64 Uid2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgSuccessAddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid1(), output);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgSuccessAddFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid1(), target);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgSuccessAddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid1 = 1;
    if (has_uid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid1());
    }

    // optional uint64 Uid2 = 2;
    if (has_uid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgSuccessAddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgSuccessAddFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgSuccessAddFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgSuccessAddFriendReq::MergeFrom(const CSMsgSuccessAddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgSuccessAddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgSuccessAddFriendReq::CopyFrom(const CSMsgSuccessAddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgSuccessAddFriendReq::IsInitialized() const {

  return true;
}

void CSMsgSuccessAddFriendReq::Swap(CSMsgSuccessAddFriendReq* other) {
  if (other != this) {
    std::swap(uid1_, other->uid1_);
    std::swap(uid2_, other->uid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgSuccessAddFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgSuccessAddFriendReq_descriptor_;
  metadata.reflection = CSMsgSuccessAddFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgSuccessAddFriendRsp::kFriendRoleInfoFieldNumber;
#endif  // !_MSC_VER

CSMsgSuccessAddFriendRsp::CSMsgSuccessAddFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgSuccessAddFriendRsp::InitAsDefaultInstance() {
  friendroleinfo_ = const_cast< ::CSMsgRoleInfo*>(&::CSMsgRoleInfo::default_instance());
}

CSMsgSuccessAddFriendRsp::CSMsgSuccessAddFriendRsp(const CSMsgSuccessAddFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgSuccessAddFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  friendroleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgSuccessAddFriendRsp::~CSMsgSuccessAddFriendRsp() {
  SharedDtor();
}

void CSMsgSuccessAddFriendRsp::SharedDtor() {
  if (this != default_instance_) {
    delete friendroleinfo_;
  }
}

void CSMsgSuccessAddFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgSuccessAddFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgSuccessAddFriendRsp_descriptor_;
}

const CSMsgSuccessAddFriendRsp& CSMsgSuccessAddFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgSuccessAddFriendRsp* CSMsgSuccessAddFriendRsp::default_instance_ = NULL;

CSMsgSuccessAddFriendRsp* CSMsgSuccessAddFriendRsp::New() const {
  return new CSMsgSuccessAddFriendRsp;
}

void CSMsgSuccessAddFriendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendroleinfo()) {
      if (friendroleinfo_ != NULL) friendroleinfo_->::CSMsgRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgSuccessAddFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMsgRoleInfo FriendRoleInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendroleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgSuccessAddFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMsgRoleInfo FriendRoleInfo = 1;
  if (has_friendroleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendroleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgSuccessAddFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMsgRoleInfo FriendRoleInfo = 1;
  if (has_friendroleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendroleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgSuccessAddFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMsgRoleInfo FriendRoleInfo = 1;
    if (has_friendroleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendroleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgSuccessAddFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgSuccessAddFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgSuccessAddFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgSuccessAddFriendRsp::MergeFrom(const CSMsgSuccessAddFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleinfo()) {
      mutable_friendroleinfo()->::CSMsgRoleInfo::MergeFrom(from.friendroleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgSuccessAddFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgSuccessAddFriendRsp::CopyFrom(const CSMsgSuccessAddFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgSuccessAddFriendRsp::IsInitialized() const {

  return true;
}

void CSMsgSuccessAddFriendRsp::Swap(CSMsgSuccessAddFriendRsp* other) {
  if (other != this) {
    std::swap(friendroleinfo_, other->friendroleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgSuccessAddFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgSuccessAddFriendRsp_descriptor_;
  metadata.reflection = CSMsgSuccessAddFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgDeleteFriendReq::kUid1FieldNumber;
const int CSMsgDeleteFriendReq::kUid2FieldNumber;
#endif  // !_MSC_VER

CSMsgDeleteFriendReq::CSMsgDeleteFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgDeleteFriendReq::InitAsDefaultInstance() {
}

CSMsgDeleteFriendReq::CSMsgDeleteFriendReq(const CSMsgDeleteFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgDeleteFriendReq::SharedCtor() {
  _cached_size_ = 0;
  uid1_ = GOOGLE_ULONGLONG(0);
  uid2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgDeleteFriendReq::~CSMsgDeleteFriendReq() {
  SharedDtor();
}

void CSMsgDeleteFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgDeleteFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgDeleteFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgDeleteFriendReq_descriptor_;
}

const CSMsgDeleteFriendReq& CSMsgDeleteFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgDeleteFriendReq* CSMsgDeleteFriendReq::default_instance_ = NULL;

CSMsgDeleteFriendReq* CSMsgDeleteFriendReq::New() const {
  return new CSMsgDeleteFriendReq;
}

void CSMsgDeleteFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid1_ = GOOGLE_ULONGLONG(0);
    uid2_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgDeleteFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid2;
        break;
      }

      // optional uint64 Uid2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgDeleteFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid1(), output);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgDeleteFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid1(), target);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgDeleteFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid1 = 1;
    if (has_uid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid1());
    }

    // optional uint64 Uid2 = 2;
    if (has_uid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgDeleteFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgDeleteFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgDeleteFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgDeleteFriendReq::MergeFrom(const CSMsgDeleteFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgDeleteFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgDeleteFriendReq::CopyFrom(const CSMsgDeleteFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgDeleteFriendReq::IsInitialized() const {

  return true;
}

void CSMsgDeleteFriendReq::Swap(CSMsgDeleteFriendReq* other) {
  if (other != this) {
    std::swap(uid1_, other->uid1_);
    std::swap(uid2_, other->uid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgDeleteFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgDeleteFriendReq_descriptor_;
  metadata.reflection = CSMsgDeleteFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgDeleteFriendRsp::kUidFieldNumber;
#endif  // !_MSC_VER

CSMsgDeleteFriendRsp::CSMsgDeleteFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgDeleteFriendRsp::InitAsDefaultInstance() {
}

CSMsgDeleteFriendRsp::CSMsgDeleteFriendRsp(const CSMsgDeleteFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgDeleteFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgDeleteFriendRsp::~CSMsgDeleteFriendRsp() {
  SharedDtor();
}

void CSMsgDeleteFriendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgDeleteFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgDeleteFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgDeleteFriendRsp_descriptor_;
}

const CSMsgDeleteFriendRsp& CSMsgDeleteFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgDeleteFriendRsp* CSMsgDeleteFriendRsp::default_instance_ = NULL;

CSMsgDeleteFriendRsp* CSMsgDeleteFriendRsp::New() const {
  return new CSMsgDeleteFriendRsp;
}

void CSMsgDeleteFriendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgDeleteFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgDeleteFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgDeleteFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgDeleteFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgDeleteFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgDeleteFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgDeleteFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgDeleteFriendRsp::MergeFrom(const CSMsgDeleteFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgDeleteFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgDeleteFriendRsp::CopyFrom(const CSMsgDeleteFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgDeleteFriendRsp::IsInitialized() const {

  return true;
}

void CSMsgDeleteFriendRsp::Swap(CSMsgDeleteFriendRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgDeleteFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgDeleteFriendRsp_descriptor_;
  metadata.reflection = CSMsgDeleteFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgSendChatReq::kUid1FieldNumber;
const int CSMsgSendChatReq::kUid2FieldNumber;
const int CSMsgSendChatReq::kInformationFieldNumber;
#endif  // !_MSC_VER

CSMsgSendChatReq::CSMsgSendChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgSendChatReq::InitAsDefaultInstance() {
}

CSMsgSendChatReq::CSMsgSendChatReq(const CSMsgSendChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgSendChatReq::SharedCtor() {
  _cached_size_ = 0;
  uid1_ = GOOGLE_ULONGLONG(0);
  uid2_ = GOOGLE_ULONGLONG(0);
  information_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgSendChatReq::~CSMsgSendChatReq() {
  SharedDtor();
}

void CSMsgSendChatReq::SharedDtor() {
  if (information_ != &::google::protobuf::internal::kEmptyString) {
    delete information_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgSendChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgSendChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgSendChatReq_descriptor_;
}

const CSMsgSendChatReq& CSMsgSendChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgSendChatReq* CSMsgSendChatReq::default_instance_ = NULL;

CSMsgSendChatReq* CSMsgSendChatReq::New() const {
  return new CSMsgSendChatReq;
}

void CSMsgSendChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid1_ = GOOGLE_ULONGLONG(0);
    uid2_ = GOOGLE_ULONGLONG(0);
    if (has_information()) {
      if (information_ != &::google::protobuf::internal::kEmptyString) {
        information_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgSendChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid2;
        break;
      }

      // optional uint64 Uid2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_information;
        break;
      }

      // optional string information = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_information()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->information().data(), this->information().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgSendChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid1(), output);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid2(), output);
  }

  // optional string information = 3;
  if (has_information()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->information(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgSendChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid1(), target);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid2(), target);
  }

  // optional string information = 3;
  if (has_information()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->information(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgSendChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid1 = 1;
    if (has_uid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid1());
    }

    // optional uint64 Uid2 = 2;
    if (has_uid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid2());
    }

    // optional string information = 3;
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->information());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgSendChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgSendChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgSendChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgSendChatReq::MergeFrom(const CSMsgSendChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
    if (from.has_information()) {
      set_information(from.information());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgSendChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgSendChatReq::CopyFrom(const CSMsgSendChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgSendChatReq::IsInitialized() const {

  return true;
}

void CSMsgSendChatReq::Swap(CSMsgSendChatReq* other) {
  if (other != this) {
    std::swap(uid1_, other->uid1_);
    std::swap(uid2_, other->uid2_);
    std::swap(information_, other->information_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgSendChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgSendChatReq_descriptor_;
  metadata.reflection = CSMsgSendChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgSendChatRsp::kUidFieldNumber;
const int CSMsgSendChatRsp::kInformationFieldNumber;
#endif  // !_MSC_VER

CSMsgSendChatRsp::CSMsgSendChatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgSendChatRsp::InitAsDefaultInstance() {
}

CSMsgSendChatRsp::CSMsgSendChatRsp(const CSMsgSendChatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgSendChatRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  information_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgSendChatRsp::~CSMsgSendChatRsp() {
  SharedDtor();
}

void CSMsgSendChatRsp::SharedDtor() {
  if (information_ != &::google::protobuf::internal::kEmptyString) {
    delete information_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgSendChatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgSendChatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgSendChatRsp_descriptor_;
}

const CSMsgSendChatRsp& CSMsgSendChatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgSendChatRsp* CSMsgSendChatRsp::default_instance_ = NULL;

CSMsgSendChatRsp* CSMsgSendChatRsp::New() const {
  return new CSMsgSendChatRsp;
}

void CSMsgSendChatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_information()) {
      if (information_ != &::google::protobuf::internal::kEmptyString) {
        information_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgSendChatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_information;
        break;
      }

      // optional string information = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_information()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->information().data(), this->information().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgSendChatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string information = 2;
  if (has_information()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->information(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgSendChatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string information = 2;
  if (has_information()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->information(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgSendChatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string information = 2;
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->information());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgSendChatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgSendChatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgSendChatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgSendChatRsp::MergeFrom(const CSMsgSendChatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_information()) {
      set_information(from.information());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgSendChatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgSendChatRsp::CopyFrom(const CSMsgSendChatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgSendChatRsp::IsInitialized() const {

  return true;
}

void CSMsgSendChatRsp::Swap(CSMsgSendChatRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(information_, other->information_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgSendChatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgSendChatRsp_descriptor_;
  metadata.reflection = CSMsgSendChatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgFindNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

CSMsgFindNameReq::CSMsgFindNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgFindNameReq::InitAsDefaultInstance() {
}

CSMsgFindNameReq::CSMsgFindNameReq(const CSMsgFindNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgFindNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgFindNameReq::~CSMsgFindNameReq() {
  SharedDtor();
}

void CSMsgFindNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSMsgFindNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgFindNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgFindNameReq_descriptor_;
}

const CSMsgFindNameReq& CSMsgFindNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgFindNameReq* CSMsgFindNameReq::default_instance_ = NULL;

CSMsgFindNameReq* CSMsgFindNameReq::New() const {
  return new CSMsgFindNameReq;
}

void CSMsgFindNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgFindNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgFindNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgFindNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgFindNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgFindNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgFindNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgFindNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgFindNameReq::MergeFrom(const CSMsgFindNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgFindNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgFindNameReq::CopyFrom(const CSMsgFindNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgFindNameReq::IsInitialized() const {

  return true;
}

void CSMsgFindNameReq::Swap(CSMsgFindNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgFindNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgFindNameReq_descriptor_;
  metadata.reflection = CSMsgFindNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgFindNameRsp::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

CSMsgFindNameRsp::CSMsgFindNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgFindNameRsp::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::CSMsgRoleInfo*>(&::CSMsgRoleInfo::default_instance());
}

CSMsgFindNameRsp::CSMsgFindNameRsp(const CSMsgFindNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgFindNameRsp::SharedCtor() {
  _cached_size_ = 0;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgFindNameRsp::~CSMsgFindNameRsp() {
  SharedDtor();
}

void CSMsgFindNameRsp::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

void CSMsgFindNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgFindNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgFindNameRsp_descriptor_;
}

const CSMsgFindNameRsp& CSMsgFindNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgFindNameRsp* CSMsgFindNameRsp::default_instance_ = NULL;

CSMsgFindNameRsp* CSMsgFindNameRsp::New() const {
  return new CSMsgFindNameRsp;
}

void CSMsgFindNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::CSMsgRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgFindNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMsgRoleInfo RoleInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgFindNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMsgRoleInfo RoleInfo = 1;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgFindNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMsgRoleInfo RoleInfo = 1;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgFindNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMsgRoleInfo RoleInfo = 1;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgFindNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgFindNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgFindNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgFindNameRsp::MergeFrom(const CSMsgFindNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::CSMsgRoleInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgFindNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgFindNameRsp::CopyFrom(const CSMsgFindNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgFindNameRsp::IsInitialized() const {

  return true;
}

void CSMsgFindNameRsp::Swap(CSMsgFindNameRsp* other) {
  if (other != this) {
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgFindNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgFindNameRsp_descriptor_;
  metadata.reflection = CSMsgFindNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgChangeStatusReq::kTypeFieldNumber;
const int CSMsgChangeStatusReq::kValueFieldNumber;
const int CSMsgChangeStatusReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSMsgChangeStatusReq::CSMsgChangeStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgChangeStatusReq::InitAsDefaultInstance() {
}

CSMsgChangeStatusReq::CSMsgChangeStatusReq(const CSMsgChangeStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgChangeStatusReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgChangeStatusReq::~CSMsgChangeStatusReq() {
  SharedDtor();
}

void CSMsgChangeStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgChangeStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgChangeStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgChangeStatusReq_descriptor_;
}

const CSMsgChangeStatusReq& CSMsgChangeStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgChangeStatusReq* CSMsgChangeStatusReq::default_instance_ = NULL;

CSMsgChangeStatusReq* CSMsgChangeStatusReq::New() const {
  return new CSMsgChangeStatusReq;
}

void CSMsgChangeStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgChangeStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgChangeStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgChangeStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgChangeStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgChangeStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgChangeStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgChangeStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgChangeStatusReq::MergeFrom(const CSMsgChangeStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgChangeStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgChangeStatusReq::CopyFrom(const CSMsgChangeStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgChangeStatusReq::IsInitialized() const {

  return true;
}

void CSMsgChangeStatusReq::Swap(CSMsgChangeStatusReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgChangeStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgChangeStatusReq_descriptor_;
  metadata.reflection = CSMsgChangeStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgChangeStatusRsp::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

CSMsgChangeStatusRsp::CSMsgChangeStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgChangeStatusRsp::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::CSMsgRoleInfo*>(&::CSMsgRoleInfo::default_instance());
}

CSMsgChangeStatusRsp::CSMsgChangeStatusRsp(const CSMsgChangeStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgChangeStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgChangeStatusRsp::~CSMsgChangeStatusRsp() {
  SharedDtor();
}

void CSMsgChangeStatusRsp::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

void CSMsgChangeStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgChangeStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgChangeStatusRsp_descriptor_;
}

const CSMsgChangeStatusRsp& CSMsgChangeStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgChangeStatusRsp* CSMsgChangeStatusRsp::default_instance_ = NULL;

CSMsgChangeStatusRsp* CSMsgChangeStatusRsp::New() const {
  return new CSMsgChangeStatusRsp;
}

void CSMsgChangeStatusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::CSMsgRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgChangeStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMsgRoleInfo RoleInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgChangeStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMsgRoleInfo RoleInfo = 1;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgChangeStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMsgRoleInfo RoleInfo = 1;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgChangeStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMsgRoleInfo RoleInfo = 1;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgChangeStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgChangeStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgChangeStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgChangeStatusRsp::MergeFrom(const CSMsgChangeStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::CSMsgRoleInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgChangeStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgChangeStatusRsp::CopyFrom(const CSMsgChangeStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgChangeStatusRsp::IsInitialized() const {

  return true;
}

void CSMsgChangeStatusRsp::Swap(CSMsgChangeStatusRsp* other) {
  if (other != this) {
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgChangeStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgChangeStatusRsp_descriptor_;
  metadata.reflection = CSMsgChangeStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgConnectSuccessReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSMsgConnectSuccessReq::CSMsgConnectSuccessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgConnectSuccessReq::InitAsDefaultInstance() {
}

CSMsgConnectSuccessReq::CSMsgConnectSuccessReq(const CSMsgConnectSuccessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgConnectSuccessReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgConnectSuccessReq::~CSMsgConnectSuccessReq() {
  SharedDtor();
}

void CSMsgConnectSuccessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgConnectSuccessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgConnectSuccessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgConnectSuccessReq_descriptor_;
}

const CSMsgConnectSuccessReq& CSMsgConnectSuccessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgConnectSuccessReq* CSMsgConnectSuccessReq::default_instance_ = NULL;

CSMsgConnectSuccessReq* CSMsgConnectSuccessReq::New() const {
  return new CSMsgConnectSuccessReq;
}

void CSMsgConnectSuccessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgConnectSuccessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgConnectSuccessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgConnectSuccessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgConnectSuccessReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgConnectSuccessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgConnectSuccessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgConnectSuccessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgConnectSuccessReq::MergeFrom(const CSMsgConnectSuccessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgConnectSuccessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgConnectSuccessReq::CopyFrom(const CSMsgConnectSuccessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgConnectSuccessReq::IsInitialized() const {

  return true;
}

void CSMsgConnectSuccessReq::Swap(CSMsgConnectSuccessReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgConnectSuccessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgConnectSuccessReq_descriptor_;
  metadata.reflection = CSMsgConnectSuccessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatReqParam::kRegisterSuccessReqFieldNumber;
const int CSChatReqParam::kLoginSuccessReqFieldNumber;
const int CSChatReqParam::kMsgQuitReqFieldNumber;
const int CSChatReqParam::kAskAddFriendReqFieldNumber;
const int CSChatReqParam::kSuccessAddFriendReqFieldNumber;
const int CSChatReqParam::kDeleteFriendReqFieldNumber;
const int CSChatReqParam::kSendChatReqFieldNumber;
const int CSChatReqParam::kFindNameReqFieldNumber;
const int CSChatReqParam::kChangeStatusReqFieldNumber;
const int CSChatReqParam::kConnectSuccessReqFieldNumber;
#endif  // !_MSC_VER

CSChatReqParam::CSChatReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSChatReqParam::InitAsDefaultInstance() {
  registersuccessreq_ = const_cast< ::CSMsgRegisterSuccessReq*>(&::CSMsgRegisterSuccessReq::default_instance());
  loginsuccessreq_ = const_cast< ::CSMsgLoginSuccessReq*>(&::CSMsgLoginSuccessReq::default_instance());
  msgquitreq_ = const_cast< ::CSMsgQuitReq*>(&::CSMsgQuitReq::default_instance());
  askaddfriendreq_ = const_cast< ::CSMsgAskAddFriendReq*>(&::CSMsgAskAddFriendReq::default_instance());
  successaddfriendreq_ = const_cast< ::CSMsgSuccessAddFriendReq*>(&::CSMsgSuccessAddFriendReq::default_instance());
  deletefriendreq_ = const_cast< ::CSMsgDeleteFriendReq*>(&::CSMsgDeleteFriendReq::default_instance());
  sendchatreq_ = const_cast< ::CSMsgSendChatReq*>(&::CSMsgSendChatReq::default_instance());
  findnamereq_ = const_cast< ::CSMsgFindNameReq*>(&::CSMsgFindNameReq::default_instance());
  changestatusreq_ = const_cast< ::CSMsgChangeStatusReq*>(&::CSMsgChangeStatusReq::default_instance());
  connectsuccessreq_ = const_cast< ::CSMsgConnectSuccessReq*>(&::CSMsgConnectSuccessReq::default_instance());
}

CSChatReqParam::CSChatReqParam(const CSChatReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatReqParam::SharedCtor() {
  _cached_size_ = 0;
  registersuccessreq_ = NULL;
  loginsuccessreq_ = NULL;
  msgquitreq_ = NULL;
  askaddfriendreq_ = NULL;
  successaddfriendreq_ = NULL;
  deletefriendreq_ = NULL;
  sendchatreq_ = NULL;
  findnamereq_ = NULL;
  changestatusreq_ = NULL;
  connectsuccessreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatReqParam::~CSChatReqParam() {
  SharedDtor();
}

void CSChatReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete registersuccessreq_;
    delete loginsuccessreq_;
    delete msgquitreq_;
    delete askaddfriendreq_;
    delete successaddfriendreq_;
    delete deletefriendreq_;
    delete sendchatreq_;
    delete findnamereq_;
    delete changestatusreq_;
    delete connectsuccessreq_;
  }
}

void CSChatReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChatReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChatReqParam_descriptor_;
}

const CSChatReqParam& CSChatReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSChatReqParam* CSChatReqParam::default_instance_ = NULL;

CSChatReqParam* CSChatReqParam::New() const {
  return new CSChatReqParam;
}

void CSChatReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_registersuccessreq()) {
      if (registersuccessreq_ != NULL) registersuccessreq_->::CSMsgRegisterSuccessReq::Clear();
    }
    if (has_loginsuccessreq()) {
      if (loginsuccessreq_ != NULL) loginsuccessreq_->::CSMsgLoginSuccessReq::Clear();
    }
    if (has_msgquitreq()) {
      if (msgquitreq_ != NULL) msgquitreq_->::CSMsgQuitReq::Clear();
    }
    if (has_askaddfriendreq()) {
      if (askaddfriendreq_ != NULL) askaddfriendreq_->::CSMsgAskAddFriendReq::Clear();
    }
    if (has_successaddfriendreq()) {
      if (successaddfriendreq_ != NULL) successaddfriendreq_->::CSMsgSuccessAddFriendReq::Clear();
    }
    if (has_deletefriendreq()) {
      if (deletefriendreq_ != NULL) deletefriendreq_->::CSMsgDeleteFriendReq::Clear();
    }
    if (has_sendchatreq()) {
      if (sendchatreq_ != NULL) sendchatreq_->::CSMsgSendChatReq::Clear();
    }
    if (has_findnamereq()) {
      if (findnamereq_ != NULL) findnamereq_->::CSMsgFindNameReq::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_changestatusreq()) {
      if (changestatusreq_ != NULL) changestatusreq_->::CSMsgChangeStatusReq::Clear();
    }
    if (has_connectsuccessreq()) {
      if (connectsuccessreq_ != NULL) connectsuccessreq_->::CSMsgConnectSuccessReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSChatReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMsgRegisterSuccessReq RegisterSuccessReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registersuccessreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LoginSuccessReq;
        break;
      }

      // optional .CSMsgLoginSuccessReq LoginSuccessReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginSuccessReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginsuccessreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MsgQuitReq;
        break;
      }

      // optional .CSMsgQuitReq MsgQuitReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgQuitReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgquitreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AskAddFriendReq;
        break;
      }

      // optional .CSMsgAskAddFriendReq AskAddFriendReq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AskAddFriendReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askaddfriendreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SuccessAddFriendReq;
        break;
      }

      // optional .CSMsgSuccessAddFriendReq SuccessAddFriendReq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuccessAddFriendReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_successaddfriendreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DeleteFriendReq;
        break;
      }

      // optional .CSMsgDeleteFriendReq DeleteFriendReq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeleteFriendReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletefriendreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SendChatReq;
        break;
      }

      // optional .CSMsgSendChatReq SendChatReq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SendChatReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendchatreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_FindNameReq;
        break;
      }

      // optional .CSMsgFindNameReq FindNameReq = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FindNameReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_findnamereq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ChangeStatusReq;
        break;
      }

      // optional .CSMsgChangeStatusReq ChangeStatusReq = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeStatusReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changestatusreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ConnectSuccessReq;
        break;
      }

      // optional .CSMsgConnectSuccessReq ConnectSuccessReq = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectSuccessReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectsuccessreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMsgRegisterSuccessReq RegisterSuccessReq = 1;
  if (has_registersuccessreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->registersuccessreq(), output);
  }

  // optional .CSMsgLoginSuccessReq LoginSuccessReq = 2;
  if (has_loginsuccessreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginsuccessreq(), output);
  }

  // optional .CSMsgQuitReq MsgQuitReq = 3;
  if (has_msgquitreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgquitreq(), output);
  }

  // optional .CSMsgAskAddFriendReq AskAddFriendReq = 4;
  if (has_askaddfriendreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->askaddfriendreq(), output);
  }

  // optional .CSMsgSuccessAddFriendReq SuccessAddFriendReq = 5;
  if (has_successaddfriendreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->successaddfriendreq(), output);
  }

  // optional .CSMsgDeleteFriendReq DeleteFriendReq = 6;
  if (has_deletefriendreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deletefriendreq(), output);
  }

  // optional .CSMsgSendChatReq SendChatReq = 7;
  if (has_sendchatreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sendchatreq(), output);
  }

  // optional .CSMsgFindNameReq FindNameReq = 8;
  if (has_findnamereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->findnamereq(), output);
  }

  // optional .CSMsgChangeStatusReq ChangeStatusReq = 9;
  if (has_changestatusreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->changestatusreq(), output);
  }

  // optional .CSMsgConnectSuccessReq ConnectSuccessReq = 10;
  if (has_connectsuccessreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->connectsuccessreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSChatReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMsgRegisterSuccessReq RegisterSuccessReq = 1;
  if (has_registersuccessreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->registersuccessreq(), target);
  }

  // optional .CSMsgLoginSuccessReq LoginSuccessReq = 2;
  if (has_loginsuccessreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginsuccessreq(), target);
  }

  // optional .CSMsgQuitReq MsgQuitReq = 3;
  if (has_msgquitreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgquitreq(), target);
  }

  // optional .CSMsgAskAddFriendReq AskAddFriendReq = 4;
  if (has_askaddfriendreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->askaddfriendreq(), target);
  }

  // optional .CSMsgSuccessAddFriendReq SuccessAddFriendReq = 5;
  if (has_successaddfriendreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->successaddfriendreq(), target);
  }

  // optional .CSMsgDeleteFriendReq DeleteFriendReq = 6;
  if (has_deletefriendreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deletefriendreq(), target);
  }

  // optional .CSMsgSendChatReq SendChatReq = 7;
  if (has_sendchatreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sendchatreq(), target);
  }

  // optional .CSMsgFindNameReq FindNameReq = 8;
  if (has_findnamereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->findnamereq(), target);
  }

  // optional .CSMsgChangeStatusReq ChangeStatusReq = 9;
  if (has_changestatusreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->changestatusreq(), target);
  }

  // optional .CSMsgConnectSuccessReq ConnectSuccessReq = 10;
  if (has_connectsuccessreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->connectsuccessreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSChatReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMsgRegisterSuccessReq RegisterSuccessReq = 1;
    if (has_registersuccessreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registersuccessreq());
    }

    // optional .CSMsgLoginSuccessReq LoginSuccessReq = 2;
    if (has_loginsuccessreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginsuccessreq());
    }

    // optional .CSMsgQuitReq MsgQuitReq = 3;
    if (has_msgquitreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgquitreq());
    }

    // optional .CSMsgAskAddFriendReq AskAddFriendReq = 4;
    if (has_askaddfriendreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askaddfriendreq());
    }

    // optional .CSMsgSuccessAddFriendReq SuccessAddFriendReq = 5;
    if (has_successaddfriendreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->successaddfriendreq());
    }

    // optional .CSMsgDeleteFriendReq DeleteFriendReq = 6;
    if (has_deletefriendreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletefriendreq());
    }

    // optional .CSMsgSendChatReq SendChatReq = 7;
    if (has_sendchatreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendchatreq());
    }

    // optional .CSMsgFindNameReq FindNameReq = 8;
    if (has_findnamereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->findnamereq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CSMsgChangeStatusReq ChangeStatusReq = 9;
    if (has_changestatusreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changestatusreq());
    }

    // optional .CSMsgConnectSuccessReq ConnectSuccessReq = 10;
    if (has_connectsuccessreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectsuccessreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSChatReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSChatReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChatReqParam::MergeFrom(const CSChatReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registersuccessreq()) {
      mutable_registersuccessreq()->::CSMsgRegisterSuccessReq::MergeFrom(from.registersuccessreq());
    }
    if (from.has_loginsuccessreq()) {
      mutable_loginsuccessreq()->::CSMsgLoginSuccessReq::MergeFrom(from.loginsuccessreq());
    }
    if (from.has_msgquitreq()) {
      mutable_msgquitreq()->::CSMsgQuitReq::MergeFrom(from.msgquitreq());
    }
    if (from.has_askaddfriendreq()) {
      mutable_askaddfriendreq()->::CSMsgAskAddFriendReq::MergeFrom(from.askaddfriendreq());
    }
    if (from.has_successaddfriendreq()) {
      mutable_successaddfriendreq()->::CSMsgSuccessAddFriendReq::MergeFrom(from.successaddfriendreq());
    }
    if (from.has_deletefriendreq()) {
      mutable_deletefriendreq()->::CSMsgDeleteFriendReq::MergeFrom(from.deletefriendreq());
    }
    if (from.has_sendchatreq()) {
      mutable_sendchatreq()->::CSMsgSendChatReq::MergeFrom(from.sendchatreq());
    }
    if (from.has_findnamereq()) {
      mutable_findnamereq()->::CSMsgFindNameReq::MergeFrom(from.findnamereq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_changestatusreq()) {
      mutable_changestatusreq()->::CSMsgChangeStatusReq::MergeFrom(from.changestatusreq());
    }
    if (from.has_connectsuccessreq()) {
      mutable_connectsuccessreq()->::CSMsgConnectSuccessReq::MergeFrom(from.connectsuccessreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSChatReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChatReqParam::CopyFrom(const CSChatReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatReqParam::IsInitialized() const {

  return true;
}

void CSChatReqParam::Swap(CSChatReqParam* other) {
  if (other != this) {
    std::swap(registersuccessreq_, other->registersuccessreq_);
    std::swap(loginsuccessreq_, other->loginsuccessreq_);
    std::swap(msgquitreq_, other->msgquitreq_);
    std::swap(askaddfriendreq_, other->askaddfriendreq_);
    std::swap(successaddfriendreq_, other->successaddfriendreq_);
    std::swap(deletefriendreq_, other->deletefriendreq_);
    std::swap(sendchatreq_, other->sendchatreq_);
    std::swap(findnamereq_, other->findnamereq_);
    std::swap(changestatusreq_, other->changestatusreq_);
    std::swap(connectsuccessreq_, other->connectsuccessreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSChatReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChatReqParam_descriptor_;
  metadata.reflection = CSChatReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatRspParam::kMsgLoginSuccessFieldNumber;
const int CSChatRspParam::kRoleInfoFieldNumber;
const int CSChatRspParam::kRoleQuitFieldNumber;
const int CSChatRspParam::kAskAddFriendRspFieldNumber;
const int CSChatRspParam::kSuccessAddFriendRspFieldNumber;
const int CSChatRspParam::kDeleteFriendRspFieldNumber;
const int CSChatRspParam::kSendChatRspFieldNumber;
const int CSChatRspParam::kFindNameRspFieldNumber;
const int CSChatRspParam::kChangeStatusRspFieldNumber;
#endif  // !_MSC_VER

CSChatRspParam::CSChatRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSChatRspParam::InitAsDefaultInstance() {
  msgloginsuccess_ = const_cast< ::CSMsgLoginSuccessRsp*>(&::CSMsgLoginSuccessRsp::default_instance());
  roleinfo_ = const_cast< ::CSMsgRoleInfo*>(&::CSMsgRoleInfo::default_instance());
  rolequit_ = const_cast< ::CSMsgRoleInfo*>(&::CSMsgRoleInfo::default_instance());
  askaddfriendrsp_ = const_cast< ::CSMsgAskAddFriendRsp*>(&::CSMsgAskAddFriendRsp::default_instance());
  successaddfriendrsp_ = const_cast< ::CSMsgSuccessAddFriendRsp*>(&::CSMsgSuccessAddFriendRsp::default_instance());
  deletefriendrsp_ = const_cast< ::CSMsgDeleteFriendRsp*>(&::CSMsgDeleteFriendRsp::default_instance());
  sendchatrsp_ = const_cast< ::CSMsgSendChatRsp*>(&::CSMsgSendChatRsp::default_instance());
  findnamersp_ = const_cast< ::CSMsgFindNameRsp*>(&::CSMsgFindNameRsp::default_instance());
  changestatusrsp_ = const_cast< ::CSMsgChangeStatusRsp*>(&::CSMsgChangeStatusRsp::default_instance());
}

CSChatRspParam::CSChatRspParam(const CSChatRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatRspParam::SharedCtor() {
  _cached_size_ = 0;
  msgloginsuccess_ = NULL;
  roleinfo_ = NULL;
  rolequit_ = NULL;
  askaddfriendrsp_ = NULL;
  successaddfriendrsp_ = NULL;
  deletefriendrsp_ = NULL;
  sendchatrsp_ = NULL;
  findnamersp_ = NULL;
  changestatusrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatRspParam::~CSChatRspParam() {
  SharedDtor();
}

void CSChatRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete msgloginsuccess_;
    delete roleinfo_;
    delete rolequit_;
    delete askaddfriendrsp_;
    delete successaddfriendrsp_;
    delete deletefriendrsp_;
    delete sendchatrsp_;
    delete findnamersp_;
    delete changestatusrsp_;
  }
}

void CSChatRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChatRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChatRspParam_descriptor_;
}

const CSChatRspParam& CSChatRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSChatRspParam* CSChatRspParam::default_instance_ = NULL;

CSChatRspParam* CSChatRspParam::New() const {
  return new CSChatRspParam;
}

void CSChatRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgloginsuccess()) {
      if (msgloginsuccess_ != NULL) msgloginsuccess_->::CSMsgLoginSuccessRsp::Clear();
    }
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::CSMsgRoleInfo::Clear();
    }
    if (has_rolequit()) {
      if (rolequit_ != NULL) rolequit_->::CSMsgRoleInfo::Clear();
    }
    if (has_askaddfriendrsp()) {
      if (askaddfriendrsp_ != NULL) askaddfriendrsp_->::CSMsgAskAddFriendRsp::Clear();
    }
    if (has_successaddfriendrsp()) {
      if (successaddfriendrsp_ != NULL) successaddfriendrsp_->::CSMsgSuccessAddFriendRsp::Clear();
    }
    if (has_deletefriendrsp()) {
      if (deletefriendrsp_ != NULL) deletefriendrsp_->::CSMsgDeleteFriendRsp::Clear();
    }
    if (has_sendchatrsp()) {
      if (sendchatrsp_ != NULL) sendchatrsp_->::CSMsgSendChatRsp::Clear();
    }
    if (has_findnamersp()) {
      if (findnamersp_ != NULL) findnamersp_->::CSMsgFindNameRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_changestatusrsp()) {
      if (changestatusrsp_ != NULL) changestatusrsp_->::CSMsgChangeStatusRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSChatRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMsgLoginSuccessRsp MsgLoginSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgloginsuccess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleInfo;
        break;
      }

      // optional .CSMsgRoleInfo RoleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleQuit;
        break;
      }

      // optional .CSMsgRoleInfo RoleQuit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleQuit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolequit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AskAddFriendRsp;
        break;
      }

      // optional .CSMsgAskAddFriendRsp AskAddFriendRsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AskAddFriendRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askaddfriendrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SuccessAddFriendRsp;
        break;
      }

      // optional .CSMsgSuccessAddFriendRsp SuccessAddFriendRsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuccessAddFriendRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_successaddfriendrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DeleteFriendRsp;
        break;
      }

      // optional .CSMsgDeleteFriendRsp DeleteFriendRsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeleteFriendRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletefriendrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SendChatRsp;
        break;
      }

      // optional .CSMsgSendChatRsp SendChatRsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SendChatRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendchatrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_FindNameRsp;
        break;
      }

      // optional .CSMsgFindNameRsp FindNameRsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FindNameRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_findnamersp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ChangeStatusRsp;
        break;
      }

      // optional .CSMsgChangeStatusRsp ChangeStatusRsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeStatusRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changestatusrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMsgLoginSuccessRsp MsgLoginSuccess = 1;
  if (has_msgloginsuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgloginsuccess(), output);
  }

  // optional .CSMsgRoleInfo RoleInfo = 2;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roleinfo(), output);
  }

  // optional .CSMsgRoleInfo RoleQuit = 3;
  if (has_rolequit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rolequit(), output);
  }

  // optional .CSMsgAskAddFriendRsp AskAddFriendRsp = 4;
  if (has_askaddfriendrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->askaddfriendrsp(), output);
  }

  // optional .CSMsgSuccessAddFriendRsp SuccessAddFriendRsp = 5;
  if (has_successaddfriendrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->successaddfriendrsp(), output);
  }

  // optional .CSMsgDeleteFriendRsp DeleteFriendRsp = 6;
  if (has_deletefriendrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deletefriendrsp(), output);
  }

  // optional .CSMsgSendChatRsp SendChatRsp = 7;
  if (has_sendchatrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sendchatrsp(), output);
  }

  // optional .CSMsgFindNameRsp FindNameRsp = 8;
  if (has_findnamersp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->findnamersp(), output);
  }

  // optional .CSMsgChangeStatusRsp ChangeStatusRsp = 9;
  if (has_changestatusrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->changestatusrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSChatRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMsgLoginSuccessRsp MsgLoginSuccess = 1;
  if (has_msgloginsuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgloginsuccess(), target);
  }

  // optional .CSMsgRoleInfo RoleInfo = 2;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfo(), target);
  }

  // optional .CSMsgRoleInfo RoleQuit = 3;
  if (has_rolequit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rolequit(), target);
  }

  // optional .CSMsgAskAddFriendRsp AskAddFriendRsp = 4;
  if (has_askaddfriendrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->askaddfriendrsp(), target);
  }

  // optional .CSMsgSuccessAddFriendRsp SuccessAddFriendRsp = 5;
  if (has_successaddfriendrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->successaddfriendrsp(), target);
  }

  // optional .CSMsgDeleteFriendRsp DeleteFriendRsp = 6;
  if (has_deletefriendrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deletefriendrsp(), target);
  }

  // optional .CSMsgSendChatRsp SendChatRsp = 7;
  if (has_sendchatrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sendchatrsp(), target);
  }

  // optional .CSMsgFindNameRsp FindNameRsp = 8;
  if (has_findnamersp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->findnamersp(), target);
  }

  // optional .CSMsgChangeStatusRsp ChangeStatusRsp = 9;
  if (has_changestatusrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->changestatusrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSChatRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMsgLoginSuccessRsp MsgLoginSuccess = 1;
    if (has_msgloginsuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgloginsuccess());
    }

    // optional .CSMsgRoleInfo RoleInfo = 2;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

    // optional .CSMsgRoleInfo RoleQuit = 3;
    if (has_rolequit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolequit());
    }

    // optional .CSMsgAskAddFriendRsp AskAddFriendRsp = 4;
    if (has_askaddfriendrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askaddfriendrsp());
    }

    // optional .CSMsgSuccessAddFriendRsp SuccessAddFriendRsp = 5;
    if (has_successaddfriendrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->successaddfriendrsp());
    }

    // optional .CSMsgDeleteFriendRsp DeleteFriendRsp = 6;
    if (has_deletefriendrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletefriendrsp());
    }

    // optional .CSMsgSendChatRsp SendChatRsp = 7;
    if (has_sendchatrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendchatrsp());
    }

    // optional .CSMsgFindNameRsp FindNameRsp = 8;
    if (has_findnamersp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->findnamersp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CSMsgChangeStatusRsp ChangeStatusRsp = 9;
    if (has_changestatusrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changestatusrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSChatRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSChatRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChatRspParam::MergeFrom(const CSChatRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgloginsuccess()) {
      mutable_msgloginsuccess()->::CSMsgLoginSuccessRsp::MergeFrom(from.msgloginsuccess());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::CSMsgRoleInfo::MergeFrom(from.roleinfo());
    }
    if (from.has_rolequit()) {
      mutable_rolequit()->::CSMsgRoleInfo::MergeFrom(from.rolequit());
    }
    if (from.has_askaddfriendrsp()) {
      mutable_askaddfriendrsp()->::CSMsgAskAddFriendRsp::MergeFrom(from.askaddfriendrsp());
    }
    if (from.has_successaddfriendrsp()) {
      mutable_successaddfriendrsp()->::CSMsgSuccessAddFriendRsp::MergeFrom(from.successaddfriendrsp());
    }
    if (from.has_deletefriendrsp()) {
      mutable_deletefriendrsp()->::CSMsgDeleteFriendRsp::MergeFrom(from.deletefriendrsp());
    }
    if (from.has_sendchatrsp()) {
      mutable_sendchatrsp()->::CSMsgSendChatRsp::MergeFrom(from.sendchatrsp());
    }
    if (from.has_findnamersp()) {
      mutable_findnamersp()->::CSMsgFindNameRsp::MergeFrom(from.findnamersp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_changestatusrsp()) {
      mutable_changestatusrsp()->::CSMsgChangeStatusRsp::MergeFrom(from.changestatusrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSChatRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChatRspParam::CopyFrom(const CSChatRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatRspParam::IsInitialized() const {

  return true;
}

void CSChatRspParam::Swap(CSChatRspParam* other) {
  if (other != this) {
    std::swap(msgloginsuccess_, other->msgloginsuccess_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(rolequit_, other->rolequit_);
    std::swap(askaddfriendrsp_, other->askaddfriendrsp_);
    std::swap(successaddfriendrsp_, other->successaddfriendrsp_);
    std::swap(deletefriendrsp_, other->deletefriendrsp_);
    std::swap(sendchatrsp_, other->sendchatrsp_);
    std::swap(findnamersp_, other->findnamersp_);
    std::swap(changestatusrsp_, other->changestatusrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSChatRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChatRspParam_descriptor_;
  metadata.reflection = CSChatRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatReq::kCmdFieldNumber;
const int CSChatReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSChatReq::CSChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSChatReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSChatReqParam*>(&::CSChatReqParam::default_instance());
}

CSChatReq::CSChatReq(const CSChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatReq::~CSChatReq() {
  SharedDtor();
}

void CSChatReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChatReq_descriptor_;
}

const CSChatReq& CSChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSChatReq* CSChatReq::default_instance_ = NULL;

CSChatReq* CSChatReq::New() const {
  return new CSChatReq;
}

void CSChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSChatReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSChatCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSChatCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSChatCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSChatReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSChatCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSChatReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSChatCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSChatReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSChatCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSChatReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChatReq::MergeFrom(const CSChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSChatReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChatReq::CopyFrom(const CSChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSChatReq::Swap(CSChatReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChatReq_descriptor_;
  metadata.reflection = CSChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatRsp::kResultFieldNumber;
const int CSChatRsp::kCmdFieldNumber;
const int CSChatRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSChatRsp::CSChatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSChatRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSChatRspParam*>(&::CSChatRspParam::default_instance());
}

CSChatRsp::CSChatRsp(const CSChatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatRsp::~CSChatRsp() {
  SharedDtor();
}

void CSChatRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSChatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChatRsp_descriptor_;
}

const CSChatRsp& CSChatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSChatRsp* CSChatRsp::default_instance_ = NULL;

CSChatRsp* CSChatRsp::New() const {
  return new CSChatRsp;
}

void CSChatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSChatRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSChatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSChatCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSChatCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSChatCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSChatRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSChatCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSChatRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSChatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSChatCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSChatRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSChatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSChatCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSChatRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSChatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSChatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChatRsp::MergeFrom(const CSChatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSChatRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSChatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChatRsp::CopyFrom(const CSChatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSChatRsp::Swap(CSChatRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSChatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChatRsp_descriptor_;
  metadata.reflection = CSChatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMateFetchReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSMateFetchReq::CSMateFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMateFetchReq::InitAsDefaultInstance() {
}

CSMateFetchReq::CSMateFetchReq(const CSMateFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMateFetchReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMateFetchReq::~CSMateFetchReq() {
  SharedDtor();
}

void CSMateFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMateFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMateFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMateFetchReq_descriptor_;
}

const CSMateFetchReq& CSMateFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMateFetchReq* CSMateFetchReq::default_instance_ = NULL;

CSMateFetchReq* CSMateFetchReq::New() const {
  return new CSMateFetchReq;
}

void CSMateFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMateFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMateFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMateFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMateFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMateFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMateFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMateFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMateFetchReq::MergeFrom(const CSMateFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMateFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMateFetchReq::CopyFrom(const CSMateFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMateFetchReq::IsInitialized() const {

  return true;
}

void CSMateFetchReq::Swap(CSMateFetchReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMateFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMateFetchReq_descriptor_;
  metadata.reflection = CSMateFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSQuitMateFetchReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSQuitMateFetchReq::CSQuitMateFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQuitMateFetchReq::InitAsDefaultInstance() {
}

CSQuitMateFetchReq::CSQuitMateFetchReq(const CSQuitMateFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQuitMateFetchReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQuitMateFetchReq::~CSQuitMateFetchReq() {
  SharedDtor();
}

void CSQuitMateFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQuitMateFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQuitMateFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQuitMateFetchReq_descriptor_;
}

const CSQuitMateFetchReq& CSQuitMateFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSQuitMateFetchReq* CSQuitMateFetchReq::default_instance_ = NULL;

CSQuitMateFetchReq* CSQuitMateFetchReq::New() const {
  return new CSQuitMateFetchReq;
}

void CSQuitMateFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQuitMateFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQuitMateFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQuitMateFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQuitMateFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQuitMateFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQuitMateFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQuitMateFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQuitMateFetchReq::MergeFrom(const CSQuitMateFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQuitMateFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQuitMateFetchReq::CopyFrom(const CSQuitMateFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQuitMateFetchReq::IsInitialized() const {

  return true;
}

void CSQuitMateFetchReq::Swap(CSQuitMateFetchReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQuitMateFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQuitMateFetchReq_descriptor_;
  metadata.reflection = CSQuitMateFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSNotButtonMateFetchReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSNotButtonMateFetchReq::CSNotButtonMateFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNotButtonMateFetchReq::InitAsDefaultInstance() {
}

CSNotButtonMateFetchReq::CSNotButtonMateFetchReq(const CSNotButtonMateFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNotButtonMateFetchReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNotButtonMateFetchReq::~CSNotButtonMateFetchReq() {
  SharedDtor();
}

void CSNotButtonMateFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSNotButtonMateFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNotButtonMateFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNotButtonMateFetchReq_descriptor_;
}

const CSNotButtonMateFetchReq& CSNotButtonMateFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSNotButtonMateFetchReq* CSNotButtonMateFetchReq::default_instance_ = NULL;

CSNotButtonMateFetchReq* CSNotButtonMateFetchReq::New() const {
  return new CSNotButtonMateFetchReq;
}

void CSNotButtonMateFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNotButtonMateFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNotButtonMateFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNotButtonMateFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNotButtonMateFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNotButtonMateFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNotButtonMateFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNotButtonMateFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNotButtonMateFetchReq::MergeFrom(const CSNotButtonMateFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNotButtonMateFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNotButtonMateFetchReq::CopyFrom(const CSNotButtonMateFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNotButtonMateFetchReq::IsInitialized() const {

  return true;
}

void CSNotButtonMateFetchReq::Swap(CSNotButtonMateFetchReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNotButtonMateFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNotButtonMateFetchReq_descriptor_;
  metadata.reflection = CSNotButtonMateFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSuccessButtonMateFetchReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSSuccessButtonMateFetchReq::CSSuccessButtonMateFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSuccessButtonMateFetchReq::InitAsDefaultInstance() {
}

CSSuccessButtonMateFetchReq::CSSuccessButtonMateFetchReq(const CSSuccessButtonMateFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSuccessButtonMateFetchReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSuccessButtonMateFetchReq::~CSSuccessButtonMateFetchReq() {
  SharedDtor();
}

void CSSuccessButtonMateFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSuccessButtonMateFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSuccessButtonMateFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSuccessButtonMateFetchReq_descriptor_;
}

const CSSuccessButtonMateFetchReq& CSSuccessButtonMateFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSSuccessButtonMateFetchReq* CSSuccessButtonMateFetchReq::default_instance_ = NULL;

CSSuccessButtonMateFetchReq* CSSuccessButtonMateFetchReq::New() const {
  return new CSSuccessButtonMateFetchReq;
}

void CSSuccessButtonMateFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSuccessButtonMateFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSuccessButtonMateFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSuccessButtonMateFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSuccessButtonMateFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSuccessButtonMateFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSuccessButtonMateFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSuccessButtonMateFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSuccessButtonMateFetchReq::MergeFrom(const CSSuccessButtonMateFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSuccessButtonMateFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSuccessButtonMateFetchReq::CopyFrom(const CSSuccessButtonMateFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSuccessButtonMateFetchReq::IsInitialized() const {

  return true;
}

void CSSuccessButtonMateFetchReq::Swap(CSSuccessButtonMateFetchReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSuccessButtonMateFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSuccessButtonMateFetchReq_descriptor_;
  metadata.reflection = CSSuccessButtonMateFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSShowHeroVipInfo::kVipIdFieldNumber;
const int CSShowHeroVipInfo::kVipGradeFieldNumber;
#endif  // !_MSC_VER

CSShowHeroVipInfo::CSShowHeroVipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSShowHeroVipInfo::InitAsDefaultInstance() {
}

CSShowHeroVipInfo::CSShowHeroVipInfo(const CSShowHeroVipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSShowHeroVipInfo::SharedCtor() {
  _cached_size_ = 0;
  vipid_ = 0u;
  vipgrade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSShowHeroVipInfo::~CSShowHeroVipInfo() {
  SharedDtor();
}

void CSShowHeroVipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSShowHeroVipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSShowHeroVipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSShowHeroVipInfo_descriptor_;
}

const CSShowHeroVipInfo& CSShowHeroVipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSShowHeroVipInfo* CSShowHeroVipInfo::default_instance_ = NULL;

CSShowHeroVipInfo* CSShowHeroVipInfo::New() const {
  return new CSShowHeroVipInfo;
}

void CSShowHeroVipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipid_ = 0u;
    vipgrade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSShowHeroVipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 VipId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipid_)));
          set_has_vipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VipGrade;
        break;
      }

      // optional uint32 VipGrade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipgrade_)));
          set_has_vipgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSShowHeroVipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 VipId = 1;
  if (has_vipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vipid(), output);
  }

  // optional uint32 VipGrade = 2;
  if (has_vipgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vipgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSShowHeroVipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 VipId = 1;
  if (has_vipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vipid(), target);
  }

  // optional uint32 VipGrade = 2;
  if (has_vipgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vipgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSShowHeroVipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 VipId = 1;
    if (has_vipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipid());
    }

    // optional uint32 VipGrade = 2;
    if (has_vipgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipgrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSShowHeroVipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSShowHeroVipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSShowHeroVipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSShowHeroVipInfo::MergeFrom(const CSShowHeroVipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipid()) {
      set_vipid(from.vipid());
    }
    if (from.has_vipgrade()) {
      set_vipgrade(from.vipgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSShowHeroVipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShowHeroVipInfo::CopyFrom(const CSShowHeroVipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShowHeroVipInfo::IsInitialized() const {

  return true;
}

void CSShowHeroVipInfo::Swap(CSShowHeroVipInfo* other) {
  if (other != this) {
    std::swap(vipid_, other->vipid_);
    std::swap(vipgrade_, other->vipgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSShowHeroVipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSShowHeroVipInfo_descriptor_;
  metadata.reflection = CSShowHeroVipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSShowHeroInfo::kUidFieldNumber;
const int CSShowHeroInfo::kVipIDFieldNumber;
const int CSShowHeroInfo::kVipGradeFieldNumber;
const int CSShowHeroInfo::kRoleGradeFieldNumber;
const int CSShowHeroInfo::kRoleRankFieldNumber;
const int CSShowHeroInfo::kRoleHeadTypeFieldNumber;
const int CSShowHeroInfo::kNameFieldNumber;
#endif  // !_MSC_VER

CSShowHeroInfo::CSShowHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSShowHeroInfo::InitAsDefaultInstance() {
}

CSShowHeroInfo::CSShowHeroInfo(const CSShowHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSShowHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  vipid_ = 0u;
  vipgrade_ = 0u;
  rolegrade_ = 0u;
  rolerank_ = 0u;
  roleheadtype_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSShowHeroInfo::~CSShowHeroInfo() {
  SharedDtor();
}

void CSShowHeroInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSShowHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSShowHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSShowHeroInfo_descriptor_;
}

const CSShowHeroInfo& CSShowHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSShowHeroInfo* CSShowHeroInfo::default_instance_ = NULL;

CSShowHeroInfo* CSShowHeroInfo::New() const {
  return new CSShowHeroInfo;
}

void CSShowHeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    vipid_ = 0u;
    vipgrade_ = 0u;
    rolegrade_ = 0u;
    rolerank_ = 0u;
    roleheadtype_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSShowHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VipID;
        break;
      }

      // optional uint32 VipID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipid_)));
          set_has_vipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VipGrade;
        break;
      }

      // optional uint32 VipGrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipgrade_)));
          set_has_vipgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RoleGrade;
        break;
      }

      // optional uint32 RoleGrade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolegrade_)));
          set_has_rolegrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RoleRank;
        break;
      }

      // optional uint32 RoleRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolerank_)));
          set_has_rolerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleHeadType;
        break;
      }

      // optional uint32 RoleHeadType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleHeadType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleheadtype_)));
          set_has_roleheadtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Name;
        break;
      }

      // optional string Name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSShowHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 VipID = 2;
  if (has_vipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vipid(), output);
  }

  // optional uint32 VipGrade = 3;
  if (has_vipgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vipgrade(), output);
  }

  // optional uint32 RoleGrade = 4;
  if (has_rolegrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rolegrade(), output);
  }

  // optional uint32 RoleRank = 5;
  if (has_rolerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rolerank(), output);
  }

  // optional uint32 RoleHeadType = 6;
  if (has_roleheadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->roleheadtype(), output);
  }

  // optional string Name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSShowHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 VipID = 2;
  if (has_vipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vipid(), target);
  }

  // optional uint32 VipGrade = 3;
  if (has_vipgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vipgrade(), target);
  }

  // optional uint32 RoleGrade = 4;
  if (has_rolegrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rolegrade(), target);
  }

  // optional uint32 RoleRank = 5;
  if (has_rolerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rolerank(), target);
  }

  // optional uint32 RoleHeadType = 6;
  if (has_roleheadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->roleheadtype(), target);
  }

  // optional string Name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSShowHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 VipID = 2;
    if (has_vipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipid());
    }

    // optional uint32 VipGrade = 3;
    if (has_vipgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipgrade());
    }

    // optional uint32 RoleGrade = 4;
    if (has_rolegrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolegrade());
    }

    // optional uint32 RoleRank = 5;
    if (has_rolerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolerank());
    }

    // optional uint32 RoleHeadType = 6;
    if (has_roleheadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleheadtype());
    }

    // optional string Name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSShowHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSShowHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSShowHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSShowHeroInfo::MergeFrom(const CSShowHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vipid()) {
      set_vipid(from.vipid());
    }
    if (from.has_vipgrade()) {
      set_vipgrade(from.vipgrade());
    }
    if (from.has_rolegrade()) {
      set_rolegrade(from.rolegrade());
    }
    if (from.has_rolerank()) {
      set_rolerank(from.rolerank());
    }
    if (from.has_roleheadtype()) {
      set_roleheadtype(from.roleheadtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSShowHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShowHeroInfo::CopyFrom(const CSShowHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShowHeroInfo::IsInitialized() const {

  return true;
}

void CSShowHeroInfo::Swap(CSShowHeroInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vipid_, other->vipid_);
    std::swap(vipgrade_, other->vipgrade_);
    std::swap(rolegrade_, other->rolegrade_);
    std::swap(rolerank_, other->rolerank_);
    std::swap(roleheadtype_, other->roleheadtype_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSShowHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSShowHeroInfo_descriptor_;
  metadata.reflection = CSShowHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSShowHeroInfoList::kHeroInfoListFieldNumber;
#endif  // !_MSC_VER

CSShowHeroInfoList::CSShowHeroInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSShowHeroInfoList::InitAsDefaultInstance() {
}

CSShowHeroInfoList::CSShowHeroInfoList(const CSShowHeroInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSShowHeroInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSShowHeroInfoList::~CSShowHeroInfoList() {
  SharedDtor();
}

void CSShowHeroInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSShowHeroInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSShowHeroInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSShowHeroInfoList_descriptor_;
}

const CSShowHeroInfoList& CSShowHeroInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSShowHeroInfoList* CSShowHeroInfoList::default_instance_ = NULL;

CSShowHeroInfoList* CSShowHeroInfoList::New() const {
  return new CSShowHeroInfoList;
}

void CSShowHeroInfoList::Clear() {
  heroinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSShowHeroInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSShowHeroInfo HeroInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HeroInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSShowHeroInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSShowHeroInfo HeroInfoList = 1;
  for (int i = 0; i < this->heroinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSShowHeroInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSShowHeroInfo HeroInfoList = 1;
  for (int i = 0; i < this->heroinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSShowHeroInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .CSShowHeroInfo HeroInfoList = 1;
  total_size += 1 * this->heroinfolist_size();
  for (int i = 0; i < this->heroinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSShowHeroInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSShowHeroInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSShowHeroInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSShowHeroInfoList::MergeFrom(const CSShowHeroInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroinfolist_.MergeFrom(from.heroinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSShowHeroInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShowHeroInfoList::CopyFrom(const CSShowHeroInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShowHeroInfoList::IsInitialized() const {

  return true;
}

void CSShowHeroInfoList::Swap(CSShowHeroInfoList* other) {
  if (other != this) {
    heroinfolist_.Swap(&other->heroinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSShowHeroInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSShowHeroInfoList_descriptor_;
  metadata.reflection = CSShowHeroInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFeiJiBagList::kFeiJiFieldNumber;
#endif  // !_MSC_VER

CSFeiJiBagList::CSFeiJiBagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFeiJiBagList::InitAsDefaultInstance() {
}

CSFeiJiBagList::CSFeiJiBagList(const CSFeiJiBagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFeiJiBagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFeiJiBagList::~CSFeiJiBagList() {
  SharedDtor();
}

void CSFeiJiBagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFeiJiBagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFeiJiBagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFeiJiBagList_descriptor_;
}

const CSFeiJiBagList& CSFeiJiBagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSFeiJiBagList* CSFeiJiBagList::default_instance_ = NULL;

CSFeiJiBagList* CSFeiJiBagList::New() const {
  return new CSFeiJiBagList;
}

void CSFeiJiBagList::Clear() {
  feiji_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFeiJiBagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 FeiJi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FeiJi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_feiji())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_feiji())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_FeiJi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFeiJiBagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 FeiJi = 1;
  for (int i = 0; i < this->feiji_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->feiji(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFeiJiBagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 FeiJi = 1;
  for (int i = 0; i < this->feiji_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->feiji(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFeiJiBagList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 FeiJi = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->feiji_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->feiji(i));
    }
    total_size += 1 * this->feiji_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFeiJiBagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFeiJiBagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFeiJiBagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFeiJiBagList::MergeFrom(const CSFeiJiBagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  feiji_.MergeFrom(from.feiji_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFeiJiBagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFeiJiBagList::CopyFrom(const CSFeiJiBagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFeiJiBagList::IsInitialized() const {

  return true;
}

void CSFeiJiBagList::Swap(CSFeiJiBagList* other) {
  if (other != this) {
    feiji_.Swap(&other->feiji_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFeiJiBagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFeiJiBagList_descriptor_;
  metadata.reflection = CSFeiJiBagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSZhaDanBagList::kZhaDanFieldNumber;
#endif  // !_MSC_VER

CSZhaDanBagList::CSZhaDanBagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSZhaDanBagList::InitAsDefaultInstance() {
}

CSZhaDanBagList::CSZhaDanBagList(const CSZhaDanBagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSZhaDanBagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSZhaDanBagList::~CSZhaDanBagList() {
  SharedDtor();
}

void CSZhaDanBagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSZhaDanBagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSZhaDanBagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSZhaDanBagList_descriptor_;
}

const CSZhaDanBagList& CSZhaDanBagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSZhaDanBagList* CSZhaDanBagList::default_instance_ = NULL;

CSZhaDanBagList* CSZhaDanBagList::New() const {
  return new CSZhaDanBagList;
}

void CSZhaDanBagList::Clear() {
  zhadan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSZhaDanBagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ZhaDan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhaDan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_zhadan())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zhadan())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ZhaDan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSZhaDanBagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ZhaDan = 1;
  for (int i = 0; i < this->zhadan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->zhadan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSZhaDanBagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ZhaDan = 1;
  for (int i = 0; i < this->zhadan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->zhadan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSZhaDanBagList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ZhaDan = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhadan_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->zhadan(i));
    }
    total_size += 1 * this->zhadan_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSZhaDanBagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSZhaDanBagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSZhaDanBagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSZhaDanBagList::MergeFrom(const CSZhaDanBagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhadan_.MergeFrom(from.zhadan_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSZhaDanBagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSZhaDanBagList::CopyFrom(const CSZhaDanBagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSZhaDanBagList::IsInitialized() const {

  return true;
}

void CSZhaDanBagList::Swap(CSZhaDanBagList* other) {
  if (other != this) {
    zhadan_.Swap(&other->zhadan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSZhaDanBagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSZhaDanBagList_descriptor_;
  metadata.reflection = CSZhaDanBagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFeiJiDiPanBagList::kFeiJiDiPanFieldNumber;
#endif  // !_MSC_VER

CSFeiJiDiPanBagList::CSFeiJiDiPanBagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFeiJiDiPanBagList::InitAsDefaultInstance() {
}

CSFeiJiDiPanBagList::CSFeiJiDiPanBagList(const CSFeiJiDiPanBagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFeiJiDiPanBagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFeiJiDiPanBagList::~CSFeiJiDiPanBagList() {
  SharedDtor();
}

void CSFeiJiDiPanBagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFeiJiDiPanBagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFeiJiDiPanBagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFeiJiDiPanBagList_descriptor_;
}

const CSFeiJiDiPanBagList& CSFeiJiDiPanBagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSFeiJiDiPanBagList* CSFeiJiDiPanBagList::default_instance_ = NULL;

CSFeiJiDiPanBagList* CSFeiJiDiPanBagList::New() const {
  return new CSFeiJiDiPanBagList;
}

void CSFeiJiDiPanBagList::Clear() {
  feijidipan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFeiJiDiPanBagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 FeiJiDiPan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FeiJiDiPan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_feijidipan())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_feijidipan())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_FeiJiDiPan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFeiJiDiPanBagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 FeiJiDiPan = 1;
  for (int i = 0; i < this->feijidipan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->feijidipan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFeiJiDiPanBagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 FeiJiDiPan = 1;
  for (int i = 0; i < this->feijidipan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->feijidipan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFeiJiDiPanBagList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 FeiJiDiPan = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->feijidipan_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->feijidipan(i));
    }
    total_size += 1 * this->feijidipan_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFeiJiDiPanBagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFeiJiDiPanBagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFeiJiDiPanBagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFeiJiDiPanBagList::MergeFrom(const CSFeiJiDiPanBagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  feijidipan_.MergeFrom(from.feijidipan_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFeiJiDiPanBagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFeiJiDiPanBagList::CopyFrom(const CSFeiJiDiPanBagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFeiJiDiPanBagList::IsInitialized() const {

  return true;
}

void CSFeiJiDiPanBagList::Swap(CSFeiJiDiPanBagList* other) {
  if (other != this) {
    feijidipan_.Swap(&other->feijidipan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFeiJiDiPanBagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFeiJiDiPanBagList_descriptor_;
  metadata.reflection = CSFeiJiDiPanBagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFeiJiSkillOneBagList::kFeiJiSkillOneFieldNumber;
#endif  // !_MSC_VER

CSFeiJiSkillOneBagList::CSFeiJiSkillOneBagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFeiJiSkillOneBagList::InitAsDefaultInstance() {
}

CSFeiJiSkillOneBagList::CSFeiJiSkillOneBagList(const CSFeiJiSkillOneBagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFeiJiSkillOneBagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFeiJiSkillOneBagList::~CSFeiJiSkillOneBagList() {
  SharedDtor();
}

void CSFeiJiSkillOneBagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFeiJiSkillOneBagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFeiJiSkillOneBagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFeiJiSkillOneBagList_descriptor_;
}

const CSFeiJiSkillOneBagList& CSFeiJiSkillOneBagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSFeiJiSkillOneBagList* CSFeiJiSkillOneBagList::default_instance_ = NULL;

CSFeiJiSkillOneBagList* CSFeiJiSkillOneBagList::New() const {
  return new CSFeiJiSkillOneBagList;
}

void CSFeiJiSkillOneBagList::Clear() {
  feijiskillone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFeiJiSkillOneBagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 FeiJiSkillOne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FeiJiSkillOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_feijiskillone())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_feijiskillone())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_FeiJiSkillOne;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFeiJiSkillOneBagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 FeiJiSkillOne = 1;
  for (int i = 0; i < this->feijiskillone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->feijiskillone(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFeiJiSkillOneBagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 FeiJiSkillOne = 1;
  for (int i = 0; i < this->feijiskillone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->feijiskillone(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFeiJiSkillOneBagList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 FeiJiSkillOne = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->feijiskillone_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->feijiskillone(i));
    }
    total_size += 1 * this->feijiskillone_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFeiJiSkillOneBagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFeiJiSkillOneBagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFeiJiSkillOneBagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFeiJiSkillOneBagList::MergeFrom(const CSFeiJiSkillOneBagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  feijiskillone_.MergeFrom(from.feijiskillone_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFeiJiSkillOneBagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFeiJiSkillOneBagList::CopyFrom(const CSFeiJiSkillOneBagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFeiJiSkillOneBagList::IsInitialized() const {

  return true;
}

void CSFeiJiSkillOneBagList::Swap(CSFeiJiSkillOneBagList* other) {
  if (other != this) {
    feijiskillone_.Swap(&other->feijiskillone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFeiJiSkillOneBagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFeiJiSkillOneBagList_descriptor_;
  metadata.reflection = CSFeiJiSkillOneBagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFeiJiSkillTwoBagList::kFeiJiSkillTwoFieldNumber;
#endif  // !_MSC_VER

CSFeiJiSkillTwoBagList::CSFeiJiSkillTwoBagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFeiJiSkillTwoBagList::InitAsDefaultInstance() {
}

CSFeiJiSkillTwoBagList::CSFeiJiSkillTwoBagList(const CSFeiJiSkillTwoBagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFeiJiSkillTwoBagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFeiJiSkillTwoBagList::~CSFeiJiSkillTwoBagList() {
  SharedDtor();
}

void CSFeiJiSkillTwoBagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFeiJiSkillTwoBagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFeiJiSkillTwoBagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFeiJiSkillTwoBagList_descriptor_;
}

const CSFeiJiSkillTwoBagList& CSFeiJiSkillTwoBagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSFeiJiSkillTwoBagList* CSFeiJiSkillTwoBagList::default_instance_ = NULL;

CSFeiJiSkillTwoBagList* CSFeiJiSkillTwoBagList::New() const {
  return new CSFeiJiSkillTwoBagList;
}

void CSFeiJiSkillTwoBagList::Clear() {
  feijiskilltwo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFeiJiSkillTwoBagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 FeiJiSkillTwo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FeiJiSkillTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_feijiskilltwo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_feijiskilltwo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_FeiJiSkillTwo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFeiJiSkillTwoBagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 FeiJiSkillTwo = 1;
  for (int i = 0; i < this->feijiskilltwo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->feijiskilltwo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFeiJiSkillTwoBagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 FeiJiSkillTwo = 1;
  for (int i = 0; i < this->feijiskilltwo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->feijiskilltwo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFeiJiSkillTwoBagList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 FeiJiSkillTwo = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->feijiskilltwo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->feijiskilltwo(i));
    }
    total_size += 1 * this->feijiskilltwo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFeiJiSkillTwoBagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFeiJiSkillTwoBagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFeiJiSkillTwoBagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFeiJiSkillTwoBagList::MergeFrom(const CSFeiJiSkillTwoBagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  feijiskilltwo_.MergeFrom(from.feijiskilltwo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFeiJiSkillTwoBagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFeiJiSkillTwoBagList::CopyFrom(const CSFeiJiSkillTwoBagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFeiJiSkillTwoBagList::IsInitialized() const {

  return true;
}

void CSFeiJiSkillTwoBagList::Swap(CSFeiJiSkillTwoBagList* other) {
  if (other != this) {
    feijiskilltwo_.Swap(&other->feijiskilltwo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFeiJiSkillTwoBagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFeiJiSkillTwoBagList_descriptor_;
  metadata.reflection = CSFeiJiSkillTwoBagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEnterHeroShowRsp::kShowHeroVipInfoFieldNumber;
const int CSEnterHeroShowRsp::kHeroShowFieldNumber;
const int CSEnterHeroShowRsp::kFeiJiBagListFieldNumber;
const int CSEnterHeroShowRsp::kZhaDanBagListFieldNumber;
const int CSEnterHeroShowRsp::kFeiJiDiPanBagListFieldNumber;
const int CSEnterHeroShowRsp::kFeiJiSkillOneBagListFieldNumber;
const int CSEnterHeroShowRsp::kFeiJiSkillTwoBagListFieldNumber;
#endif  // !_MSC_VER

CSEnterHeroShowRsp::CSEnterHeroShowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEnterHeroShowRsp::InitAsDefaultInstance() {
  showherovipinfo_ = const_cast< ::CSShowHeroVipInfo*>(&::CSShowHeroVipInfo::default_instance());
  heroshow_ = const_cast< ::CSShowHeroInfoList*>(&::CSShowHeroInfoList::default_instance());
  feijibaglist_ = const_cast< ::CSFeiJiBagList*>(&::CSFeiJiBagList::default_instance());
  zhadanbaglist_ = const_cast< ::CSZhaDanBagList*>(&::CSZhaDanBagList::default_instance());
  feijidipanbaglist_ = const_cast< ::CSFeiJiDiPanBagList*>(&::CSFeiJiDiPanBagList::default_instance());
  feijiskillonebaglist_ = const_cast< ::CSFeiJiSkillOneBagList*>(&::CSFeiJiSkillOneBagList::default_instance());
  feijiskilltwobaglist_ = const_cast< ::CSFeiJiSkillTwoBagList*>(&::CSFeiJiSkillTwoBagList::default_instance());
}

CSEnterHeroShowRsp::CSEnterHeroShowRsp(const CSEnterHeroShowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEnterHeroShowRsp::SharedCtor() {
  _cached_size_ = 0;
  showherovipinfo_ = NULL;
  heroshow_ = NULL;
  feijibaglist_ = NULL;
  zhadanbaglist_ = NULL;
  feijidipanbaglist_ = NULL;
  feijiskillonebaglist_ = NULL;
  feijiskilltwobaglist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEnterHeroShowRsp::~CSEnterHeroShowRsp() {
  SharedDtor();
}

void CSEnterHeroShowRsp::SharedDtor() {
  if (this != default_instance_) {
    delete showherovipinfo_;
    delete heroshow_;
    delete feijibaglist_;
    delete zhadanbaglist_;
    delete feijidipanbaglist_;
    delete feijiskillonebaglist_;
    delete feijiskilltwobaglist_;
  }
}

void CSEnterHeroShowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEnterHeroShowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEnterHeroShowRsp_descriptor_;
}

const CSEnterHeroShowRsp& CSEnterHeroShowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSEnterHeroShowRsp* CSEnterHeroShowRsp::default_instance_ = NULL;

CSEnterHeroShowRsp* CSEnterHeroShowRsp::New() const {
  return new CSEnterHeroShowRsp;
}

void CSEnterHeroShowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_showherovipinfo()) {
      if (showherovipinfo_ != NULL) showherovipinfo_->::CSShowHeroVipInfo::Clear();
    }
    if (has_heroshow()) {
      if (heroshow_ != NULL) heroshow_->::CSShowHeroInfoList::Clear();
    }
    if (has_feijibaglist()) {
      if (feijibaglist_ != NULL) feijibaglist_->::CSFeiJiBagList::Clear();
    }
    if (has_zhadanbaglist()) {
      if (zhadanbaglist_ != NULL) zhadanbaglist_->::CSZhaDanBagList::Clear();
    }
    if (has_feijidipanbaglist()) {
      if (feijidipanbaglist_ != NULL) feijidipanbaglist_->::CSFeiJiDiPanBagList::Clear();
    }
    if (has_feijiskillonebaglist()) {
      if (feijiskillonebaglist_ != NULL) feijiskillonebaglist_->::CSFeiJiSkillOneBagList::Clear();
    }
    if (has_feijiskilltwobaglist()) {
      if (feijiskilltwobaglist_ != NULL) feijiskilltwobaglist_->::CSFeiJiSkillTwoBagList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEnterHeroShowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSShowHeroVipInfo ShowHeroVipInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showherovipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HeroShow;
        break;
      }

      // optional .CSShowHeroInfoList HeroShow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroshow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FeiJiBagList;
        break;
      }

      // optional .CSFeiJiBagList FeiJiBagList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeiJiBagList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feijibaglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ZhaDanBagList;
        break;
      }

      // optional .CSZhaDanBagList ZhaDanBagList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZhaDanBagList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zhadanbaglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FeiJiDiPanBagList;
        break;
      }

      // optional .CSFeiJiDiPanBagList FeiJiDiPanBagList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeiJiDiPanBagList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feijidipanbaglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FeiJiSkillOneBagList;
        break;
      }

      // optional .CSFeiJiSkillOneBagList FeiJiSkillOneBagList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeiJiSkillOneBagList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feijiskillonebaglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_FeiJiSkillTwoBagList;
        break;
      }

      // optional .CSFeiJiSkillTwoBagList FeiJiSkillTwoBagList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeiJiSkillTwoBagList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feijiskilltwobaglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEnterHeroShowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSShowHeroVipInfo ShowHeroVipInfo = 1;
  if (has_showherovipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showherovipinfo(), output);
  }

  // optional .CSShowHeroInfoList HeroShow = 2;
  if (has_heroshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroshow(), output);
  }

  // optional .CSFeiJiBagList FeiJiBagList = 3;
  if (has_feijibaglist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->feijibaglist(), output);
  }

  // optional .CSZhaDanBagList ZhaDanBagList = 4;
  if (has_zhadanbaglist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->zhadanbaglist(), output);
  }

  // optional .CSFeiJiDiPanBagList FeiJiDiPanBagList = 5;
  if (has_feijidipanbaglist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->feijidipanbaglist(), output);
  }

  // optional .CSFeiJiSkillOneBagList FeiJiSkillOneBagList = 6;
  if (has_feijiskillonebaglist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->feijiskillonebaglist(), output);
  }

  // optional .CSFeiJiSkillTwoBagList FeiJiSkillTwoBagList = 7;
  if (has_feijiskilltwobaglist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->feijiskilltwobaglist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEnterHeroShowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSShowHeroVipInfo ShowHeroVipInfo = 1;
  if (has_showherovipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showherovipinfo(), target);
  }

  // optional .CSShowHeroInfoList HeroShow = 2;
  if (has_heroshow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroshow(), target);
  }

  // optional .CSFeiJiBagList FeiJiBagList = 3;
  if (has_feijibaglist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->feijibaglist(), target);
  }

  // optional .CSZhaDanBagList ZhaDanBagList = 4;
  if (has_zhadanbaglist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->zhadanbaglist(), target);
  }

  // optional .CSFeiJiDiPanBagList FeiJiDiPanBagList = 5;
  if (has_feijidipanbaglist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->feijidipanbaglist(), target);
  }

  // optional .CSFeiJiSkillOneBagList FeiJiSkillOneBagList = 6;
  if (has_feijiskillonebaglist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->feijiskillonebaglist(), target);
  }

  // optional .CSFeiJiSkillTwoBagList FeiJiSkillTwoBagList = 7;
  if (has_feijiskilltwobaglist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->feijiskilltwobaglist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEnterHeroShowRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSShowHeroVipInfo ShowHeroVipInfo = 1;
    if (has_showherovipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showherovipinfo());
    }

    // optional .CSShowHeroInfoList HeroShow = 2;
    if (has_heroshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroshow());
    }

    // optional .CSFeiJiBagList FeiJiBagList = 3;
    if (has_feijibaglist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feijibaglist());
    }

    // optional .CSZhaDanBagList ZhaDanBagList = 4;
    if (has_zhadanbaglist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zhadanbaglist());
    }

    // optional .CSFeiJiDiPanBagList FeiJiDiPanBagList = 5;
    if (has_feijidipanbaglist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feijidipanbaglist());
    }

    // optional .CSFeiJiSkillOneBagList FeiJiSkillOneBagList = 6;
    if (has_feijiskillonebaglist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feijiskillonebaglist());
    }

    // optional .CSFeiJiSkillTwoBagList FeiJiSkillTwoBagList = 7;
    if (has_feijiskilltwobaglist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feijiskilltwobaglist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEnterHeroShowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEnterHeroShowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEnterHeroShowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEnterHeroShowRsp::MergeFrom(const CSEnterHeroShowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showherovipinfo()) {
      mutable_showherovipinfo()->::CSShowHeroVipInfo::MergeFrom(from.showherovipinfo());
    }
    if (from.has_heroshow()) {
      mutable_heroshow()->::CSShowHeroInfoList::MergeFrom(from.heroshow());
    }
    if (from.has_feijibaglist()) {
      mutable_feijibaglist()->::CSFeiJiBagList::MergeFrom(from.feijibaglist());
    }
    if (from.has_zhadanbaglist()) {
      mutable_zhadanbaglist()->::CSZhaDanBagList::MergeFrom(from.zhadanbaglist());
    }
    if (from.has_feijidipanbaglist()) {
      mutable_feijidipanbaglist()->::CSFeiJiDiPanBagList::MergeFrom(from.feijidipanbaglist());
    }
    if (from.has_feijiskillonebaglist()) {
      mutable_feijiskillonebaglist()->::CSFeiJiSkillOneBagList::MergeFrom(from.feijiskillonebaglist());
    }
    if (from.has_feijiskilltwobaglist()) {
      mutable_feijiskilltwobaglist()->::CSFeiJiSkillTwoBagList::MergeFrom(from.feijiskilltwobaglist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEnterHeroShowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEnterHeroShowRsp::CopyFrom(const CSEnterHeroShowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEnterHeroShowRsp::IsInitialized() const {

  return true;
}

void CSEnterHeroShowRsp::Swap(CSEnterHeroShowRsp* other) {
  if (other != this) {
    std::swap(showherovipinfo_, other->showherovipinfo_);
    std::swap(heroshow_, other->heroshow_);
    std::swap(feijibaglist_, other->feijibaglist_);
    std::swap(zhadanbaglist_, other->zhadanbaglist_);
    std::swap(feijidipanbaglist_, other->feijidipanbaglist_);
    std::swap(feijiskillonebaglist_, other->feijiskillonebaglist_);
    std::swap(feijiskilltwobaglist_, other->feijiskilltwobaglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEnterHeroShowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEnterHeroShowRsp_descriptor_;
  metadata.reflection = CSEnterHeroShowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEnterHeroShowBagReq::kUidFieldNumber;
const int CSEnterHeroShowBagReq::kDecorateBagTypeFieldNumber;
const int CSEnterHeroShowBagReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSEnterHeroShowBagReq::CSEnterHeroShowBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEnterHeroShowBagReq::InitAsDefaultInstance() {
}

CSEnterHeroShowBagReq::CSEnterHeroShowBagReq(const CSEnterHeroShowBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEnterHeroShowBagReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  decoratebagtype_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEnterHeroShowBagReq::~CSEnterHeroShowBagReq() {
  SharedDtor();
}

void CSEnterHeroShowBagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEnterHeroShowBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEnterHeroShowBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEnterHeroShowBagReq_descriptor_;
}

const CSEnterHeroShowBagReq& CSEnterHeroShowBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSEnterHeroShowBagReq* CSEnterHeroShowBagReq::default_instance_ = NULL;

CSEnterHeroShowBagReq* CSEnterHeroShowBagReq::New() const {
  return new CSEnterHeroShowBagReq;
}

void CSEnterHeroShowBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    decoratebagtype_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEnterHeroShowBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DecorateBagType;
        break;
      }

      // optional uint32 DecorateBagType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorateBagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decoratebagtype_)));
          set_has_decoratebagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Id;
        break;
      }

      // optional uint32 Id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEnterHeroShowBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 DecorateBagType = 2;
  if (has_decoratebagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->decoratebagtype(), output);
  }

  // optional uint32 Id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEnterHeroShowBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 DecorateBagType = 2;
  if (has_decoratebagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->decoratebagtype(), target);
  }

  // optional uint32 Id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEnterHeroShowBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 DecorateBagType = 2;
    if (has_decoratebagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decoratebagtype());
    }

    // optional uint32 Id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEnterHeroShowBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEnterHeroShowBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEnterHeroShowBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEnterHeroShowBagReq::MergeFrom(const CSEnterHeroShowBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_decoratebagtype()) {
      set_decoratebagtype(from.decoratebagtype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEnterHeroShowBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEnterHeroShowBagReq::CopyFrom(const CSEnterHeroShowBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEnterHeroShowBagReq::IsInitialized() const {

  return true;
}

void CSEnterHeroShowBagReq::Swap(CSEnterHeroShowBagReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(decoratebagtype_, other->decoratebagtype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEnterHeroShowBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEnterHeroShowBagReq_descriptor_;
  metadata.reflection = CSEnterHeroShowBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSendUserHeroShowRsp::kUidFieldNumber;
const int CSSendUserHeroShowRsp::kZhadanIdFieldNumber;
#endif  // !_MSC_VER

CSSendUserHeroShowRsp::CSSendUserHeroShowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSendUserHeroShowRsp::InitAsDefaultInstance() {
}

CSSendUserHeroShowRsp::CSSendUserHeroShowRsp(const CSSendUserHeroShowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSendUserHeroShowRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  zhadanid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSendUserHeroShowRsp::~CSSendUserHeroShowRsp() {
  SharedDtor();
}

void CSSendUserHeroShowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSendUserHeroShowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSendUserHeroShowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSendUserHeroShowRsp_descriptor_;
}

const CSSendUserHeroShowRsp& CSSendUserHeroShowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSSendUserHeroShowRsp* CSSendUserHeroShowRsp::default_instance_ = NULL;

CSSendUserHeroShowRsp* CSSendUserHeroShowRsp::New() const {
  return new CSSendUserHeroShowRsp;
}

void CSSendUserHeroShowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    zhadanid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSendUserHeroShowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ZhadanId;
        break;
      }

      // optional uint32 ZhadanId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhadanId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhadanid_)));
          set_has_zhadanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSendUserHeroShowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 ZhadanId = 2;
  if (has_zhadanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zhadanid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSendUserHeroShowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 ZhadanId = 2;
  if (has_zhadanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zhadanid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSendUserHeroShowRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 ZhadanId = 2;
    if (has_zhadanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhadanid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSendUserHeroShowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSendUserHeroShowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSendUserHeroShowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSendUserHeroShowRsp::MergeFrom(const CSSendUserHeroShowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_zhadanid()) {
      set_zhadanid(from.zhadanid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSendUserHeroShowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSendUserHeroShowRsp::CopyFrom(const CSSendUserHeroShowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSendUserHeroShowRsp::IsInitialized() const {

  return true;
}

void CSSendUserHeroShowRsp::Swap(CSSendUserHeroShowRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(zhadanid_, other->zhadanid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSendUserHeroShowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSendUserHeroShowRsp_descriptor_;
  metadata.reflection = CSSendUserHeroShowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSShowZhaDanBagReq::kUidFieldNumber;
const int CSShowZhaDanBagReq::kZhadanIdFieldNumber;
#endif  // !_MSC_VER

CSShowZhaDanBagReq::CSShowZhaDanBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSShowZhaDanBagReq::InitAsDefaultInstance() {
}

CSShowZhaDanBagReq::CSShowZhaDanBagReq(const CSShowZhaDanBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSShowZhaDanBagReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  zhadanid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSShowZhaDanBagReq::~CSShowZhaDanBagReq() {
  SharedDtor();
}

void CSShowZhaDanBagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSShowZhaDanBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSShowZhaDanBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSShowZhaDanBagReq_descriptor_;
}

const CSShowZhaDanBagReq& CSShowZhaDanBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSShowZhaDanBagReq* CSShowZhaDanBagReq::default_instance_ = NULL;

CSShowZhaDanBagReq* CSShowZhaDanBagReq::New() const {
  return new CSShowZhaDanBagReq;
}

void CSShowZhaDanBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    zhadanid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSShowZhaDanBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ZhadanId;
        break;
      }

      // optional uint32 ZhadanId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhadanId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhadanid_)));
          set_has_zhadanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSShowZhaDanBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 ZhadanId = 2;
  if (has_zhadanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zhadanid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSShowZhaDanBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 ZhadanId = 2;
  if (has_zhadanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zhadanid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSShowZhaDanBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 ZhadanId = 2;
    if (has_zhadanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhadanid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSShowZhaDanBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSShowZhaDanBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSShowZhaDanBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSShowZhaDanBagReq::MergeFrom(const CSShowZhaDanBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_zhadanid()) {
      set_zhadanid(from.zhadanid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSShowZhaDanBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShowZhaDanBagReq::CopyFrom(const CSShowZhaDanBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShowZhaDanBagReq::IsInitialized() const {

  return true;
}

void CSShowZhaDanBagReq::Swap(CSShowZhaDanBagReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(zhadanid_, other->zhadanid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSShowZhaDanBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSShowZhaDanBagReq_descriptor_;
  metadata.reflection = CSShowZhaDanBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSShowZhaDanBagRsp::kZhadanIdFieldNumber;
#endif  // !_MSC_VER

CSShowZhaDanBagRsp::CSShowZhaDanBagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSShowZhaDanBagRsp::InitAsDefaultInstance() {
}

CSShowZhaDanBagRsp::CSShowZhaDanBagRsp(const CSShowZhaDanBagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSShowZhaDanBagRsp::SharedCtor() {
  _cached_size_ = 0;
  zhadanid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSShowZhaDanBagRsp::~CSShowZhaDanBagRsp() {
  SharedDtor();
}

void CSShowZhaDanBagRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSShowZhaDanBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSShowZhaDanBagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSShowZhaDanBagRsp_descriptor_;
}

const CSShowZhaDanBagRsp& CSShowZhaDanBagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSShowZhaDanBagRsp* CSShowZhaDanBagRsp::default_instance_ = NULL;

CSShowZhaDanBagRsp* CSShowZhaDanBagRsp::New() const {
  return new CSShowZhaDanBagRsp;
}

void CSShowZhaDanBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zhadanid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSShowZhaDanBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ZhadanId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhadanid_)));
          set_has_zhadanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSShowZhaDanBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ZhadanId = 1;
  if (has_zhadanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zhadanid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSShowZhaDanBagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ZhadanId = 1;
  if (has_zhadanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zhadanid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSShowZhaDanBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ZhadanId = 1;
    if (has_zhadanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhadanid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSShowZhaDanBagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSShowZhaDanBagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSShowZhaDanBagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSShowZhaDanBagRsp::MergeFrom(const CSShowZhaDanBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zhadanid()) {
      set_zhadanid(from.zhadanid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSShowZhaDanBagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShowZhaDanBagRsp::CopyFrom(const CSShowZhaDanBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShowZhaDanBagRsp::IsInitialized() const {

  return true;
}

void CSShowZhaDanBagRsp::Swap(CSShowZhaDanBagRsp* other) {
  if (other != this) {
    std::swap(zhadanid_, other->zhadanid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSShowZhaDanBagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSShowZhaDanBagRsp_descriptor_;
  metadata.reflection = CSShowZhaDanBagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMateReqParam::kMateFetchReqFieldNumber;
const int CSMateReqParam::kQuitMateFetchReqFieldNumber;
const int CSMateReqParam::kNotButtonMateFetchReqFieldNumber;
const int CSMateReqParam::kSuccessButtonMateFetchReqFieldNumber;
const int CSMateReqParam::kEnterHeroShowBagReqFieldNumber;
const int CSMateReqParam::kShowZhaDanBagReqFieldNumber;
#endif  // !_MSC_VER

CSMateReqParam::CSMateReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMateReqParam::InitAsDefaultInstance() {
  matefetchreq_ = const_cast< ::CSMateFetchReq*>(&::CSMateFetchReq::default_instance());
  quitmatefetchreq_ = const_cast< ::CSQuitMateFetchReq*>(&::CSQuitMateFetchReq::default_instance());
  notbuttonmatefetchreq_ = const_cast< ::CSNotButtonMateFetchReq*>(&::CSNotButtonMateFetchReq::default_instance());
  successbuttonmatefetchreq_ = const_cast< ::CSSuccessButtonMateFetchReq*>(&::CSSuccessButtonMateFetchReq::default_instance());
  enterheroshowbagreq_ = const_cast< ::CSEnterHeroShowBagReq*>(&::CSEnterHeroShowBagReq::default_instance());
  showzhadanbagreq_ = const_cast< ::CSShowZhaDanBagReq*>(&::CSShowZhaDanBagReq::default_instance());
}

CSMateReqParam::CSMateReqParam(const CSMateReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMateReqParam::SharedCtor() {
  _cached_size_ = 0;
  matefetchreq_ = NULL;
  quitmatefetchreq_ = NULL;
  notbuttonmatefetchreq_ = NULL;
  successbuttonmatefetchreq_ = NULL;
  enterheroshowbagreq_ = NULL;
  showzhadanbagreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMateReqParam::~CSMateReqParam() {
  SharedDtor();
}

void CSMateReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete matefetchreq_;
    delete quitmatefetchreq_;
    delete notbuttonmatefetchreq_;
    delete successbuttonmatefetchreq_;
    delete enterheroshowbagreq_;
    delete showzhadanbagreq_;
  }
}

void CSMateReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMateReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMateReqParam_descriptor_;
}

const CSMateReqParam& CSMateReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMateReqParam* CSMateReqParam::default_instance_ = NULL;

CSMateReqParam* CSMateReqParam::New() const {
  return new CSMateReqParam;
}

void CSMateReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_matefetchreq()) {
      if (matefetchreq_ != NULL) matefetchreq_->::CSMateFetchReq::Clear();
    }
    if (has_quitmatefetchreq()) {
      if (quitmatefetchreq_ != NULL) quitmatefetchreq_->::CSQuitMateFetchReq::Clear();
    }
    if (has_notbuttonmatefetchreq()) {
      if (notbuttonmatefetchreq_ != NULL) notbuttonmatefetchreq_->::CSNotButtonMateFetchReq::Clear();
    }
    if (has_successbuttonmatefetchreq()) {
      if (successbuttonmatefetchreq_ != NULL) successbuttonmatefetchreq_->::CSSuccessButtonMateFetchReq::Clear();
    }
    if (has_enterheroshowbagreq()) {
      if (enterheroshowbagreq_ != NULL) enterheroshowbagreq_->::CSEnterHeroShowBagReq::Clear();
    }
    if (has_showzhadanbagreq()) {
      if (showzhadanbagreq_ != NULL) showzhadanbagreq_->::CSShowZhaDanBagReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMateReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSMateFetchReq MateFetchReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matefetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QuitMateFetchReq;
        break;
      }

      // optional .CSQuitMateFetchReq QuitMateFetchReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuitMateFetchReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitmatefetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NotButtonMateFetchReq;
        break;
      }

      // optional .CSNotButtonMateFetchReq NotButtonMateFetchReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NotButtonMateFetchReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notbuttonmatefetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SuccessButtonMateFetchReq;
        break;
      }

      // optional .CSSuccessButtonMateFetchReq SuccessButtonMateFetchReq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuccessButtonMateFetchReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_successbuttonmatefetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EnterHeroShowBagReq;
        break;
      }

      // optional .CSEnterHeroShowBagReq EnterHeroShowBagReq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EnterHeroShowBagReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterheroshowbagreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ShowZhaDanBagReq;
        break;
      }

      // optional .CSShowZhaDanBagReq ShowZhaDanBagReq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowZhaDanBagReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showzhadanbagreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMateReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSMateFetchReq MateFetchReq = 1;
  if (has_matefetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matefetchreq(), output);
  }

  // optional .CSQuitMateFetchReq QuitMateFetchReq = 2;
  if (has_quitmatefetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quitmatefetchreq(), output);
  }

  // optional .CSNotButtonMateFetchReq NotButtonMateFetchReq = 3;
  if (has_notbuttonmatefetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->notbuttonmatefetchreq(), output);
  }

  // optional .CSSuccessButtonMateFetchReq SuccessButtonMateFetchReq = 4;
  if (has_successbuttonmatefetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->successbuttonmatefetchreq(), output);
  }

  // optional .CSEnterHeroShowBagReq EnterHeroShowBagReq = 5;
  if (has_enterheroshowbagreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enterheroshowbagreq(), output);
  }

  // optional .CSShowZhaDanBagReq ShowZhaDanBagReq = 6;
  if (has_showzhadanbagreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->showzhadanbagreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMateReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSMateFetchReq MateFetchReq = 1;
  if (has_matefetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matefetchreq(), target);
  }

  // optional .CSQuitMateFetchReq QuitMateFetchReq = 2;
  if (has_quitmatefetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quitmatefetchreq(), target);
  }

  // optional .CSNotButtonMateFetchReq NotButtonMateFetchReq = 3;
  if (has_notbuttonmatefetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->notbuttonmatefetchreq(), target);
  }

  // optional .CSSuccessButtonMateFetchReq SuccessButtonMateFetchReq = 4;
  if (has_successbuttonmatefetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->successbuttonmatefetchreq(), target);
  }

  // optional .CSEnterHeroShowBagReq EnterHeroShowBagReq = 5;
  if (has_enterheroshowbagreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enterheroshowbagreq(), target);
  }

  // optional .CSShowZhaDanBagReq ShowZhaDanBagReq = 6;
  if (has_showzhadanbagreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->showzhadanbagreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMateReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSMateFetchReq MateFetchReq = 1;
    if (has_matefetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matefetchreq());
    }

    // optional .CSQuitMateFetchReq QuitMateFetchReq = 2;
    if (has_quitmatefetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitmatefetchreq());
    }

    // optional .CSNotButtonMateFetchReq NotButtonMateFetchReq = 3;
    if (has_notbuttonmatefetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notbuttonmatefetchreq());
    }

    // optional .CSSuccessButtonMateFetchReq SuccessButtonMateFetchReq = 4;
    if (has_successbuttonmatefetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->successbuttonmatefetchreq());
    }

    // optional .CSEnterHeroShowBagReq EnterHeroShowBagReq = 5;
    if (has_enterheroshowbagreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterheroshowbagreq());
    }

    // optional .CSShowZhaDanBagReq ShowZhaDanBagReq = 6;
    if (has_showzhadanbagreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showzhadanbagreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMateReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMateReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMateReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMateReqParam::MergeFrom(const CSMateReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matefetchreq()) {
      mutable_matefetchreq()->::CSMateFetchReq::MergeFrom(from.matefetchreq());
    }
    if (from.has_quitmatefetchreq()) {
      mutable_quitmatefetchreq()->::CSQuitMateFetchReq::MergeFrom(from.quitmatefetchreq());
    }
    if (from.has_notbuttonmatefetchreq()) {
      mutable_notbuttonmatefetchreq()->::CSNotButtonMateFetchReq::MergeFrom(from.notbuttonmatefetchreq());
    }
    if (from.has_successbuttonmatefetchreq()) {
      mutable_successbuttonmatefetchreq()->::CSSuccessButtonMateFetchReq::MergeFrom(from.successbuttonmatefetchreq());
    }
    if (from.has_enterheroshowbagreq()) {
      mutable_enterheroshowbagreq()->::CSEnterHeroShowBagReq::MergeFrom(from.enterheroshowbagreq());
    }
    if (from.has_showzhadanbagreq()) {
      mutable_showzhadanbagreq()->::CSShowZhaDanBagReq::MergeFrom(from.showzhadanbagreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMateReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMateReqParam::CopyFrom(const CSMateReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMateReqParam::IsInitialized() const {

  return true;
}

void CSMateReqParam::Swap(CSMateReqParam* other) {
  if (other != this) {
    std::swap(matefetchreq_, other->matefetchreq_);
    std::swap(quitmatefetchreq_, other->quitmatefetchreq_);
    std::swap(notbuttonmatefetchreq_, other->notbuttonmatefetchreq_);
    std::swap(successbuttonmatefetchreq_, other->successbuttonmatefetchreq_);
    std::swap(enterheroshowbagreq_, other->enterheroshowbagreq_);
    std::swap(showzhadanbagreq_, other->showzhadanbagreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMateReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMateReqParam_descriptor_;
  metadata.reflection = CSMateReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMateRspParam::kEnterHeroShowRspFieldNumber;
const int CSMateRspParam::kSendUserHeroShowRspFieldNumber;
const int CSMateRspParam::kShowZhaDanBagRspFieldNumber;
#endif  // !_MSC_VER

CSMateRspParam::CSMateRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMateRspParam::InitAsDefaultInstance() {
  enterheroshowrsp_ = const_cast< ::CSEnterHeroShowRsp*>(&::CSEnterHeroShowRsp::default_instance());
  senduserheroshowrsp_ = const_cast< ::CSSendUserHeroShowRsp*>(&::CSSendUserHeroShowRsp::default_instance());
  showzhadanbagrsp_ = const_cast< ::CSShowZhaDanBagRsp*>(&::CSShowZhaDanBagRsp::default_instance());
}

CSMateRspParam::CSMateRspParam(const CSMateRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMateRspParam::SharedCtor() {
  _cached_size_ = 0;
  enterheroshowrsp_ = NULL;
  senduserheroshowrsp_ = NULL;
  showzhadanbagrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMateRspParam::~CSMateRspParam() {
  SharedDtor();
}

void CSMateRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete enterheroshowrsp_;
    delete senduserheroshowrsp_;
    delete showzhadanbagrsp_;
  }
}

void CSMateRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMateRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMateRspParam_descriptor_;
}

const CSMateRspParam& CSMateRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMateRspParam* CSMateRspParam::default_instance_ = NULL;

CSMateRspParam* CSMateRspParam::New() const {
  return new CSMateRspParam;
}

void CSMateRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_enterheroshowrsp()) {
      if (enterheroshowrsp_ != NULL) enterheroshowrsp_->::CSEnterHeroShowRsp::Clear();
    }
    if (has_senduserheroshowrsp()) {
      if (senduserheroshowrsp_ != NULL) senduserheroshowrsp_->::CSSendUserHeroShowRsp::Clear();
    }
    if (has_showzhadanbagrsp()) {
      if (showzhadanbagrsp_ != NULL) showzhadanbagrsp_->::CSShowZhaDanBagRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMateRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSEnterHeroShowRsp EnterHeroShowRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterheroshowrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SendUserHeroShowRsp;
        break;
      }

      // optional .CSSendUserHeroShowRsp SendUserHeroShowRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SendUserHeroShowRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_senduserheroshowrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ShowZhaDanBagRsp;
        break;
      }

      // optional .CSShowZhaDanBagRsp ShowZhaDanBagRsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowZhaDanBagRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showzhadanbagrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMateRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSEnterHeroShowRsp EnterHeroShowRsp = 1;
  if (has_enterheroshowrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enterheroshowrsp(), output);
  }

  // optional .CSSendUserHeroShowRsp SendUserHeroShowRsp = 2;
  if (has_senduserheroshowrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->senduserheroshowrsp(), output);
  }

  // optional .CSShowZhaDanBagRsp ShowZhaDanBagRsp = 3;
  if (has_showzhadanbagrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->showzhadanbagrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMateRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSEnterHeroShowRsp EnterHeroShowRsp = 1;
  if (has_enterheroshowrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enterheroshowrsp(), target);
  }

  // optional .CSSendUserHeroShowRsp SendUserHeroShowRsp = 2;
  if (has_senduserheroshowrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->senduserheroshowrsp(), target);
  }

  // optional .CSShowZhaDanBagRsp ShowZhaDanBagRsp = 3;
  if (has_showzhadanbagrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->showzhadanbagrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMateRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSEnterHeroShowRsp EnterHeroShowRsp = 1;
    if (has_enterheroshowrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterheroshowrsp());
    }

    // optional .CSSendUserHeroShowRsp SendUserHeroShowRsp = 2;
    if (has_senduserheroshowrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->senduserheroshowrsp());
    }

    // optional .CSShowZhaDanBagRsp ShowZhaDanBagRsp = 3;
    if (has_showzhadanbagrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showzhadanbagrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMateRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMateRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMateRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMateRspParam::MergeFrom(const CSMateRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enterheroshowrsp()) {
      mutable_enterheroshowrsp()->::CSEnterHeroShowRsp::MergeFrom(from.enterheroshowrsp());
    }
    if (from.has_senduserheroshowrsp()) {
      mutable_senduserheroshowrsp()->::CSSendUserHeroShowRsp::MergeFrom(from.senduserheroshowrsp());
    }
    if (from.has_showzhadanbagrsp()) {
      mutable_showzhadanbagrsp()->::CSShowZhaDanBagRsp::MergeFrom(from.showzhadanbagrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMateRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMateRspParam::CopyFrom(const CSMateRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMateRspParam::IsInitialized() const {

  return true;
}

void CSMateRspParam::Swap(CSMateRspParam* other) {
  if (other != this) {
    std::swap(enterheroshowrsp_, other->enterheroshowrsp_);
    std::swap(senduserheroshowrsp_, other->senduserheroshowrsp_);
    std::swap(showzhadanbagrsp_, other->showzhadanbagrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMateRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMateRspParam_descriptor_;
  metadata.reflection = CSMateRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMateReq::kCmdFieldNumber;
const int CSMateReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSMateReq::CSMateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMateReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSMateReqParam*>(&::CSMateReqParam::default_instance());
}

CSMateReq::CSMateReq(const CSMateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMateReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMateReq::~CSMateReq() {
  SharedDtor();
}

void CSMateReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSMateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMateReq_descriptor_;
}

const CSMateReq& CSMateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMateReq* CSMateReq::default_instance_ = NULL;

CSMateReq* CSMateReq::New() const {
  return new CSMateReq;
}

void CSMateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSMateReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSMateCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSMateCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSMateCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSMateReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSMateCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSMateReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSMateCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSMateReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSMateCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSMateReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMateReq::MergeFrom(const CSMateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSMateReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMateReq::CopyFrom(const CSMateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMateReq::Swap(CSMateReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMateReq_descriptor_;
  metadata.reflection = CSMateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMateRsp::kResultFieldNumber;
const int CSMateRsp::kCmdFieldNumber;
const int CSMateRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSMateRsp::CSMateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMateRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSMateRspParam*>(&::CSMateRspParam::default_instance());
}

CSMateRsp::CSMateRsp(const CSMateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMateRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMateRsp::~CSMateRsp() {
  SharedDtor();
}

void CSMateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSMateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMateRsp_descriptor_;
}

const CSMateRsp& CSMateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMateRsp* CSMateRsp::default_instance_ = NULL;

CSMateRsp* CSMateRsp::New() const {
  return new CSMateRsp;
}

void CSMateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSMateRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSMateCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSMateCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSMateCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSMateRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSMateCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSMateRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSMateCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSMateRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSMateCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSMateRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMateRsp::MergeFrom(const CSMateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSMateRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMateRsp::CopyFrom(const CSMateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSMateRsp::Swap(CSMateRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMateRsp_descriptor_;
  metadata.reflection = CSMateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgBody::kRegisterLoginReqFieldNumber;
const int CSMsgBody::kRegisterLoginRspFieldNumber;
const int CSMsgBody::kBagReqFieldNumber;
const int CSMsgBody::kBagRspFieldNumber;
const int CSMsgBody::kDecorateBagReqFieldNumber;
const int CSMsgBody::kDecorateBagRspFieldNumber;
const int CSMsgBody::kChatReqFieldNumber;
const int CSMsgBody::kChatRspFieldNumber;
const int CSMsgBody::kMateReqFieldNumber;
const int CSMsgBody::kMaterspFieldNumber;
#endif  // !_MSC_VER

CSMsgBody::CSMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgBody::InitAsDefaultInstance() {
  registerloginreq_ = const_cast< ::CSRegisterLoginReq*>(&::CSRegisterLoginReq::default_instance());
  registerloginrsp_ = const_cast< ::CSRegisterLoginRsp*>(&::CSRegisterLoginRsp::default_instance());
  bagreq_ = const_cast< ::CSBagReq*>(&::CSBagReq::default_instance());
  bagrsp_ = const_cast< ::CSBagRsp*>(&::CSBagRsp::default_instance());
  decoratebagreq_ = const_cast< ::CSDecorateBagReq*>(&::CSDecorateBagReq::default_instance());
  decoratebagrsp_ = const_cast< ::CSDecorateBagRsp*>(&::CSDecorateBagRsp::default_instance());
  chatreq_ = const_cast< ::CSChatReq*>(&::CSChatReq::default_instance());
  chatrsp_ = const_cast< ::CSChatRsp*>(&::CSChatRsp::default_instance());
  matereq_ = const_cast< ::CSMateReq*>(&::CSMateReq::default_instance());
  matersp_ = const_cast< ::CSMateRsp*>(&::CSMateRsp::default_instance());
}

CSMsgBody::CSMsgBody(const CSMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgBody::SharedCtor() {
  _cached_size_ = 0;
  registerloginreq_ = NULL;
  registerloginrsp_ = NULL;
  bagreq_ = NULL;
  bagrsp_ = NULL;
  decoratebagreq_ = NULL;
  decoratebagrsp_ = NULL;
  chatreq_ = NULL;
  chatrsp_ = NULL;
  matereq_ = NULL;
  matersp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgBody::~CSMsgBody() {
  SharedDtor();
}

void CSMsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete registerloginreq_;
    delete registerloginrsp_;
    delete bagreq_;
    delete bagrsp_;
    delete decoratebagreq_;
    delete decoratebagrsp_;
    delete chatreq_;
    delete chatrsp_;
    delete matereq_;
    delete matersp_;
  }
}

void CSMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgBody_descriptor_;
}

const CSMsgBody& CSMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgBody* CSMsgBody::default_instance_ = NULL;

CSMsgBody* CSMsgBody::New() const {
  return new CSMsgBody;
}

void CSMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_registerloginreq()) {
      if (registerloginreq_ != NULL) registerloginreq_->::CSRegisterLoginReq::Clear();
    }
    if (has_registerloginrsp()) {
      if (registerloginrsp_ != NULL) registerloginrsp_->::CSRegisterLoginRsp::Clear();
    }
    if (has_bagreq()) {
      if (bagreq_ != NULL) bagreq_->::CSBagReq::Clear();
    }
    if (has_bagrsp()) {
      if (bagrsp_ != NULL) bagrsp_->::CSBagRsp::Clear();
    }
    if (has_decoratebagreq()) {
      if (decoratebagreq_ != NULL) decoratebagreq_->::CSDecorateBagReq::Clear();
    }
    if (has_decoratebagrsp()) {
      if (decoratebagrsp_ != NULL) decoratebagrsp_->::CSDecorateBagRsp::Clear();
    }
    if (has_chatreq()) {
      if (chatreq_ != NULL) chatreq_->::CSChatReq::Clear();
    }
    if (has_chatrsp()) {
      if (chatrsp_ != NULL) chatrsp_->::CSChatRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_matereq()) {
      if (matereq_ != NULL) matereq_->::CSMateReq::Clear();
    }
    if (has_matersp()) {
      if (matersp_ != NULL) matersp_->::CSMateRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSRegisterLoginReq RegisterLoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterLoginRsp;
        break;
      }

      // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterLoginRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BagReq;
        break;
      }

      // optional .CSBagReq BagReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BagRsp;
        break;
      }

      // optional .CSBagRsp BagRsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DecorateBagReq;
        break;
      }

      // optional .CSDecorateBagReq DecorateBagReq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebagreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DecorateBagRsp;
        break;
      }

      // optional .CSDecorateBagRsp DecorateBagRsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebagrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChatReq;
        break;
      }

      // optional .CSChatReq ChatReq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ChatRsp;
        break;
      }

      // optional .CSChatRsp ChatRsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_MateReq;
        break;
      }

      // optional .CSMateReq MateReq = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MateReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matereq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Matersp;
        break;
      }

      // optional .CSMateRsp Matersp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Matersp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matersp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->registerloginreq(), output);
  }

  // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerloginrsp(), output);
  }

  // optional .CSBagReq BagReq = 3;
  if (has_bagreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bagreq(), output);
  }

  // optional .CSBagRsp BagRsp = 4;
  if (has_bagrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bagrsp(), output);
  }

  // optional .CSDecorateBagReq DecorateBagReq = 5;
  if (has_decoratebagreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->decoratebagreq(), output);
  }

  // optional .CSDecorateBagRsp DecorateBagRsp = 6;
  if (has_decoratebagrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->decoratebagrsp(), output);
  }

  // optional .CSChatReq ChatReq = 7;
  if (has_chatreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chatreq(), output);
  }

  // optional .CSChatRsp ChatRsp = 8;
  if (has_chatrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chatrsp(), output);
  }

  // optional .CSMateReq MateReq = 9;
  if (has_matereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->matereq(), output);
  }

  // optional .CSMateRsp Matersp = 10;
  if (has_matersp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->matersp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->registerloginreq(), target);
  }

  // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerloginrsp(), target);
  }

  // optional .CSBagReq BagReq = 3;
  if (has_bagreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bagreq(), target);
  }

  // optional .CSBagRsp BagRsp = 4;
  if (has_bagrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bagrsp(), target);
  }

  // optional .CSDecorateBagReq DecorateBagReq = 5;
  if (has_decoratebagreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->decoratebagreq(), target);
  }

  // optional .CSDecorateBagRsp DecorateBagRsp = 6;
  if (has_decoratebagrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->decoratebagrsp(), target);
  }

  // optional .CSChatReq ChatReq = 7;
  if (has_chatreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chatreq(), target);
  }

  // optional .CSChatRsp ChatRsp = 8;
  if (has_chatrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chatrsp(), target);
  }

  // optional .CSMateReq MateReq = 9;
  if (has_matereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->matereq(), target);
  }

  // optional .CSMateRsp Matersp = 10;
  if (has_matersp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->matersp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSRegisterLoginReq RegisterLoginReq = 1;
    if (has_registerloginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginreq());
    }

    // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
    if (has_registerloginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginrsp());
    }

    // optional .CSBagReq BagReq = 3;
    if (has_bagreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagreq());
    }

    // optional .CSBagRsp BagRsp = 4;
    if (has_bagrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagrsp());
    }

    // optional .CSDecorateBagReq DecorateBagReq = 5;
    if (has_decoratebagreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebagreq());
    }

    // optional .CSDecorateBagRsp DecorateBagRsp = 6;
    if (has_decoratebagrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebagrsp());
    }

    // optional .CSChatReq ChatReq = 7;
    if (has_chatreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatreq());
    }

    // optional .CSChatRsp ChatRsp = 8;
    if (has_chatrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatrsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CSMateReq MateReq = 9;
    if (has_matereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matereq());
    }

    // optional .CSMateRsp Matersp = 10;
    if (has_matersp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matersp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgBody::MergeFrom(const CSMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registerloginreq()) {
      mutable_registerloginreq()->::CSRegisterLoginReq::MergeFrom(from.registerloginreq());
    }
    if (from.has_registerloginrsp()) {
      mutable_registerloginrsp()->::CSRegisterLoginRsp::MergeFrom(from.registerloginrsp());
    }
    if (from.has_bagreq()) {
      mutable_bagreq()->::CSBagReq::MergeFrom(from.bagreq());
    }
    if (from.has_bagrsp()) {
      mutable_bagrsp()->::CSBagRsp::MergeFrom(from.bagrsp());
    }
    if (from.has_decoratebagreq()) {
      mutable_decoratebagreq()->::CSDecorateBagReq::MergeFrom(from.decoratebagreq());
    }
    if (from.has_decoratebagrsp()) {
      mutable_decoratebagrsp()->::CSDecorateBagRsp::MergeFrom(from.decoratebagrsp());
    }
    if (from.has_chatreq()) {
      mutable_chatreq()->::CSChatReq::MergeFrom(from.chatreq());
    }
    if (from.has_chatrsp()) {
      mutable_chatrsp()->::CSChatRsp::MergeFrom(from.chatrsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matereq()) {
      mutable_matereq()->::CSMateReq::MergeFrom(from.matereq());
    }
    if (from.has_matersp()) {
      mutable_matersp()->::CSMateRsp::MergeFrom(from.matersp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgBody::CopyFrom(const CSMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgBody::IsInitialized() const {

  if (has_registerloginreq()) {
    if (!this->registerloginreq().IsInitialized()) return false;
  }
  if (has_registerloginrsp()) {
    if (!this->registerloginrsp().IsInitialized()) return false;
  }
  if (has_bagreq()) {
    if (!this->bagreq().IsInitialized()) return false;
  }
  if (has_bagrsp()) {
    if (!this->bagrsp().IsInitialized()) return false;
  }
  if (has_decoratebagreq()) {
    if (!this->decoratebagreq().IsInitialized()) return false;
  }
  if (has_decoratebagrsp()) {
    if (!this->decoratebagrsp().IsInitialized()) return false;
  }
  if (has_chatreq()) {
    if (!this->chatreq().IsInitialized()) return false;
  }
  if (has_chatrsp()) {
    if (!this->chatrsp().IsInitialized()) return false;
  }
  if (has_matereq()) {
    if (!this->matereq().IsInitialized()) return false;
  }
  if (has_matersp()) {
    if (!this->matersp().IsInitialized()) return false;
  }
  return true;
}

void CSMsgBody::Swap(CSMsgBody* other) {
  if (other != this) {
    std::swap(registerloginreq_, other->registerloginreq_);
    std::swap(registerloginrsp_, other->registerloginrsp_);
    std::swap(bagreq_, other->bagreq_);
    std::swap(bagrsp_, other->bagrsp_);
    std::swap(decoratebagreq_, other->decoratebagreq_);
    std::swap(decoratebagrsp_, other->decoratebagrsp_);
    std::swap(chatreq_, other->chatreq_);
    std::swap(chatrsp_, other->chatrsp_);
    std::swap(matereq_, other->matereq_);
    std::swap(matersp_, other->matersp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgBody_descriptor_;
  metadata.reflection = CSMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgHead::kUidFieldNumber;
const int CSMsgHead::kMsgIDFieldNumber;
#endif  // !_MSC_VER

CSMsgHead::CSMsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgHead::InitAsDefaultInstance() {
}

CSMsgHead::CSMsgHead(const CSMsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgHead::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgHead::~CSMsgHead() {
  SharedDtor();
}

void CSMsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgHead_descriptor_;
}

const CSMsgHead& CSMsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgHead* CSMsgHead::default_instance_ = NULL;

CSMsgHead* CSMsgHead::New() const {
  return new CSMsgHead;
}

void CSMsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgID;
        break;
      }

      // required .CSMsgID msgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSMsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required .CSMsgID msgID = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required .CSMsgID msgID = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .CSMsgID msgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgHead::MergeFrom(const CSMsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgHead::CopyFrom(const CSMsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSMsgHead::Swap(CSMsgHead* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgHead_descriptor_;
  metadata.reflection = CSMsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsg::kHeadFieldNumber;
const int CSMsg::kBodyFieldNumber;
#endif  // !_MSC_VER

CSMsg::CSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::CSMsgHead*>(&::CSMsgHead::default_instance());
  body_ = const_cast< ::CSMsgBody*>(&::CSMsgBody::default_instance());
}

CSMsg::CSMsg(const CSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsg::~CSMsg() {
  SharedDtor();
}

void CSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete body_;
  }
}

void CSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsg_descriptor_;
}

const CSMsg& CSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsg* CSMsg::default_instance_ = NULL;

CSMsg* CSMsg::New() const {
  return new CSMsg;
}

void CSMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::CSMsgHead::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::CSMsgBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSMsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .CSMsgBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSMsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .CSMsgBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSMsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .CSMsgBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSMsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .CSMsgBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsg::MergeFrom(const CSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::CSMsgHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      mutable_body()->::CSMsgBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsg::CopyFrom(const CSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void CSMsg::Swap(CSMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsg_descriptor_;
  metadata.reflection = CSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
